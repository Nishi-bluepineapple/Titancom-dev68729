<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_rel_widget_clone">
    <sp_rel_widget_clone action="DELETE">
        <child display_value="Copy of Community Content Question">7b19eb55db945410730a7b3868961997</child>
        <cloned>2020-04-20 07:36:14</cloned>
        <last_validated>2020-04-20 07:36:14</last_validated>
        <parent display_value="Community Content Question">2f4a647c672032007bf09a6617415a58</parent>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;sp_widget&gt;&lt;category/&gt;&lt;client_script&gt;&lt;![CDATA[function($timeout, $scope, $location, $rootScope, $interval, $filter, $uibModal,$sce, $http, spUtil, $window, $anchorScroll, $q, spCommunitySEOService, csmUnifiedDeviceType) {

	var apiBaseUrl = '/api/sn_communities/v1/community';
	var subscriptionBaseUrl = '/api/now/v1/actsub';
	var answerTable = "kb_social_qa_answer";

	var c = this,
		contentComments = {},
		maxCommentLevel = 7; //Total levels = 8;
	c.comments = [];
	c.queryParams = $location.search();
	c.correctComment = null;
	c.showFollow = true;
	c.contentValid = true;
	c.userSelection = '';
	c.userText = '';
	c.currentPost = '';
	c.currentType = '';
	c.user = c.data.loggedInUser || {};
	c.formValidation = {pass:true};
	c.refresh_delay = c.options.view_refresh_time;
	c.showModerationError = false;
	c.postNotValid = false;
	c.newReplyText = "";
	c.validCase = false;
	c.latestReply = null;
	/*To distinguish reply box on accepted solution panel,
				and reply box on answer in context*/
	c.acceptedAnswer = {showReplyBox: false};
	c.data.portal = $rootScope.portal.url_suffix;
	c.formValidationError = c.data.msg.requiredFieldsError;
	c.reported = false;
	$scope.reportText = "Report";
	c.postReportResult = '';
	c.choices = [];
	c.userSelection = '';
	c.current = '';
	c.moderationSubmitted = false;
	c.moderationReasonsFetched = false;
	c.canCreateCase = (c.data.enable_csm_case_creation_from_question === 'true');
	c.showAllReplies = false; //If True, shows all the nested replies expanded on page load.		
	c.hideShowAllReplyBtn = true;
	c.imageInstance = '';
	c.minImageHeight = parseInt(c.options.min_image_height) || 100;
	c.minImageWidth = parseInt(c.options.min_image_width) || 185;
	c.errorForums=[];
	c.showFeatureContentAlert=false;
	$scope.isMobileView = csmUnifiedDeviceType.isMobileView;		
	qsConfigJson = $scope.portal.quick_start_config ? JSON.parse($scope.portal.quick_start_config)[0] : null;
	if ($scope.isMobileView())		
		maxCommentLevel = 3;
	//c.activeTinyMCE stores the reply object that has tinyMCE opened, either by edit or by creating new reply
	c.activeTinyMCE = {};

	var showCaseSuccessMsg = function() {
		var caseNumber = $location.search().caseNumber;
		if($window.sessionStorage.getItem("notification") == 'true') {
			if(caseNumber){
				c.data.showSuccessMsg = true;
				c.data.successParam = caseNumber;
				c.data.successMsg = 'Case Created: ';
				c.server.update().then(function(response) {
					c.data.showSuccessMsg = false;
				});
			}
			$window.sessionStorage.setItem('notification', 'false');
		}
	};

	c.createCase = function() {
		c.data.getCaseMapping = true;
		c.data.questionId = c.post.sys_id;
		c.server.update().then(function(response) {
			c.data.getCaseMapping = false;
			var currentConfig = {};
			currentConfig.validMapping = response.mapping[0];
			currentConfig.previousUrl = $location.url();
			currentConfig.sourceUrl = $location.absUrl();
			currentConfig.contentId = c.post.content_sys_id;
			$window.sessionStorage.setItem("case_mapping", JSON.stringify(currentConfig));
			$location.url('?id=community_entity_creator');
		});
	};

	var imageCheck = 0;
	var imageArrayList;

	var query = {
		contentId : c.queryParams.sys_id,
		contentType: '5a2fcaa0dbd26600b1f6f78eaf9619a8' //question content type id
	};

	$rootScope.$on('imageArray', function(event,imageArray) {
		imageArrayList = imageArray;
		imageCheck =1;
	});

	function clearTinyMceAttachments(){
		imageCheck = 0;
		imageArrayList= [];
	}

	$scope.anchorScroll = function(anchor, answer) {
		var rootId,
			anchorId = anchor.replace('answer_', '');
		if (answer.root)
			rootId = answer.root.sys_id;
		if (rootId) {
			for (var i = 0; i &lt; c.comments.length; i++) {
				if (c.comments[i].sys_id == rootId) {
					if (rootId != anchorId)
						c.comments[i].showReplies = true;
					break;
				}
			}
		}
		$timeout(function(){
			$anchorScroll(anchor);
			$scope.$emit('sp.community.question.anchor.focus', {"anchor": anchor});
		});
	};

	$scope.gotoAnchor = function(anchor) {
		$timeout(function () {
			if(!anchor) {
				anchor = $location.search().anchor;
			}
			if(anchor) {
				var answerId = anchor.replace('answer_','');
				var root = c.data.root;
				if(root)
					$scope.anchorScroll(anchor, {'sys_id': answerId, 'root':root});
				else
					showPageAlert(c.data.msg.anchorReplyNotFound, 'alert-danger', 'fa-exclamation-circle', true);
			}
		});
	}

	if(c.data.isLoggedIn){
		//Record Watcher for Replies
		spUtil.recordWatch($scope, answerTable, "question="+query.contentId+"^content.profile!="+c.data.loggedInUserProfileId, function(data) {
			if(data.data.action == "entry"){
				getNewReplyDetails(data.data.sys_id);
			}
		});
	}

	var newCmParent = {};
	function getNewReplyDetails(answerId){
		var resourceUrl = '/contents/' + query.contentId + '/answers/' + answerId;
		$http.get(apiBaseUrl+resourceUrl)
			.then(function(data){
			var newComment = data.data.result.data;
			newComment.feedbackProfiles = [];
			newComment.showAnswer =  true;
			//	var parent = {};
			if(newComment.parent_id != ""){
				var rootIndex = findIndex(c.comments,'sys_id',newComment.root.sys_id),
					rootCm = rootIndex &gt; -1 ? c.comments[rootIndex] : null;
				if (newComment.root.sys_id == newComment.parent_id) {
					if(rootCm != null){
						newComment.replied_to = rootCm.userAvatarObject;
						placeNewComment(newComment, rootCm);
					}
				}
				else {
					getParentComment(rootCm.comments, newComment.parent_id, parent);
					newComment.replied_to = newCmParent.userAvatarObject;
					placeNewComment(newComment,newCmParent);
				}
			}
			else{
				newCmParent.sys_id = c.post.sys_id;
				placeNewComment(newComment,newCmParent);
			}
			$timeout(function(){
				$('.cm-comment-text-detail img').addClass('community_image_fullscreen');
			});
			//expand dom tree
			//$('.panel.panel-default.csm-tile.cm-comment.csm-widget &gt; .cm-comment-body').children().children('.ng-hide').removeClass('ng-hide');
			//$('.view-replies.cm-action.cm-nested-comments-link').addClass('ng-hide');
		},function(error){
			console.log(error);
		});
		newCmParent = {};//reset
	}

	var questionToCase = function() {
		c.data.convertToCase = true;
		c.data.liveProfileId = c.post.userAvatarObject.userId;
		c.data.contentId = c.post.content_sys_id;
		c.server.update().then(function(response) {
			c.validCase = response.validCase;
			c.data.convertToCase = false;
			showCaseSuccessMsg();
		});
	};

	function addRootInfo(root, cmArray) {
		cmArray.forEach(function(cm) {
			cm.root = root;
			if (cm.comments.length)
				addRootInfo(root, cm.comments);
		});
	}

	function appendNestedReplies(nest, anchor) {
		var nestedRepliesPresentFlag = false;
		c.comments.forEach(function(cm) {
			if(cm.comment_count) {
				cm.comments = nest[cm.sys_id] ? nest[cm.sys_id] : [];
				if(cm.comments.length) {
					nestedRepliesPresentFlag = true;
					addRootInfo(cm, cm.comments);	
				}
			}
		});
		if (nestedRepliesPresentFlag)
			c.hideShowAllReplyBtn = false;
		$timeout(function() {
			if(anchor)
				$scope.gotoAnchor(anchor);
		});
	}
	c.initCmObject = function(cm, scope) {
		cm.super_cm = scope.$parent.$parent.comment;
		manipulateAnswerObject(cm);
	};

	///Fetch Question Information
	var response = c.data.question;
	if(response.status == 200){
		c.post = response.data[0];
		if (c.post) {
			c.showDisableComments = c.post.canDisableComments;
			c.post.original_disable_comments = c.post.disable_comments;
			if(c.post.comment_count &gt; 0 ){
				var resourceUrl = '/contents/'+ c.post.sys_id+ '/answers?content_type='+query.contentType+'&amp;depth=1';
				var anchor = $location.search().anchor;
				if(anchor) {
					var answerId = anchor.replace('answer_','');
					resourceUrl += '&amp;anchor='+answerId;
				}
				$http.get(apiBaseUrl+resourceUrl)
					.then(function(response){
					contentComments.comments = response.data.result;
					c.comments = [];
					commentDataManipulations(contentComments);
					$timeout(function(){
						$('.cm-comment-text-detail img').addClass('community_image_fullscreen');
						$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-comment-text-detail"]);
					});
					
					$scope.$evalAsync(function(){
						/*Send nested replies call iff there are nested replies, 
						i.e. when atleast one of the top level reply has a nested reply*/
						if(!c.hideShowAllReplyBtn) {
							var resourceUrl = '/contents/'+ c.post.sys_id+ '/answers?content_type='+query.contentType+'&amp;depth=-1&amp;level_limit=' + maxCommentLevel+"&amp;view=nested";
							$http.get(apiBaseUrl+resourceUrl)
								.then(function(res){
								if(Object.keys(res.data.result).length) {
									appendNestedReplies(res.data.result, anchor);
								}
								$timeout(function(){
									$('.cm-comment-text-detail img').addClass('community_image_fullscreen');
									$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-comment-text-detail"]);
								});
							}, function(error) {
								console.log(error);
							});
						}else {
							$scope.gotoAnchor(anchor);
						}
					});
				}, function(error){
					console.log(error);
				});
			}
			if(c.canCreateCase)
				questionToCase();
			c.isContentAuthor = c.post.userAvatarObject.userId == c.data.loggedInUserProfileId;
			c.isEdited = (c.post.edited_date != '');
			c.post.isValidContent = true;
			c.post.originalTitle = c.post.title;
			c.state = c.post.state;
			c.post.originalTopics = c.post.topics;
			c.post.feedbackProfiles = [];
			c.latestReply = c.post.latestReply;
			c.accepted_answer = c.post.accepted_answer;
			if(Object.keys(c.accepted_answer).length &gt; 0){
				c.accepted_answer.feedbackProfiles = [];
				c.showAcceptedPannel = Object.keys(c.accepted_answer).length &gt; 0;
				c.accepted_answer.userAvatarObject.profileLink = getProfileLink(c.accepted_answer.userAvatarObject.userId);
			}
			//hide sn-time-ago for 1 minute
			if(c.post.publishedHideTimeAgo == true){
				$timeout(function(){
					c.post.publishedHideTimeAgo = false;
				}, c.post.publishedHideTime);
			}
			if(c.post.editedHideTimeAgo == true){
				$timeout(function(){
					c.post.editedHideTimeAgo = false;
				}, c.post.editedHideTime);
			}

			var contentId = c.post.sys_id;
			c.post.originalDescription = c.post.description;
			if(c.latestReply.userAvatarObject)
				c.latestReply.userAvatarObject.profileLink = getProfileLink(c.latestReply.userAvatarObject.userId);
			c.post.userAvatarObject.profileLink = getProfileLink(c.post.userAvatarObject.userId);
			if(c.post.answered){
				c.answered = true;
			}
			c.showFollow = c.post.showFollow;
		} 
		else {
			c.contentValid = false;
			c.postNotValid = true;
		}
	} 
	else if(response.status == 500) { //If there is an unexpected error, this message should take precedence over please login to view the content or content unavilable messages
		c.showPageAlertForError = true;
		showPageAlert(response.message, 'alert-danger', 'fa-exclamation-circle');
	}
	else if(!c.data.isLoggedIn){
		c.showPageAlertForGuest = true;
		showPageAlert('', 'alert-danger', 'fa-exclamation-circle');
		$window.sessionStorage.setItem('navToUri', $location.url());
	}
	else {
		c.showPageAlertForError = true;
		showPageAlert(response.message, 'alert-danger', 'fa-exclamation-circle');
	} 
	//--/

	//Clear tinyMCE content on cancel button click
	c.clearReply = function(content,replyBoxNumber){
		if(replyBoxNumber == 2)
			content.showReplyBox2 = false;
		else
			content.showReplyBox = false;
		c.newReplyText = "";
		content.textInput = "";
		c.showModerationError = false;
		resetAttachments(content.attachments);
	}
	
	c.cancelReply = function(content,replyBoxNumber){
		if( (c.newReplyText &amp;&amp; c.newReplyText!='') || isAttachmentDirty()){
			var modalInstance = $uibModal.open({
				animation: true,
				ariaLabelledBy: 'modal-title',
				ariaDescribedBy: 'modal-body',
				templateUrl: 'community-cancel-edit-question.html',
				controller: function($scope) {
					$scope.title = c.data.msg.discardChange;
					$scope.message = c.data.msg.editCancelMsg;
					$scope.cancel = function() { modalInstance.dismiss('cancel'); };
					$scope.confirm = function() {  modalInstance.close(); c.clearReply(content,replyBoxNumber); };
				}
			});
		}
		else
			c.clearReply(content,replyBoxNumber);
		
	}

	///Form validation for empty replies
	function validateForm(formObj,type){
		c.formValidationError = '';
		c.formValidation.pass = true;
		if(type == 'content'){
			if (!formObj.title){
				c.formValidation.pass = false;
				highlightErrors('.cm-edit-mode input[name="title"]', true);
			}else{
				removeHighlightErrors('.cm-edit-mode input[name="title"]', true);
			}

			if(c.data.topicsEnabled){
				if(formObj.topics &amp;&amp; formObj.topics.length&gt;c.data.maxTopicLimit){
					c.formValidationError = c.data.msg.topicLimitExceededAlert;
					c.formValidation.pass = false;
					highlightErrors('#choose_topics', true);
				}
				else{
					removeHighlightErrors('#choose_topics', true);
				}
			}
			if(c.canEditForum){
				if(c.writableForumIds.indexOf(formObj.forum)== -1){
					c.formValidationError = c.data.msg.questionContentTypeNotPresent;
					c.formValidation.pass = false;
					highlightErrors('#choose_forum');
					setAriaInvalid('.cm-select2-forum .cm-select2', true);
				}
				else{
					removeHighlightErrors('#choose_forum');
					setAriaInvalid('.cm-select2-forum .cm-select2', false);
				}
			}
		}
		else if(type == 'comment-view'){
			if(!formObj.reply){
				highlightErrors('.cm-content-question .mce-tinymce.mce-container.mce-panel');
				$('.cm-content-question .mce-container.mce-panel iframe').contents().find('#tinymce').attr('aria-invalid', true);
				c.formValidation.pass = false;
				c.formValidationError = c.data.msg.commentRequiredFieldError;
			}
			else{
				removeHighlightErrors('.cm-content-question .mce-tinymce.mce-container.mce-panel');
				$('.cm-content-question .mce-container.mce-panel iframe').contents().find('#tinymce').attr('aria-invalid', false);
				c.formValidation.pass = true;
			}
		}
		else if(type == 'comment-edit'){
			if(!formObj.reply){
				highlightErrors('.cm-comment-edit-mode .mce-tinymce.mce-container.mce-panel');
				$('.cm-comment-edit-mode .mce-container.mce-panel iframe').contents().find('#tinymce').attr('aria-invalid', true);
				c.formValidation.pass = false;
				c.formValidationError = c.data.msg.commentRequiredFieldError;
			}
			else{
				removeHighlightErrors('.cm-comment-edit-mode .mce-tinymce.mce-container.mce-panel');
				$('.cm-comment-edit-mode .mce-container.mce-panel iframe').contents().find('#tinymce').attr('aria-invalid', true);
				c.formValidation.pass = true;
			}
		}
		if(!c.formValidation.pass){
			if(c.formValidationError=='')
				c.formValidationError = c.data.msg.requiredFieldsError;
			c.formValidation.showMsg = true;
			if(c.formValidationError != c.data.msg.commentRequiredFieldError) {
				$scope.$evalAsync(function(){
					$anchorScroll('topOfPage');
				});
			}
		}
		else
			c.formValidation.showMsg = false;
	}

	function highlightErrors(element, addAriaInvalid){
		// addAriaInvalid true adds aria-invalid attribute true to passed element
		$(element).addClass('mandate');
		if(addAriaInvalid) setAriaInvalid(element, true);
	}

	function removeHighlightErrors(element, removeAriaInvalid){
		// removeAriaInvalid true makes aria-invalid attribute false to passed element
		$(element).removeClass('mandate');
		if(removeAriaInvalid) setAriaInvalid(element, false);
	}
	
	function setAriaInvalid(elem, value){
		$(elem).attr('aria-invalid', value);
	}

	var watcher1 = function(){}, interval1 = function(){};
	function watchFormFields(content,type){
		c.watchFormObj =  c.formData;
		$interval.cancel(interval1);
		interval1 = $interval(function(){
			if(type == 'content'){
				c.watchFormObj =  {
					title: c.post.title,
					description: c.post.description
				};
				if(c.data.topicsEnabled){
					c.watchFormObj.topics = $('#choose_topics').val();
				}
				c.watchFormObj.forum = $('#choose_forum').val();
			}
			else if(type == 'comment-view'){
				c.watchFormObj =  {
					reply: c.newReplyText
				};
			}
			else if(type == 'comment-edit'){
				c.watchFormObj =  {
					reply: content.text
				};
			}
		}, 500);

		watcher1();
		watcher1 = $scope.$watch('c.watchFormObj', function(){
			validateForm(c.watchFormObj,type);
			if(c.formValidation.pass){
				watcher1();
				$interval.cancel(interval1);
			}
		}, true);
	}
	//--/

	function showPageAlert(msg, alertClass, alertIcon, neverDisapper, callback, showMailTo) {
		c.pageAlertMessageHTML = msg;
		c.pageAlertClass = alertClass;
		c.alertIconClass = alertIcon;
		c.showPageAlert = true;
		c.showMailTo = showMailTo;
		$anchorScroll('topOfPage');
		$timeout(function(){
				$('#topOfPage .cm-alert i.fa-times').focus();
		});

		if(!neverDisapper)
			$timeout(function(){
				c.showPageAlert = false;
			}, 5000);
		if(callback)callback();
	}

	///Post Reply
	c.postComment= function(content,type,replyboxnumber){
		c.showModerationError = false;

		if($('.cm-widget-mce').is(":visible")){
			c.newReplyText = tinyMCE.activeEditor.getContent();
			reply = c.newReplyText;
		}
		else{
			reply = content.textInput;
		}

		c.formData = {};
		c.formData.reply = reply;
		validateForm(c.formData,'comment-view');
		if(!c.formValidation.pass){
			watchFormFields(content,'comment-view');
			return;
		}

		else{
			var parent;
			if(type == 'comment' || type == 'accepted_comment')parent = content.sys_id
			else parent = null;
			content.isDirty = false;
			var input = {
				text: c.formData.reply,
				parent: parent,
				imageCheck:imageCheck,
				imageArray:imageArrayList
			}
			var resourceUrl = '/contents/'+ query.contentId + '/answers';
			validateAttachments().then(function(resp){
				if(resp.valid !=true){
					content.isDirty = true;
					showAttachmentError(resp.error);
					return;
				}
				$http.post(apiBaseUrl+resourceUrl,input)
					.then(function(data){
					if(data.status == 202){
						if (data.data.result &amp;&amp; data.data.result.moderateResponse
							&amp;&amp; data.data.result.moderateResponse.filterResults) {
							var filterResults = data.data.result.moderateResponse.filterResults;
							var moderationError = [] ;
							var moderateHighlight = [];
							for (var i = 0; i &lt; filterResults.length; i ++ ) {
								moderationError.push(filterResults[i].comment);
							}
							c.showModerationError = true;
							c.moderationError = moderationError;
							$anchorScroll('topOfPage');
							content.isDirty = true;
							$timeout(function(){
								$('#topOfPage .cm-alert-question-inform .cm-close-btn').focus();
							});
						}

					} else {
						if(type == 'comment')c.activeAnswer = content.root;
						var newComment = data.data.result.contentInfo;
						if (newComment.replied_to)
							newComment.replied_to = content.userAvatarObject;

						var cb = function(edited_on, isScanInProgress, attachmentError){
							if(type == 'accepted_comment'){
								c.clearReply(c.acceptedAnswer);
							}
							else if(replyboxnumber == 2){
								c.clearReply(content,replyboxnumber);
							}
							else{
								c.clearReply(content);
							}

							c.showFollow = false;
							if(type == 'accepted_comment'){
								angular.forEach(c.comments,function(val){
									if(val.sys_id == content.sys_id)content = val;
								});
							}

							if(data.data.result.contentInfo &amp;&amp; data.data.result.contentInfo.willUnderModeration == true){
								$scope.$emit('$$uiNotification', [{		
										message: isScanInProgress ? c.data.msg.postReplyUnderModeration_scanInProgress : c.data.msg.postReplyUnderModeration,
										type: 'success'}]);
							} else {
								placeNewComment(newComment,content);
								$timeout(function() {
									$('.cm-comment-text-detail img').addClass('community_image_fullscreen');
									$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-comment-text-detail"]);
									$anchorScroll('answer_'+newComment.sys_id);
									$scope.$emit('$$uiNotification', [{		
										message: isScanInProgress ? c.data.msg.postReplySuccess_scanInProgress : c.data.msg.postReplySuccess,
										type: 'success'}]);
								});
								//showPageAlert(c.data.msg.postReplySuccess, 'alert-success', 'fa-check');
							}
							if(attachmentError){
								$scope.$emit('$$uiNotification', [{		
									'message': attachmentError,
									'type': 'error'}]
								);
							}
						}
						uploadAttachments('comment', newComment, 'post', cb);
					}
				}, function(error){
					if(error.status == 503 || error.status == 429 || error.status == 401)
						showPageAlert(error.data.result.message, 'alert-danger', 'fa-exclamation-circle');
					var boxNumber;
					if(content.showReplyBox)
						boxNumber = 1;
					else if(content.showReplyBox2)
						boxNumber = 2;
					if(error.status != 429 &amp;&amp; error.status != 401)
						c.clearReply(content,boxNumber);
				});
			})
		}
	};

	function placeNewComment(newComment,parent){
		newComment.showAnswer = true;
		newComment.originalTitle = newComment.text;
		newComment.userAvatarObject.profileLink = getProfileLink(newComment.userAvatarObject.userId);
		c.post.comment_count++;
		if (parent &amp;&amp; parent.level) parent.level = parseInt(parent.level);
		if(parent &amp;&amp; parent.sys_id &amp;&amp; parent.sys_id == c.post.sys_id) {
			c.comments.push(newComment);
			newComment.level = 0;
		}
		else {
			parent.comment_count++;
			newComment.level = parent.level &lt; maxCommentLevel ? parent.level + 1 : maxCommentLevel;
			if (parent.level &lt; maxCommentLevel)
				parent.comments.push(newComment);
			else {
				var superParent = parent.super_cm ? parent.super_cm : c;
				var parentInd = superParent.comments.map(function(val){return val.sys_id}).indexOf(parent.sys_id);
				var childrenCount = numberofChildren(parent, superParent.comments);
				superParent.comments.splice(parentInd+childrenCount+1, 0, newComment);
			}
			if(c.hideShowAllReplyBtn) {
				c.hideShowAllReplyBtn = false;
				c.showAllReplies = true;
			}
			//Expand the nested comments when new reply is posted
			if(parent.level == 0)
				parent.showReplies = true;
			else if (parent.root &amp;&amp; !parent.root.showReplies)
				parent.root.showReplies = true;
		}

		c.latestReply = newComment;
		//hide sn-time-ago for 1 minute
		newComment.hideTimeAgo = true;
		$timeout(function(){
			newComment.hideTimeAgo = false;
		}, 70000);
		c.getClasses(newComment, true);
	}
	
	function numberofChildren(parent, comments){
		var commentCount = 0;
		angular.forEach(comments, function(val){
			if(val.parent_id == parent.sys_id){
				commentCount += 1 + numberofChildren(val, comments);
			}
		});
		return commentCount;
	}


	//--/

	///Edit related functions
	c.editContent = function(content, type){
		c.showModerationError = false;
		var data = {};
		c.formData = {};
		if(type == 'question'){
			data.title = c.post.title;
			c.post.description = tinyMCE.activeEditor.getContent();
			data.description = c.post.description;
			if(c.data.topicsEnabled)
				data.topics = $('.cm-content-question select#choose_topics').val();
			data.forum = $("#choose_forum").val();
			contentType = query.contentType;
			validationType = 'content';
			data.disableComments = c.post.disable_comments;
			c.formData = data;
		}
		else{
			content.text = tinyMCE.activeEditor.getContent();
			data.title = content.text;
			contentType = ' 8f0a215c6707220071b89a6617415aa7'; //answer content type id
			validationType = 'comment-edit';
			c.formData.reply = content.text;
		}

		data.imageCheck=imageCheck;
		data.imageArray=imageArrayList;

		validateForm(c.formData,validationType);
		if(!c.formValidation.pass)
		{
			watchFormFields(content,validationType);
			return;
		}

		var resourceUrl = '/contents/' + content.sys_id + '?content_type='+ contentType;
		validateAttachments().then(function(resp){
			if(resp.valid != true){
				showAttachmentError(resp.error);
				if(type == 'question') {
					$timeout(function(){
						$anchorScroll('topOfPage');
					});
				}
				return;
			}

			var metaDesc = spCommunitySEOService.getMetaDescription(tinyMCE.activeEditor.getContent({format : 'text'}), c.data.seo_meta_descrition_length);
			if(!metaDesc) metaDesc = data.title;
			data.metaDescription = metaDesc;

			$http.put(apiBaseUrl+resourceUrl,data)
				.then(function(result){
				$timeout(function(){
					$('.cm-comment-text-detail img').addClass('community_image_fullscreen');
					$('.cm-content-body img').addClass('community_image_fullscreen');		
				});
				var contentEdited = function(editedDate, editedHideTimeAgo, editedHideTime){
					if(!editedDate){
						$timeout(function(){
							$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-content-body"]);
							$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-comment-text-detail"]);
						});
						return;
					}
					content.edited_date = editedDate;
					editedHideTimeAgo = editedHideTimeAgo || true;
					editedHideTime = editedHideTime || 60;
					if(type == 'question'){
						c.isEdited = true;
						if(editedHideTimeAgo == true){
							c.post.editedHideTimeAgo = true;
							$timeout(function(){
								c.post.editedHideTimeAgo = false;
							}, editedHideTime);
						}
					}else if(type == 'comment'){
						c.latestReply = content;
						content.hideTimeAgo = true;
						$timeout(function(){
							content.hideTimeAgo = false;
						}, 70000);
					}
					$timeout(function(){
						$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-content-body"]);
						$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-comment-text-detail"]);
					});
				};
				if(result.status == 202){
					if (result.data.result &amp;&amp; result.data.result.moderateResponse
						&amp;&amp; result.data.result.moderateResponse.filterResults) {
						var filterResults = result.data.result.moderateResponse.filterResults;
						var moderationError = [] ;
						var moderateHighlight = [];
						for (var i = 0; i &lt; filterResults.length; i ++ ) {
							moderationError.push(filterResults[i].comment);
						}
						c.showModerationError = true;
						c.moderationError = moderationError;
						$anchorScroll('topOfPage');
					}
				} else {
					var cb = function(_editedOn, isScanInProgress, attachmentError){
						var editedDate = result.data.result.data.edited_date;
						if(editedDate != '')
						{
							contentEdited(editedDate, result.data.result.data.editedHideTimeAgo, result.data.result.data.editedHideTime);
						}
						content.showEditMode	= !content.showEditMode;
						content.originalTitle = data.title;
						if(type == 'question')
						{
							content.originalDescription = data.description;
							var prevForumId = c.post.forum.sys_id;
							if(c.canEditForum){
									c.post.forum = {
										'sys_id': $('#choose_forum').val(),
										'name': c.adminOrModerationForumsWithForumIdAsKey[$('#choose_forum').val()].name
									};
							}
							
							if(c.data.topicsEnabled)
								c.post.topics = makeTopicsArray($('.cm-content-question select#choose_topics').select2('data'), 'view');
							
							
							var alertMessage = '';
							var showMailTo;
							if(result.data.result.data.content_state == 'review') {
								if(prevForumId != c.post.forum.sys_id){
									if (c.data.canEmail)
									    showMailTo = true;
									alertMessage = isScanInProgress ? c.formatMessage(c.data.msg.moveQuestionReviewSuccess_scanInProgress,[c.post.forum.name]) : c.formatMessage(c.data.msg.moveQuestionReviewSuccess,[c.post.forum.name]);
								}
								else{
									alertMessage = isScanInProgress ? c.data.msg.editQuestionReviewSuccess_scanInProgress : c.data.msg.editQuestionReviewSuccess;
								}
							}
							else {
								if(prevForumId != c.post.forum.sys_id){
									if (c.data.canEmail)
									    showMailTo = true;
									alertMessage = isScanInProgress ? c.formatMessage(c.data.msg.moveQuestionSuccess_scanInProgress,[c.post.forum.name]) : c.formatMessage(c.data.msg.moveQuestionSuccess,[c.post.forum.name]);
								}
								else{
									alertMessage = isScanInProgress ? c.data.msg.editQuestionSuccess_scanInProgress : c.data.msg.editQuestionSuccess;
								}
							}
							showPageAlert(alertMessage, 'alert-success', 'fa-check', showMailTo, false, showMailTo);
						}
						else{
							showPageAlert(isScanInProgress ? c.data.msg.editAnswerSuccess_scanInProgress : c.data.msg.editAnswerSuccess, 'alert-success', 'fa-check');
						}
						contentEdited(_editedOn);
						if(attachmentError){
							$scope.$emit('$$uiNotification', [{		
								'message': attachmentError,
								'type': 'error'}]
							);
						}
					}
					uploadAttachments(type, content, 'edit', cb, (result.data.result.data.edited_date == "" || result.data.result.data.edited_date == content.edited_date));
					if (content.original_disable_comments != content.disable_comments &amp;&amp; c.showDisableComments) {
						c.post.canReply = !content.disable_comments;
						content.original_disable_comments = content.disable_comments;
					}
					else if (c.canEditForum) {
						c.post.canReply = c.showDisableComments &amp;&amp; !c.post.disable_comments;
					}
					if (!c.showDisableComments)
						c.post.disable_comments = c.post.original_disable_comments;

					c.post.canDisableComments = c.showDisableComments;
				}
			},function(error){
				if(error.status == 503 || error.status == 429 || error.status == 401)
						showPageAlert(error.data.result.message, 'alert-danger', 'fa-exclamation-circle');
			});

		});
	}
	
	function isCommentDirty(){
		var isDirty = false;
		if(c.activeTinyMCE &amp;&amp; c.activeTinyMCE.text &amp;&amp; c.originalCommentText){
			isDirty = c.originalCommentText!=c.activeTinyMCE.text;
		}
		else if(!c.originalCommentText &amp;&amp; tinyMCE.activeEditor){
			var newComment = tinyMCE.activeEditor.getContent();
			if(newComment &amp;&amp; newComment!='')
				isDirty=true;
		}
		if(!isDirty)
			isDirty= isAttachmentDirty();

		return isDirty;
	}
	
	function isAttachmentDirty(){
		var isDirty = false;
		if(c.attachments){
			for( var idx = 0 ; idx &lt; c.attachments.length; idx++) {
				var file = c.attachments[idx];
				if (file.isDeleted || file.isNew){
					isDirty = true;
					break;
				}
			}

		}
		return isDirty;
	}

	function isFormEdited(){
		if(!c.post.showEditMode){
			return false;
		}
		if($('#choose_forum').val() != c.post.forum.sys_id){
			return true;
		}
		if(c.data.topicsEnabled){
			var choose_topics_val = $('#choose_topics').val();
			if(choose_topics_val){
				if(c.post.topics.length != choose_topics_val.length){
					return true;
				}
				for(var i=0;i&lt;c.post.topics.length;i++){
					var topic = c.post.topics[i].id;
					if(choose_topics_val.indexOf(topic)==-1){
						return true;
					}
				}
			}
			else if(c.post.topics.length != 0){
				return true;
			}
		}
		var	formEdited = false;
		for( var idx = 0 ; idx &lt; c.attachments.length; idx++) {
			var file = c.attachments[idx];
			if (file.isDeleted || file.isNew){
				formEdited = true;
				break;
			}
		}
		if (formEdited) return formEdited;
		if(c.post.originalTitle != c.post.title || $sce.valueOf(c.post.originalDescription) != $sce.valueOf(c.post.description)||(c.post.disable_comments != c.post.original_disable_comments)){
			formEdited = true;
			return formEdited;
		}
		else
			return formEdited;
	}

	c.cancelConfirm = function(content,type , redirect_url){
		if ((type!='comment' &amp;&amp; isFormEdited()) || (type!='question' &amp;&amp; isCommentDirty())){
			var modalInstance = $uibModal.open({
				animation: true,
				ariaLabelledBy: 'modal-title',
				ariaDescribedBy: 'modal-body',
				templateUrl: 'community-cancel-edit-question.html',
				controller: function($scope) {
					$scope.title = c.data.msg.discardChange;
					$scope.message = c.data.msg.editCancelMsg;
					$scope.cancel = function() { modalInstance.dismiss('cancel'); };
					$scope.confirm = function() {  modalInstance.close();c.cancelEdit(content,type,redirect_url); };
				}
			});
		}
		else{
			if(redirect_url){
				c.redirect(redirect_url);
				return;
			}
			c.cancelEdit(content,type);
		}
		$timeout(function(){
			if(type == 'question'){
				$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-content-body"]);				
			}else{
				$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-comment-text-detail"]);
			}
		});
	};

	c.redirect = function(redirect_url){
		var host =  window.location.protocol + "//"+window.location.host;
		if(redirect_url.startsWith(host)){
			var path = redirect_url.replace(host,'');
			c.redirectionConfirmed = true;
			$location.url(path);
		}
		else{
			window.location.href = redirect_url;
		}
		return;
	};

	c.cancelEdit = function(content,type , redirect_url){
		c.showModerationError = false;
		c.showWarnings = false;
		if(type == 'question')
		{
			content.title = content.originalTitle;
			content.description = content.originalDescription;
			content.disable_comments = content.original_disable_comments;
			c.showDisableComments = c.post.canDisableComments;
		}
		else if(type == 'comment' &amp;&amp; content &amp;&amp; content.text){
			content.text= c.originalCommentText;
		}
		else{
			content.text = content.originalTitle;
		}
		resetAttachments(content.attachments);
		if(redirect_url){
			c.redirect(redirect_url);
			return;
		}
		content.showEditMode = !content.showEditMode;
	}

	var currentEditableEditorId;
	c.canShowEditMode = function(content,type,index,editorId){
		setupAttachments(content.attachments);
		clearTinyMceAttachments();
		currentEditableEditorId = editorId;
		c.modalType = "edit";
		c.modalMessage = c.data.msg.editAlertMsg;
		var targetId ="actionQuestionMenu";
		if(typeof index !=undefined &amp;&amp; index&gt;=0)
			targetId = targetId+"_"+index;
		if(type == 'comment'){
			c.originalCommentText= content.text;
			if((content.comments.length &gt;0) || (content.helpful_count&gt;0)){
				c.currentContent = content;
				c.showModal('edit',c.retainFocus.bind(this,null,targetId));

			}
			else c.showEditMode(content);
		}
		else if(type == 'content'){
			if((c.comments.length &gt;0) || (c.post.upvote_count&gt;0)){
				c.currentContent = content;
				c.showModal('edit',c.retainFocus.bind(this,null,targetId));
			}
			else c.showEditMode(content);
		}
	};

	c.closeEditModal = function(){
		instance.dismiss('cancel');
	};
	
	function constructForumIdToForumObjectMap(forumList){
		c.adminOrModerationForumsWithForumIdAsKey = {};
		if(forumList){
			for(var index=0;index&lt; forumList.length; index++){
				var temp =  forumList[index];
				c.adminOrModerationForumsWithForumIdAsKey[temp.sys_id] = temp;
			}
		}
	}
	
	function populateTopicsAndAutoFillAuthorTopics(topics,originalTopics){
		if(!originalTopics){
			originalTopics = [];
		}
		$('#choose_topics').select2('val','');
		$('#choose_topics option').remove();
		var topicsArray = [];
		for(var i=0;i&lt;topics.length;i++){
			topicsArray.push(topics[i].id);
			var option = '&lt;option value='+topics[i].id+'&gt;'+topics[i].name+'&lt;/option&gt;';
			$('#choose_topics').append(option);
		}
		if(topics &amp;&amp; topics.length &gt; 0)
				$('#choose_topics').prop("disabled", false);
		else
				$('#choose_topics').prop("disabled", true);
		var preservedTopics = [];
		c.removedTopics = [];
 		for(i=0; i&lt;originalTopics.length; i++){
			var topicId = originalTopics[i].id;
			if(topicsArray.indexOf(topicId)&gt;-1){
				preservedTopics.push(originalTopics[i]);
			}
			else{
				c.removedTopics.push({
					'id': originalTopics[i].id,
					'name': originalTopics[i].name
				})
			}
		}
		$("#choose_topics").select2("data", makeTopicsArray(preservedTopics,'edit'));
		return;
	}
	
	function formatForum(node, container, query) {
			var result;
		    c.query_term = query.term;
			if(query.term==""){
				var parsedNode=c.adminOrModerationForumsWithForumIdAsKey[node.id];
				if(parsedNode.level != undefined){
					result = ('&lt;span style="display: inline-block;padding-left:' + (10 * Math.min(parsedNode.level,3)) + 'px;"&gt;' + node.text + '&lt;/span&gt;');
					$(container).attr("aria-label",node.text+', '+c.data.forumLevelsText[Math.min(parsedNode.level,3)]);
				}
				else
					result = ('&lt;span&gt;' + node.text + '&lt;/span&gt;');
			}
			else
				result = ('&lt;span style="display: inline-block;"&gt;' + node.text + '&lt;/span&gt;');
			return result;
		}
	
	function createWarning(warningMsg){
		c.showWarnings = true;
		c.warnings.push({
			'message':  warningMsg,
			'hideWarning': false
		});
		return;
	}
	
	function initializeReadOnlyForumFilter(sys_id, name){
		$timeout(function(){
			var option = '&lt;option value='+sys_id+'&gt;'+name+'&lt;/option&gt;';
			$('#choose_forum').append(option);
			$('#choose_forum').select2();
			$('#choose_forum').select2('data',{ id: sys_id, text: name});
			c.loading = false;
		});
	}

	c.showEditMode = function(content){
		c.loading = true;
		c.showModerationError = false;
		c.showWarnings = false;
		c.formValidation.showMsg = false;
		if(instance)
			instance.dismiss('cancel');
		c.canEditForum = false;
		$http.get(apiBaseUrl + '/forums?getHierarchialAdminOrModerationForums=1').then(function(data){
			if(data &amp;&amp; data.data &amp;&amp; data.data.result){
				c.loading = false;
				c.forumsWithAdminOrModerationAccess = data.data.result;
				var len = c.forumsWithAdminOrModerationAccess.length;
				for( var i=0; i&lt; len; i++){
					if(c.post.forum.sys_id == c.forumsWithAdminOrModerationAccess[i].sys_id){
						c.canEditForum = true;
						break;
					}
				}
				if(c.canEditForum){
					c.canEditForum = (len != 1);
				}
				if(c.canEditForum){
					constructForumIdToForumObjectMap(c.forumsWithAdminOrModerationAccess);

					for(var i=0;i&lt;len;i++){
						var option = '&lt;option value='+c.forumsWithAdminOrModerationAccess[i].sys_id+'&gt;'+c.forumsWithAdminOrModerationAccess[i].name+'&lt;/option&gt;';
						$('#choose_forum').append(option);
					}
					$('#choose_forum').select2({
						minimumResultsForSearch: 10,
						formatResult: formatForum
					});

					$('#choose_forum').select2('data',{ id: c.post.forum.sys_id, text: c.post.forum.name});
					var input = {};
					input.getWritableForumIdsAndAuthorUserId = true;
					input.authorCommunityProfileId = c.post.userAvatarObject.userId;
					c.server.get(input).then(function(r){
						c.contentWritableForums = r.data.contentWritableForums;
						c.writableForumIds = [];
						angular.forEach(c.contentWritableForums,function(val){
							c.writableForumIds.push(val.id);
						});
						c.authorUserId = r.data.authorUserId;
					});
					$('#choose_forum').off("change");
					var previous;
					$('#choose_forum').on("change", function (e) {
						c.showDisableComments = c.post.canDisableComments;
						c.showWarnings = false;
						c.warnings = [];
						if(c.data.topicsEnabled){
							c.forumTopics = c.adminOrModerationForumsWithForumIdAsKey[e.val].topics;
							populateTopicsAndAutoFillAuthorTopics(c.forumTopics,c.post.topics);
						}
						if(c.writableForumIds.indexOf(e.val) == -1){
							c.formValidationError = c.data.msg.questionContentTypeNotPresent;
							c.formValidation.pass = false;
							c.formValidation.showMsg = true;
							$scope.$evalAsync(function(){
								$anchorScroll('topOfPage');
							});
						}
						else{
							c.formValidation.pass = true;
							c.loading = true;
							if(c.data.topicsEnabled){
								if(c.removedTopics.length &gt; 0){
									var removedTopicsNames = [];
									for(var i=0; i &lt; c.removedTopics.length; i++){
										removedTopicsNames.push(c.removedTopics[i].name)
									}
									createWarning(c.formatMessage(c.data.msg.topicsRemovedWarning, [removedTopicsNames.join(", ")]));
								}
							}
							if(e.val != c.post.forum.sys_id){
								createWarning(c.data.msg.userPermissionsWarning);
								var input={};
								input.getAuthorAccessOnTargetForum = true;
								input.authorCommunityProfileId = c.post.userAvatarObject.userId;
								input.forum = e.val;
								input.authorUserId = c.authorUserId;
								input.checkUserAccessToPostComment = true;
								c.server.get(input).then(function(r){
									c.loading = false;
									c.showDisableComments = r.data.hasAccessToPostComent;	
									if(!(r.data.forumPerms &amp;&amp; r.data.forumPerms.content_access &amp;&amp; r.data.forumPerms.content_access[query.contentType] &amp;&amp; r.data.forumPerms.content_access[query.contentType].access &amp;&amp; (r.data.forumPerms.content_access[query.contentType].access.indexOf("content_read")&gt;-1))){
										createWarning(c.formatMessage(c.data.msg.authorLosingAccessWarning, [c.post.userAvatarObject.name]));
									}
								});
							}
							else{
								c.loading = false;
								$scope.$digest();
							}
							c.formValidation.showMsg = false;
						}
					});
				}
				else{
					initializeReadOnlyForumFilter(c.post.forum.sys_id, c.post.forum.name);
				}
			}
			else{
				initializeReadOnlyForumFilter(c.post.forum.sys_id, c.post.forum.name);
			}
		});
		
		if(c.data.topicsEnabled){
			$http.get(apiBaseUrl + '/forums/'+c.post.forum.sys_id+'/topics')
				.then(function(data){
				c.forumTopics = data.data.result.data;
				populateTopicsAndAutoFillAuthorTopics(c.forumTopics);
				prepopulateTopics();
			});
		}
		
		
		
		
		content.showReplyBox = false;
		//Show only one edit box at a time
		c.activeTinyMCE.showEditMode = false;
		c.activeTinyMCE.showReplyBox = false;
		c.post.showReplyBox = false;
		c.post.showReplyBox2 = false;
		c.acceptedAnswer.showReplyBox = false;
		c.post.showEditMode = false;
		content.showEditMode	= true;
		c.activeTinyMCE = content;
		$timeout(function(){
			if(!c.data.isAccessibilityEnabled){
						$('input[id="title"]').focus();
					}
			if(c.data.topicsEnabled){
				$(function () {
					$.extend($.fn.select2.defaults, {
						formatSelectionTooBig: function (limit) {
							return c.data.msg.topicLimitExceededMsg;
						}
					});
				});
				$('.cm-content-question select#choose_topics')
					.select2({
					minimumResultsForSearch: 10,
					maximumSelectionSize : c.data.maxTopicLimit
				});
				$('.select2-choices').removeAttr('role');
				prepopulateTopics();
				$('#choose_topics_div').on('keydown',function(e){
					if($('#choose_topics').val() &amp;&amp; c.data.maxTopicLimit&lt;=$('#choose_topics').val().length){
						if((e.code || e.which) != 9){
							e.preventDefault();
						}
					}
				});
			}
			$timeout(function(){if(currentEditableEditorId)
				focusOnEditor(currentEditableEditorId);},100);
			$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-comment-text-detail"]);
			$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-content-body"]);
		});
	}

	function prepopulateTopics(){
		$timeout(function(){
			if(c.post.topics)
			{
				$("#choose_topics").select2("data", makeTopicsArray(c.post.topics,'edit'));
			}

		});
	}

	function makeTopicsArray(rawTopics,type){
		var topics = [];
		angular.forEach(rawTopics,function(val){
			var obj = {};
			obj.id = val.id;
			/*For prepopulating topics in edit, we need text attribute,
			  where as in view mode, we need name attribute */
			if(type == 'view')
				obj.name = val.text;
			else if(type == 'edit')
				obj.text = val.name;

			topics.push(obj);
		});
		return topics;
	}
	//--/

	c.retainFocus = function(element, id){
		if(!element) element = $("#"+id);
		if(element)element.focus();
	};

	///Delete related functions
	c.canDeleteContent = function(content, type,index){
		if(type == 'comment'){
			if((content.comments.length &gt;0) || (content.helpful_count&gt;0)){
				c.modalMessage = c.data.msg.deleteAlertMsg;
			}
			else{
				c.modalMessage = c.data.msg.deleteAlertNoFeedbackMsg;
			}
			//content.parentComment= getParentComment(content, index);
			content.parentComment = content.super_cm;
		}
		else if(type == 'content'){
			if((c.comments.length &gt;0) || (c.post.upvote_count&gt;0)){
				c.modalMessage = c.data.msg.deleteAlertMsg;
			}
			else{
				c.modalMessage = c.data.msg.deleteAlertNoFeedbackMsg;
			}
		}
		c.modalType = "delete";
		c.contentType = type;
		c.currentContent = content;
		var targetId ="actionQuestionMenu";
		if(typeof index !=undefined &amp;&amp; index&gt;=0)
			targetId = targetId+"_"+index;
		c.showModal('delete',c.retainFocus.bind(this,null,targetId));
	};

	c.deleteContent = function(content,type){
		if(instance)
			instance.dismiss('cancel');
		if(type == 'content')
			content_type = query.contentType;
		else if(type == 'comment')
			content_type = '8f0a215c6707220071b89a6617415aa7';
		resourceUrl = '/contents/' + content.sys_id + '?content_type='+ content_type;
		$http({method: 'DELETE', url: apiBaseUrl+resourceUrl}).then(function(response){
			if(type == 'content'){
				var input={};
				input.message = c.data.msg.questionDeleteSuccess.replace('{0}', c.post.title);
				c.server.get(input).then(function(data){
					$window.location.href = '?id=community_home';
				});
			}
			else{
				c.post.comment_count = response.data.result.root_count;
				removeComment(content);
				showPageAlert(c.data.msg.answerDeleteSuccess, 'alert-danger', 'fa-check');
				//addMoreClasses();
			}
		});
	}

	function getParentComment(cmArray, parentId){
		for(var i=0; i &lt; cmArray.length; i++){
			if(cmArray[i] &amp;&amp; cmArray[i].sys_id == parentId ){
				newCmParent = cmArray[i];
				break;
			}
			else {
				if(cmArray[i].comments.length)
					getParentComment(cmArray[i].comments, parentId);
				if(newCmParent.sys_id)
					break;
			}
		}
	}


	function recurMarkToRemove(idx, parent) {
		var cm = parent.comments[idx];
		cm.delete_me = true; //mark to be deleted
		if (parseInt(cm.comment_count) &gt; 0) {
			parent.comments.forEach(function(ch, key) {
				if(ch.parent_id == cm.sys_id) recurMarkToRemove(key, parent);
			});
		}
	}

	function removeComment(cm) {
		var parent = cm.super_cm,
			index = parent ? findIndex(parent.comments,'sys_id',cm.sys_id) : findIndex(c.comments,'sys_id',cm.sys_id),
			actual_parent;
		if (cm.level &lt; maxCommentLevel) {
			if (parent) {
				parent.comments.splice(index, 1);
				parent.comment_count--;
			}
			else c.comments.splice(index, 1);	
		}
		else {
			//reduce parent comment count first
			actual_parent = parent.comments.find(function(val) {
				return cm.parent_id == val.sys_id;
			});
			if (actual_parent)
				actual_parent.comment_count--;
			else
				parent.comment_count--;

			//Now delete the comment
			recurMarkToRemove(index, parent);
			parent.comments = parent.comments.filter(function(cm) {
				return !cm.delete_me;
			});
		}
	}

	function findIndex(arr,attr,val){
		var res = -1;
		for (var i = 0; i &lt; arr.length ; i++) {
			if(arr[i][attr] == val) {
				res = i;
				break;
			}
		}
		return res;
	}

	//--/

	///Subscribe or Unsubscribe
	c.subscribe = function(){
		var objectType = c.queryParams.contentType;
		var objectId = c.post.sys_id;
		var resourceUrl;
		var type =  'ef7d03c467103200ace49a6617415a51';

		if(c.showFollow){
			var input = {
				type: type
			};
			resourceUrl = '/subscriptions/'+objectId+'/subscribe';
			$http.post(subscriptionBaseUrl+resourceUrl,input)
				.then(function(){
				c.showFollow = false;
				//showPageAlert(c.data.msg.questionSubscribeSuccess, 'alert-success', 'fa-check');
			});

		}else{
			resourceUrl = '/subscriptions/'+objectId+'/unsubscribe';
			$http({method: 'DELETE', url: subscriptionBaseUrl+resourceUrl})
				.then(function(){
				c.showFollow = true;
				//showPageAlert(c.data.msg.questionUnsubscribeSuccess, 'alert-info', 'fa-check');
			});
		}
		c.retainFocus(null,"actionQuestionMenu");
	};

	c.showSubscribed = function(){
		c.subscribeLabel = c.data.msg.subscribedText;
	}
	c.showUnSubscribe = function(){
		c.subscribeLabel = c.data.msg.unsubscribeText;
	}

	$scope.$watch('c.showFollow', function(){
		c.toggleSubscribeText = c.showFollow ? c.data.msg.subscribeText : c.data.msg.unsubscribeText;
		c.subscribeLabel = c.showFollow ? c.data.msg.subscribeText : c.data.msg.subscribedText;
	});
	//--/

	$scope.$on('$locationChangeStart', function(event, next, current) {
		if(!c.redirectionConfirmed &amp;&amp; ( c.post.showEditMode ? (isFormEdited() &amp;&amp; !c.cancelConfirm(c.post,'question' ,next)) : (isCommentDirty() &amp;&amp; !c.cancelConfirm(c.post,'comment' ,next))) ) {
			event.preventDefault();
		}
	});

	function refreshData(){
		var resourceUrl = '/contents/' + query.contentId + '?content_type='+ query.contentType;
		$http.get(apiBaseUrl+resourceUrl)
			.then(successCallback, errorCallback);
	}

	///Content Feedback
	c.postFeedback = function (action,content,$index,isUndoActivity){
		var focusTargetId;
		if(content.postingFeedback &amp;&amp; content.postingFeedback[action]){
			return;
		}
		if(!content.postingFeedback){
			content.postingFeedback = {};
		}
		content.postingFeedback[action] = true; 
		var successCallback = function(){
			if (action == 'upvote' &amp;&amp; !isUndoActivity){
				if(content.feedbackProfiles.length == content.upvote_count){
					content.feedbackProfiles.unshift(c.user);
				}
				content.upvote_count++;
				c.announceMessage("upvote",content.upvote_count);
				content.activities_allowed.upvote = false;
				content.activities_allowed.downvote = true;
				focusTargetId = "downVoteEle";
			}
			else if (action == 'upvote' &amp;&amp; isUndoActivity){
				if(content.feedbackProfiles.length == content.upvote_count){
					index = findIndex(content.feedbackProfiles,'userId',c.user.userId);
					content.feedbackProfiles.splice(index,1);
				}
				content.upvote_count--;
				c.announceMessage("upvote",content.upvote_count);
				content.activities_allowed.upvote = true;
				content.activities_allowed.downvote = false;
				focusTargetId = "upVoteEle";
			}
			else if(action == 'helpful' &amp;&amp; !isUndoActivity){
				if(content.feedbackProfiles.length == content.helpful_count){
					content.feedbackProfiles.unshift(c.user);
				}
				content.helpful_count++;
				c.announceMessage("helpful",content.helpful_count);
				content.activities_allowed.helpful = false;
				content.activities_allowed.unhelpful = true;
				focusTargetId = "unhelpful";
				if(typeof $index != undefined &amp;&amp; $index&gt;=0)
					focusTargetId = focusTargetId+"_"+$index;
			}
			else if(action == 'helpful' &amp;&amp; isUndoActivity){
				if(content.feedbackProfiles.length == content.helpful_count){
					index = findIndex(content.feedbackProfiles,'userId',c.user.userId);
					content.feedbackProfiles.splice(index,1);
				}
				content.helpful_count--;
				c.announceMessage("helpful",content.helpful_count);
				content.activities_allowed.helpful = true;
				content.activities_allowed.unhelpful = false;
				focusTargetId = "helpful";
				if(typeof $index != undefined &amp;&amp; $index&gt;=0)
					focusTargetId = focusTargetId+"_"+$index;
			}
			else if(action == 'bookmark' &amp;&amp; !isUndoActivity){
				content.activities_allowed.bookmark = false;
			}
			else if(action == 'bookmark' &amp;&amp; isUndoActivity){
				content.activities_allowed.bookmark = true;
			}
			content.postingFeedback[action] = false;
			$("#"+focusTargetId).focus();
		}
		var errorCallback = function(data){
			content.postingFeedback[action] = false;
			$("#"+focusTargetId).focus();
			if(data.status == 503 || data.status == 429)
				showPageAlert(data.data.result.message, 'alert-danger', 'fa-exclamation-circle');
		}
		var resourceUrl = '/activities/' + content.sys_id + '?verb=' + action+'&amp;isUndo='+(isUndoActivity==true);
		$http.post(apiBaseUrl+resourceUrl).then(successCallback,errorCallback);
	};

	//--/
	///Report Abuse
	c.flagContent = function(content,type,index){

		if(!c.moderationReasonsFetched){
			c.server.get({'moderation': true, 'contentId':query.contentId, 'type': 'content'}).then(function(r){
				var reasonsObj = r.data.moderationReasons;
				var reasons = reasonsObj ? reasonsObj.user_flag_reason_list+'' : '';
				if (reasons &amp;&amp; reasons.length &gt; 0){
					c.choices = reasons.split('|');
					c.userSelection = c.choices[0];
					c.moderationReasonsFetched = true;
				} else {
					console.log('No reason is provided');
				}
			});
		}
		c.currentPost = content;
		c.currentType = type;

		var targetId ="actionQuestionMenu";
		if(typeof index !=undefined &amp;&amp; index&gt;=0)
			targetId = targetId+"_"+index;
		c.showModal(type,c.retainFocus.bind(this, null,targetId));
	};

	c.getFeedbackProfiles = function(content, verb){
		if(c.feedbackPopupOpened){
			return;
		}
		c.feedbackPopupOpened =  true;
		var summaryField = verb + '_count';
		c.feedbackName = '';
		$http.get(apiBaseUrl + '/contents/' + content.sys_id + '/feedback/profiles?verb=' + verb)
			.then(function(response) {
			content.feedbackProfiles = response.data.result;
			content[summaryField] = content.feedbackProfiles.length;
			c.feedbackModal(content, verb);
		},
				  function(error) {
			console.log(error);
			c.feedbackPopupOpened = false;
		}
				 );
	};

	c.feedbackModal = function(content, verb){
		c.feedbackMembers = content.feedbackProfiles;
		if(verb == 'upvote')
		{
			c.feedbackName = c.data.msg.upvotes;
		}
		else if(verb == 'helpful')
		{
			c.feedbackName = c.data.msg.helpful;
		}
		if(c.feedbackMembers.length &gt;0)
			c.showModal(verb);
		else
			c.feedbackPopupOpened = false;
	}

	var instance;
	c.showModal = function (type,callback) {
		var templateUrl,size;
		if(type == 'content' || type == 'answer')
		{
			templateUrl = 'community-report-modal.html';
			size = 'md';
		}
		else if(type == 'helpful' || type == 'upvote')
		{
			templateUrl = 'community-question-feedback.html';
			size = 'sm';
		}
		else if(type == 'edit' || type == 'delete'){
			templateUrl = 'community-edit-question.html';
			size = 'md';
		}else if (type == 'contentFeature') {
            templateUrl = 'community-feature-content-question.html';
            size = 'md';
        }

		try{
			var options = {
				size: size,
				scope: $scope,
				backdrop: 'static',
				keyboard: true,
				templateUrl: templateUrl
			};

			instance = $uibModal.open(options);
			instance.closed.then(function(){
				c.feedbackPopupOpened = false;
			});
			instance.result.then(callback,callback);

		}catch(err){
			console.log(err);
		}
	};

	c.cancel = function () {
		if (c.postReportResult == 'redirect') {
			var portalName = $rootScope.portal.url_suffix;
			$window.location.href = '/' + portalName + '?id=community_home';
		} else if (c.postReportResult == 'refresh') {
			instance.dismiss('cancel');
			c.reported = false;
			c.userSelection = c.choices[0];
			c.userText = '';
		} else {
			c.reported = false;
			c.userSelection = c.choices[0];
			c.userText = '';
			instance.dismiss('cancel');
		}
	};

	c.closeFeedbackModal = function(){
		c.feedbackPopupOpened = false;
		instance.dismiss('cancel');
	};

	c.submitContent = function(){
		c.postModerationTask(c.currentPost,c.currentType);
	};

	c.postModerationTask = function(currentPost, type){
		var input = {
			reason: c.userText,
			select: c.userSelection,
			type: 'content',
			documentId: String(currentPost.sys_id)
		};

		var postModTaskUrl = '/moderation/postModerationTask';
		$http.post(apiBaseUrl+postModTaskUrl,input)
			.then(function(data){
			c.userSelection = c.choices[0];
			c.userText = '';
			c.allowAbuseReporting = false;
			c.reported = true;
			currentPost.canModerate = false;
			if(type != 'content' &amp;&amp; !currentPost.canEdit) {
				currentPost.noActionAvailable = true;
			}
			if (data.data &amp;&amp; data.data.result &amp;&amp; data.data.result.data &amp;&amp;
				!data.data.result.data.hide) {
				c.postReportResult = 'refresh';
				c.feedback = " Your abuse report has been received and will be reviewed shortly. Thank you.";
			} else {
				if (type == 'content') {
					c.postReportResult = 'redirect';
					c.feedback = " Your abuse report has been received and this post will be hidden. You will be redirected to community home page. Thank you.";
				} else {
					//taken care of 'marked as correct' answer
					if (currentPost &amp;&amp; currentPost.correct == 'true') {
						//now hide the correct answer if needed
						currentPost.correct = 'false';
						c.correctComment = null;
						c.accepted_answer = null;
						c.showAcceptedPannel = false;
						c.answered = false;
					}

					c.postReportResult = 'refresh';
					c.feedback = " Your abuse report has been received and this post will be hidden.";
				}
			}
			c.moderationSubmitted = true;
			$('.modal-header .close').focus();

		}, function(error){
			console.log(error);
		});
	};
	//--/

	///Comment Data Flags Setting, Manipulations
	function commentDataManipulations(data){
		var nestedRepliesPresent = false;
		c.comments = data.comments;
		var i = 0;
		angular.forEach(c.comments, function(value){
			value.comment_count = parseInt(value.comment_count);
			if(value.comment_count &gt; 0)
				nestedRepliesPresent = true;
			manipulateAnswerObject(value);
			i++;
		});
		if (nestedRepliesPresent)
			c.hideShowAllReplyBtn = false;
		if(c.showAllReplies)
			showAllNestedReplies(true);
	}

	function manipulateAnswerObject(value, cb){
		value.feedbackProfiles = [];
		value.originalTitle = value.text;
		if(value.correct == 'true'){
			c.correctComment = value;
			c.accepted_answer = value;
			c.showAcceptedPannel = Object.keys(c.accepted_answer).length &gt; 0;
		}
		value.comment_count = parseInt(value.comment_count);
		//value.canShowMenu = (value.canModerate || value.canEdit) &amp;&amp; c.data.isLoggedIn;
		value.showAnswer = true;
		if(value.replyInAnchorReplyPath)
			value.viewNestedAnswerLink = false;
		value.userAvatarObject.profileLink = getProfileLink(value.userAvatarObject.userId);
		if(value.replied_to)
			value.replied_to.profileLink = getProfileLink(value.replied_to.userId);
		if(cb)cb();
	}

	function showAllNestedReplies(val) {
		c.comments.forEach(function(cm) {
			cm.showReplies = val;
		});
	}

	c.showNestedReplies = function(comment) {
		if(!comment) {
			c.showAllReplies = !c.showAllReplies;
			showAllNestedReplies(c.showAllReplies);
		}
		else 
			comment.showReplies = !comment.showReplies;	
	};

	c.showReplyBox = function(content,state,replyBoxNumber,editorId){
		c.showModerationError = false;
		resetAttachments();
		clearTinyMceAttachments();
		//Clear tinyMCE contents
		c.newReplyText = "";
		$rootScope.$broadcast('clearContent',[]);
		content.isDirty = true;
		c.activeTinyMCE.showReplyBox = false;
		c.activeTinyMCE.showEditMode = false;
		if(c.accepted_answer)
			c.acceptedAnswer.showReplyBox = false;
		c.post.showReplyBox = false;
		c.post.showReplyBox2 = false;
		if(replyBoxNumber == 2){
			content.showReplyBox2 = state;
		}
		else content.showReplyBox = state;
		c.activeTinyMCE = content;
		c.formValidation.showMsg = false;
		removeHighlightErrors('.cm-content-question .mce-tinymce.mce-container.mce-panel');
		$('.cm-content-question .mce-container.mce-panel iframe').contents().find('#tinymce').attr('aria-invalid', false);
		if(editorId)focusOnEditor(editorId);
		$timeout(function(){ $scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-comment-text-detail"]); });
	}

	var focusOnEditor = function (id){
		var counter = 0,
			duration = 100,
			focusEditorInterval = $interval(function(){
				counter = counter + duration;
				var selector = "#"+id+" .mce-container iframe",
					editorFrame = $(selector)[0];
				if(editorFrame){
					var currentEditorId = editorFrame.getAttribute("id");
					if(currentEditorId){
						var currentEditor;
						for (var i = 0; i &lt; tinyMCE.editors.length; i++) {
							if(tinyMCE.editors[i].id+"_ifr" == currentEditorId){
								currentEditor = tinyMCE.editors[i];
								break;
							}
						}
						if(currentEditor)currentEditor.focus();
					}
					$interval.cancel(focusEditorInterval); //kill the interval
				}
				else {
					if(counter &gt; 30000)
						$interval.cancel(focusEditorInterval); //kill it after 1/2 a minute
				}
			},duration);
	};

	c.getClasses = function(cm, immediate) {
		var classes = '';
		classes = (cm.level % 2 != 0 ? 'cm-bg-dark':'cm-bg-light');		
		classes += (cm.level == 0 ? ' cm-level0': '');
		if ($scope.isMobileView())
			classes += ' mobile-view';
		if ($('#answer_'+cm.sys_id).parent().next('.cm-comment-parent').length)
			classes += ' cm-b-b-none cm-has-next';
		else if (!$('#answer_'+cm.sys_id).parent().closest('.cm-comment-body-inner').hasClass('cm-has-next'))
			classes += ' cm-b-b-none';

		if (!cm.comments.length &amp;&amp; $('#answer_'+cm.sys_id).hasClass('cm-has-next'))
			classes = classes.replace(/ cm-b-b-none/g,'');

		if ($('#answer_'+cm.sys_id).parent().prev('.cm-comment-parent').length)
			classes += ' cm-b-t-none';

		if(immediate) { //Things to be done immediately. Dont wait for digest cycle.
			$timeout(function(){
				//1. Put border on the comment above
				if(cm.level == 1) {
					var el = $('#answer_'+cm.sys_id).parent().prev('.cm-comment-parent');
					if (!(el.find('.cm-comment-parent').length))
						el.children('.cm-comment-body-inner').removeClass('cm-b-b-none');						
				}
			});
		}

		return classes;
	};

	c.markCorrect = function(comment, mark,index){
		var targetId;
		if(mark == 'true')
		{
			mark= false;
			targetId = "markans_"+index;
		}
		else if(mark == 'false')
		{
			mark = true;
			targetId = "undomarkans_"+index;
		}
		var retainMarkAnswerFocus = function(){
			if($("#"+targetId))
				$("#"+targetId).focus();
		}
		if (c.accepted_answer &amp;&amp; c.accepted_answer.sys_id)
			c.accepted_answer.correct = 'false';
		c.accepted_answer = comment;
		query.answerId = comment.sys_id;
		if(mark){
			query.prevCorrectId = c.correctComment ? c.correctComment.sys_id:null;
		}
		var resourceUrl = '/contents/'+ query.contentId+ '/answers/' + query.answerId + '?mark=' + mark;
		$http.put(apiBaseUrl+resourceUrl)
			.then(function(data){
			if(mark){
				angular.forEach(c.comments, function(value){
					value.correct = 'false';
				});
				comment.correct = 'true';
				c.correctComment = comment;
				c.showAcceptedPannel = true;
				c.answered = true;
			}else{
				comment.correct = 'false';
				c.correctComment = null;
				c.accepted_answer = null;
				c.showAcceptedPannel = false;
				c.answered = false;
			}
			comment.canEdit = data.data.result.data.canEdit;
		});
	};
	//--/

	c.formatMessage = function(messageText, params) {
		return messageText.replace(/\{(\d+)\}/g, function() {
			return params[arguments[1]];
		});
	};

	c.sanitizeVideo = function(comment){
		if(comment.text &amp;&amp; (comment.text).indexOf('id="video_tinymce"') &gt; 0)
			comment.text = comment.text.replace('&lt;iframe id="video_tinymce" style="width: 100%;','&lt;iframe id="video_tinymce" style="width: 225%;');
		return comment.text;
	};

	function getProfileLink(profileId) {
		if(profileId)
			return $rootScope.portal.url_suffix + "?id=community_user_profile&amp;user=" + profileId;
		else return;
	}

	/*  *** Attachments *** */

	$scope.$on('sp.community.attachments.notification.alert',function(e,data){
		if(!isValidBroadcast(data.widget)) return;
		var icon = 'fa-check';
		if(data.icon)
			icon = data.icon;
		showPageAlert(data.message, data.type, icon);
	});

	c.attachments =[];

	var isValidBroadcast = function(widgetId){
		if(!widgetId || widgetId &amp;&amp; widgetId == c.widget.sys_id) return true;
		return false;
	};

	var resetAttachments = function(attachments){
		c.attachments =[];
		c.attachmentsCount = 0;
		c.attachmentsAdded = false;
		c.formError = c.data.msg.requiredFieldsError;
		if(attachments &amp;&amp; attachments.length &gt;0)
			$rootScope.$broadcast("sp.community.attachments.cancel", {'attachments': attachments});
		getFileStates(c.post);
	};

	var setupAttachments = function(attachments){
		resetAttachments();
		if(attachments &amp;&amp; attachments.length &gt; 0){
			c.attachments = [].concat(attachments);
			var i=0;
			angular.forEach(c.attachments, function(file){
				if(file.isDeleted != true)i++;
			});
			c.attachmentsCount = i;
		}
	};

	$rootScope.$on('sp.community.attachments.added', function(event,data) {
		if(!isValidBroadcast(data.widget)) return;
		c.attachments = data.attachments;
		c.attachmentsCount = data.attachmentsCount;
		c.attachmentsAdded = true;
		c.formValidation.showMsg = c.formValidation.showMsg &amp;&amp; c.formValidationError == c.data.msg.requiredFieldsError;
		c.formValidationError = c.data.msg.requiredFieldsError;
	});

	function uploadAttachments(type,content, uploadAction, cb, createActivity){
		if(!c.attachments.length || !type || !content || !content.sys_id){
			if(cb)cb();
			return;
		}
		var table;
		if(type == 'question' ) table = 'kb_social_qa_question';
		else table = 'kb_social_qa_answer';

		$rootScope.$broadcast("sp.community.attachments.upload", {'table': table, 'contentSysId': content.sys_id,
           'uploadAction': uploadAction, 'createActivity': createActivity, 'attachments': c.attachments}, function(attachments, edited_on, isScanInProgress, attachmentError){
			if(attachments)
				content.attachments = [].concat(attachments);
			resetAttachments();
			if(cb)cb(edited_on, isScanInProgress, attachmentError);
		});
	}

	function validateAttachments(attachments){
		var deferred = $q.defer();
		$timeout(function(){
			$rootScope.$broadcast("sp.community.attachments.validate", {"attachments": attachments || c.attachments}, function(valid, fileValidationError){
				deferred.resolve({'valid': valid, 'error': fileValidationError});
			});
		});
		return deferred.promise;
	}

	function showAttachmentError(err){
		var msg = c.data.msg.requiredFieldsError;
		if(err.size &gt; 0) msg = err.msgs.size;
		else if(err.ext &gt; 0) msg = err.msgs.ext;
		else if(err.content &gt; 0) msg = err.msgs.content;
		else if(err.user &gt; 0) msg = err.msgs.user;
		else if(err.storage &gt; 0) msg = err.msgs.storage;
		else if(err.error &gt; 0) msg = err.msgs.error;
		else if(err.infected &gt; 0) msg = err.msgs.infected;

		c.formValidationError = msg;
		c.formValidation.showMsg = true;
	}

	function getFileStates(content){
		if (!content)
			return;
		var callback = function(hasInfectedFile, hasPendingFile, errMsg) {
			content.hasInfectedFile = hasInfectedFile;
			content.fileErrMsg = errMsg;
			content.hasPendingFile = hasPendingFile;
		};
		$rootScope.$broadcast("sp.community.attachments.getFileStates", content.attachments, callback)
	}

	$timeout(function(){
		getFileStates(c.post);
	});
	$scope.$on("sp.community.attachments.foundInfectedFile", getFileStates.bind(this,c.post));
	//--/

	// Harvesting content
	c.harvestContent = function(content, type){
		if(!type || !content || !content.sys_id) return;
		var _resourceUrl = "/contents/harvest/"+content.sys_id;
		$http.post(apiBaseUrl+_resourceUrl,{})
			.then(function(resp){
			if(resp.status == 201 &amp;&amp; resp.data &amp;&amp; resp.data.result &amp;&amp; resp.data.result.status == 201){
				$rootScope.$broadcast('sp.community.flatlist.refresh');
				content.canHarvest = false;
				var result = resp.data.result;
				if(result.data.harvestRecId){
					var hrf = "/"+c.data.portal+"?id=community_harvest_knowledge&amp;sys_id="+result.data.harvestRecId;
					$window.location.href = hrf;
				} else {
					showPageAlert(c.data.msg.harvestSuccess, 'alert-success', 'fa-check', true);
				}
			}
		}, function(error){
			if(error.status == 403){
				showPageAlert(c.data.msg.errorMessage_harvest_403, 'alert-danger', 'fa-exclamation-circle', true);
			}
		});
	};
	$timeout(function(){
		$('.cm-content-body img').addClass('community_image_fullscreen');
		$('.cm-content-body img').attr('alt', 'image');
		$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-content-body"]);
	});
	//get menu items for question and answers
	c.getMenuItems = function(content, type) {
		c.showPageAlert = false;
		if (content.menuItemsFetched) {
			if (!type || type != 'Question') {
				content.canEdit = content.originalCanEdit &amp;&amp; !c.post.original_disable_comments;
				content.noActionAvailable = !(content.canEdit || content.canModerate);
			}
			return;
		}
		content.showDropDown = false;
		var resourceUrl = '/contents/'+ content.sys_id + "/menuItems";
		$http.get(apiBaseUrl+resourceUrl)
			.then(function(response){
			if(response &amp;&amp; response.data &amp;&amp; response.data.result &amp;&amp; response.data.result.data) {
				var result = response.data.result.data;
				content.canEdit = result.canEdit;
				content.canModerate = result.canModerate;
				content.canBookmark = result.canBookmark;
				if(content.canBookmark &amp;&amp; result.activities_allowed)
					content.activities_allowed.bookmark = result.activities_allowed.bookmark;
				if(type == 'Question') {
					content.noActionAvailable = !(content.canEdit || content.canModerate || content.canBookmark || c.isContentAuthor || (c.accepted_answer &amp;&amp; c.accepted_answer.canHarvest)); 
				}
				else {
					content.originalCanEdit = content.canEdit;
					content.canEdit = content.originalCanEdit &amp;&amp; !c.post.original_disable_comments;
					content.noActionAvailable = !(content.canEdit || content.canModerate);
				}
				content.showDropDown = true;
				content.menuItemsFetched = true;
			}
		}, function(error){
			content.noActionAvailable = true;
			content.showDropDown = true;
			console.log(error);
		});
	};

	//for screen reader
	c.announceMessage = function(feedbackType,count) {
		if(feedbackType == "helpful")
			c.aria_message = count == 0 ? c.data.msg.helpfulCountZeroText : (count == 1 ? c.data.msg.helpfulCountText : (c.formatMessage(c.data.msg.helpfulsCountText, [count])))

			else if(feedbackType == "upvote")
				c.aria_message = c.post.upvote_count == 0 ? c.data.msg.upvoteCountZeroText : (c.post.upvote_count == 1 ? c.data.msg.upvoteCountText : (c.formatMessage(c.data.msg.upvotesCountText, [c.post.upvote_count]))) 
				document.getElementById('screen-reader-tag-id').innerHTML = '';
		document.getElementById('screen-reader-tag-id').innerHTML += '&lt;p class="sr-only"&gt;'+ c.aria_message+'&lt;/p&gt;'

	}

	c.moveFocus = function(curr) {
		if(curr == 'submit' || curr == 'cancel')
			c.current = curr;
		else if(curr == 'end') {
			var previous = c.current;
			if(previous == 'submit' || c.moderationSubmitted)
				$('.modal-header .close').focus();
			else if(previous == 'cancel'){
				$('.modal-body .submit').focus();
			}
		}
	}


	c.imgModalClose = function(){
		c.imageInstance.close();
	}
	
	c.prePolulateFeaturedContentData = function() {
		c.show_forums_feature = false;
		var resourceUrl = apiBaseUrl + '/featuredContent/forums/' + c.post.content_sys_id;
		$http({
			method: 'GET',
			url: resourceUrl
		}).then(function(r) {
			var forumData = [];
			var preData=[];
			c.show_homePage = false;
			if(r.data&amp;&amp;r.data.result)
			 preData= r.data.result.featuredContent;
			var len=preData.length;
			for (var i = 0; i &lt; len; i++) {
				var preDat = preData[i];
				if (preDat.global == "true") {
					c.show_homePage = true;
					c.showHomePageError = true;
				} else {
					forumData.push({
						id: preDat.forum_id,
						text: c.adminOrModerationForumsWithForumIdAsKey[preDat.forum_id].name
					});
					if (preDat.forum_id != c.data.question.data[0].forum.sys_id)
						c.isNotCurrentMemberShipForum = true;
				}
				c.noOfDays=parseInt(preDat.days);
			}
			if (forumData.length &gt; 0)
				c.show_forums_feature = true;
			$('#choose_forums').select2('data', forumData);
			 c.featureContentLoading=false;
		}, function(error) {
			console.log(error);
		});
	}
	c.featureContent = function(content, type) {
		c.showFeatureContentAlert=false;
		c.featureContentLoading=true;
		if(c.data.isFeaturedContent)
			c.featureContentAlert=c.data.msg.featureContentEditAlert;
		else
			c.featureContentAlert=c.data.msg.featureContentMarkAlert;
		c.errorForums=[];
		c.isNotCurrentMemberShipForum=false;
		c.show_forums_feature=false;
		c.show_homePage=false;
		c.showpostFeatureContentError = false;
		
		c.showModal(type, c.retainFocus.bind(this, null, "actionMenu"));
		var forum_id = c.data.question.data[0].forum.sys_id;
		var input = {};
		input.getWritableForumIdsAndAuthorUserId = true;
		input.authorCommunityProfileId = c.post.userAvatarObject.userId;
		c.server.get(input).then(function(r) {
			c.contentWritableForums = r.data.contentWritableForums;
			c.writableForumIds = [];
			angular.forEach(c.contentWritableForums, function(val) {
				c.writableForumIds.push(val.id);
			});
			c.authorUserId = r.data.authorUserId;
		});
		$timeout(function() {
			$('#choose_forums').select2();
			$http.get(apiBaseUrl + '/forums?getHierarchialAdminOrModerationForums=1').then(function(data) {
				if (data &amp;&amp; data.data &amp;&amp; data.data.result) {
					c.loading = false;
					c.forumsWithAdminOrModerationAccess = data.data.result;
					constructForumIdToForumObjectMap(c.forumsWithAdminOrModerationAccess);
					var len = c.forumsWithAdminOrModerationAccess.length;
					for (var i = 0; i &lt; len; i++) {
						var option = '&lt;option value=' + c.forumsWithAdminOrModerationAccess[i].sys_id + '&gt;' + c.forumsWithAdminOrModerationAccess[i].name + '&lt;/option&gt;';
						$('#choose_forums').append(option);
					}
					$('#choose_forums').select2({
						minimumResultsForSearch: 10,
						formatResult: formatForum,
	                    closeOnSelect: false,
	                    dropdownCssClass: 'select2-feature-content'
					});
					$('#choose_forums').select2('data', [{
						id: forum_id,
						text: c.adminOrModerationForumsWithForumIdAsKey[forum_id].name
					}]);
					if (c.data.isFeaturedContent)
						c.prePolulateFeaturedContentData();
					else
						c.featureContentLoading=false;
				}
			});
			c.noOfDays=parseInt(c.data.defaultDaysFeatureContent);
			$('#choose_forums').on('change', function(e) {
				var fData = e.val;
				 c.isNotCurrentMemberShipForum = false;
				 c.showpostFeatureContentError = false;
				c.errorForums = [];
				for (i = 0; i &lt; fData.length; i++) {
					if (fData[i] != forum_id)
						c.isNotCurrentMemberShipForum = true;
					if (c.writableForumIds.indexOf(fData[i]) == -1) {
						c.showpostFeatureContentError = true;
						c.errorForums.push({id:fData[i],name:c.adminOrModerationForumsWithForumIdAsKey[fData[i]].name});
					}
				}	           
			});	
			$('#choose_forums').on("select2-loaded", function(e, q) {
				if (c.query_term == '') {
					$timeout(function() {
						$('.select2-feature-content .select2-selected').css('cssText', 'display:block !important;pointer-events:none;background-color:#e8eaed;');
						$('.select2-feature-content .select2-selected .select2-result-label').each(function() {
							var ariaLabel = $(this).attr('aria-label');
							$(this).attr('aria-label', ariaLabel + ' : It is selected');
						});
					});
				}
			});
			$('#checkboxFC').change(function() {
				c.showHomePageError = true;
			});
			$("#choose_days").change(function() {
				if (this.value &gt; 999)
					c.noOfDays = 999;
				if (this.value &lt; 1)
					c.noOfDays = 1;
			});
		});
	}
	c.submitFeatureContent = function() {
		var forumsId = $('#choose_forums').val();
		if (!c.show_forums_feature)
			forumsId = null;
		var featureInput = {
			'forumsId': forumsId,
			'contentId': c.post.content_sys_id,
			'days':c.noOfDays,
			'global': c.show_homePage
		}
		var resourceUrl = apiBaseUrl + '/featuredContent';
		$http.post(resourceUrl, featureInput)
			.then(function(data) {
			c.showFeatureContentAlert=true;
			if (!forumsId &amp;&amp; !c.show_homePage)
				c.data.isFeaturedContent = false;
			else
				c.data.isFeaturedContent = true;
			c.featureContentClose();
		}, function(error) {
			console.log(error);
		});
	}
	c.disabledMarkFeatured = function() {
	    return ((!c.show_forums_feature || !$('#choose_forums').val()) &amp;&amp; !c.show_homePage) || (c.show_forums_feature &amp;&amp; c.errorForums.length &gt; 0);
	}
	c.showMemberShipForumError = function() {
	    return (c.data.isMemberShipForum == 'true') &amp;&amp; ((c.show_forums_feature &amp;&amp; c.isNotCurrentMemberShipForum) || c.show_homePage &amp;&amp; c.showHomePageError);
	};
	c.featureContentClose = function() {
	    instance.dismiss('cancel');
	}

}]]&gt;&lt;/client_script&gt;&lt;controller_as&gt;c&lt;/controller_as&gt;&lt;css&gt;.frameless{
  border : none;
}

.note-text{
    color: $text-muted;
    font-size: 12px;
    margin: 10px 0px 10px 0px;
    font-weight: 100;
  }

    .cm-top-level-class{
    .alert{
    overflow: hidden;
    min-height: 52px;
  }
      .cm-close-btn{
        background-color: inherit;
      }
  line-height: 20px;
  .overall-level{
    border: 1px solid $btn-default-border;
    padding-left: 5px;
    padding-right: 5px;
    padding-top: 2px;
    padding-bottom: 2px;
    margin-left: 5px;
  }
  .overall-level-sm{
    border: 1px solid $btn-default-border;
    padding: 5px;
    width: 209px;

    display: block;
    margin-left: auto;
    margin-right: auto;
  }
  .cm-content-question{
    .cm-success-color{
      color: $btn-success-bg;
    }
    .image50px .avatar-container {
      height: 50px !important;
      width: 50px !important;
      .sub-avatar{
        justify-content: center;
        align-items: center;
        display: inline-flex;
        span {
          font-size:16px;
        }
      }
    }
    .cm-button-link{
      text-decoration: none;
    }
    .cm-remove-focus{
      outline: none;
    }
    .cm-user-img{
      display: inline-block;
      img{
        height: 50px;
      }
    }
    .cm-user-img-blank {
      background-color: $csm-border-color;
      border-radius: 50%;
      padding: 10px;
      font-size: 16px;
      color: $text-muted;
      margin-top: 3px;
      margin-right: 5px;
      display: inline-block;
    }
    .cm-content {
      padding: 20px;
      margin-bottom: 0px;
      .cm-common-light-color{
        color: $text-muted;
      }
      .cm-common-dark-color{
        color: $text-color;
      }
      .cm-common-link-color{
        color: $link-color;
      }
      .cm-acted-color{
        color: $brand-primary;
      }
      .cm-acted-color{
        color: $csm-navbar-popover-text-color;
      }
      .cm-link{
        font-weight: 500;
        cursor: pointer;
      }
      .cm-content-header{
        .cm-content-type{
          min-height: 38px;
          font-size: 18px;
          width: 100%;
          .cm-answered-icon
          {
            color: $brand-success;
          }
          .cm-content-type-name{
            font-size: 14px;
            font-weight: 500;
            line-height: 16px;
            display: inline-block;
            vertical-align: middle;
            padding-left: 3px;
            font-weight: 400;
          }
          .cm-content-type-icon {
            display: inline-block;
            margin-top: 10px;
            //width: 90%;
          }
          .cm-menu-bar-items {
            position: relative;
            float: right;
            .cm-menu-button{
              display: inline;
              margin-right: 10px;
            }
            .cm-content-type-menu{
              display: inline;
              
              .menu-header{
              display:inline-block;
              padding: 0px 0px 0px;
              }
              .header-menu-item{
                display: inline-flex;
              }
              
            }
            .cm-content-type-menu.open{
              .tooltip{
                display:none !important;
              }
            }
          }
          .cm-action-icon {
            color: $text-muted;
            cursor: pointer;
          }
          .dropdown-menu {
            margin-top: 20px;
            position: absolute;
            top: 24px;
            right: 0;
            left: auto;
            min-width: inherit;
            background-color: $panel-bg;
            li:nth-child(n+2) {margin-top: 5px !important;}
            li a {
              padding: 3px 20px;
            }
            li &amp;gt; div {
              display: block;
              padding: 3px 20px;
              clear: both;
              font-weight: normal;
              line-height: 1.42857;
              color: $text-color;
              white-space: nowrap;
          	}
          }
        }
        .cm-content-title {
          margin-bottom: 13px;
          word-wrap: break-word;
        }

        .cm-author-details{
          .cm-author-image {
            float: left;
            margin-right: 5px;
            img{
              height: 50px;
            }
          }
          .cm-author-info {
            vertical-align: middle;
            padding-top: 5px;
          }
        }
        .harvested-articles-info.visible-xs{
          padding-top: 10px;
        }
        .harvested-articles-info{
          max-width: 350px;
          text-overflow: ellipsis;
          white-space: nowrap;
          overflow: hidden;
          display: inline-block;
          ul.harvested-articles{
            display: inline;
            padding-left: 2px;
            li.harvested-article{
              display: inline;
            }
            li.harvested-article:not(:last-child):after{
              content: ", ";
            }
          }
        }
      }

      .cm-content-body {
        line-height: initial;
        .cm-content-detail{
          word-wrap: break-word;
          img{
            max-width: 100% !important;
          }
          table{
          max-width: 100% !important;
          display: table;
          overflow-x: auto !important;
          }
          code {
            width: 100% !important;
            overflow-x: auto !important;
            display: block;
          }
          .container{
            max-width: 100% !important;
          }
        }
        .cm-topics{
          .cm-topic-label{
            padding-right: 10px;
          }
          .cm-topic-info{
            padding-right: 5px;
            .cm-topic-badge{
              height: auto;
              border-radius: 5px;
              background-color: $gray-lighter;
              font-size: 12px;
              font-weight:400;
              padding: 1px 5px;
              margin-top: 5px;
            }
            .cm-topic-badge{
              background-color: $csm-tags-bg;
            }
          }
        }
        .cm-inline-attachments-list {
          margin-top: 0px;
          padding-bottom: 5px;
        }
      }
      .cm-content-footer {
        .cm-views{
          float: right;
        }
        .cm-action-icons{
          font-size:18px;
        }
        .cm-action{
          display:inline-block;
          white-space: nowrap;
          padding-right: 10px;
        }
        .cm-show-cursor {
          cursor: pointer;
        }
        .cm-reply-box {
          .cm-widget-mce {
            .field-label{ //Hiding tinyMCE field label
              display: none;
            }
            margin-top: 0px;
            margin-bottom: 0px;
            iframe {
              width: 99% !important;
            }
          }
          .cm-form-actions{
            overflow: hidden;
            .btn-container{
              overflow: hidden;
              .cm-attach-link {
                display: inline-block;
              }
              .cm-cancel-btn {
                margin-right: 10px;
              }
            }
          }
        }
      }
      .cm-edit-mode{
        label {
          font-size: 16px;
          .sub-label {
            color: $btn-secondary-border;
            margin-left: 5px;
          }
        }
        .cm-content-header{
          overflow: hidden;
          border-bottom: 1px solid $panel-default-border;
        }
        .cm-content-header {
          border-bottom: 1px solid $csm-border-color;
        }

        .form-group {
          .cm-attach-link {
              display: inline-block;
            }
        }
        .cm-form-actions{
          overflow: hidden;
          .btn-container {
            overflow: hidden;
            .cm-cancel-btn, .cm-save-btn {
              margin-right: 10px;
            }
          }
        }
      }
    }

    .cm-comments{
      .userName {
        font-weight: 500;
      }
      .cm-comment-header{
        padding-top: 0px;
        padding-bottom: 15px;
        .cm-hdr-text {
          padding-top: 8px;
        }
        .cm-reply-count{
          font-size: 18px;
          padding-right:5px;
        }
        .cm-last-reply-info{
          .cm-close-brace{
            color: $text-muted;
            font-weight: 400;
          }
        }
        .btn.show-all-btn:active,
        .btn.show-all-btn.active,
        .btn.show-all-btn:focus,
        .btn.show-all-btn:hover{
          background-color: $panel-bg;
          box-shadow: none;
        }
      }
      .cm-comment {
        margin-bottom: 10px;
        border-left-width: 0;
        border-top-width: 0;
        .cm-common-light-color{
          color: $text-muted;
        }
        .cm-common-dark-color{
          color: $text-color;
        }
        .cm-answered-badge
        {
          color: $brand-success;
          font-size: 22px;
          vertical-align: middle;
          padding-left: 5px;
        }
        .cm-acted-color{
          color: $link-color;
          color: $csm-navbar-popover-text-color;
        }
        .cm-link{
          font-weight: 500;
          cursor: pointer;
        }
        .cm-level1{
          padding-left: 15px;
          margin-left: 62px;
        }
        .cm-comment-header{
          padding-bottom: 12px;
          border-bottom: 1px solid $panel-default-border;
          margin-bottom: 20px;
          .cm-reply-count{
            font-size: 18px;
            padding-right:5px;
          }
          .cm-last-reply-info{
            .cm-close-brace{
              color: $text-muted;
              font-weight: 400;
            }
          }
        }
        .cm-comment-header{
          border-bottom: 1px solid $csm-border-color;
        }
        .cm-comment-body{
          padding: 0;
          .cm-comment-body-inner {
            padding: 20px 0 0 20px;
            border: 1px solid $panel-default-border;
            border-right: none;
            //display: inline-flex;
            width: 100%;
          }
          .cm-comment-body-inner {
            border-color: $csm-border-color;
          }
          .cm-comment-body-inner.mobile-view {
            padding-left: 11px;
          }
          .cm-avatar-container {
            float: left;
            margin-right: 10px;
            margin-top: -6px;
            img {
              height: 50px;
            }
          }
          .cm-comment-container{
            width: calc(100% - 60px);
            padding-right: 20px;
          }
          .cm-comment-container.mobile-view {
            width: 100%;
            padding-right: 15px;
            .cm-comment-text {
              padding-top: 60px;
            }
          }
          .cm-action-icon {
            color: $text-muted;
            cursor: pointer;
          }
          .dropdown-toggle{
            font-size:20px;
          }
          .dropdown-menu {
            position: absolute;
            top: 24px;
            right: 0;
            left: auto;
            min-width: inherit;
            background-color: $panel-bg;
            li:nth-child(n+2) {margin-top: 5px !important;}
            li a {
              padding: 3px 20px;
            }
            li &amp;gt; div {
              display: block;
              padding: 3px 20px;
              clear: both;
              font-weight: normal;
              line-height: 1.42857;
              color: $text-color;
              white-space: nowrap;
          	}
          }
          .cm-comment-text{
            .cm-comment-main {
              display: block;
            }
            .cm-comment-user-info .user-details {
              display: inline-block;
              width: calc(100% - 20px);
            }
            .cm-comment-menu {
              float: right;
              position: relative;

              .menu-header{
                display:inline-block;
                padding: 0px 0px 0px;
              }
              .header-menu-item{
                display: inline-flex;
              }
            }
            .cm-comment-menu.open{
              .tooltip{
                display:none !important;
              }
            }
            .cm-badge{
              color: $badge-color;
              border-radius: 5px;
              font-weight: normal;
              margin-left: 10px;
            }
            .cm-author{
              background-color: $badge-bg;
            }
            .cm-author{
              background-color: $csm-author-badge-bg;
            }

            padding-left:0px;
            .cm-comment-user-info {
              .cm-separator-arrow {
                padding-left: 5px;
                padding-right: 5px;
                color: $text-muted;
              }
            }
            .cm-comment-text-info{
              padding-top:10px;
              padding-bottom: 5px;
              .cm-comment-text-detail{
                word-break: break-word;
                word-wrap: break-word;
                line-height: initial;
                img{
                  max-width: 100% !important;
                }
                iframe{
                  display:block;
                  width:100% !important;
                }
                .container{
                  max-width: 100% !important;
                }
              }
              .cm-inline-attachments-list {
                margin-top: 0px;
              	padding-bottom: 10px;
              }
            }
            .cm-edit-box {
              margin-top: 15px;
              padding-top: 15px;
              margin-bottom:12px;

              .cm-widget-mce {
                .field-label{ //Hiding tinyMCE field label
                  display: none;
                }
                margin-top: 0px;
                margin-bottom: 0px;
                iframe {
                  width: 99% !important;
                }
              }
              .cm-form-actions{
                overflow: hidden;
                .btn-container{
                  overflow: hidden;
                  .cm-attach-link {
                    display: inline-block;
                  }
                  .cm-cancel-btn {
                    margin-right: 10px;
                  }
                }
              }
            }
          }
          .cm-comment-footer{
            padding-top:15px;
            padding-bottom: 15px;
            border-top: 1px solid $panel-default-border;
            .cm-action{
              display:inline-block;
              white-space: nowrap;
              padding-right: 10px;
              .cm-action-icons{
                font-size:18px;
              }
            }
            .cm-action.show-reply {
              padding-right: 0;
              .btn {
                font-weight: 500;
                background-color: transparent; 
                border: none;
                padding: 0;
                color: $link-color;
                .fa {
                  padding-right: 5px;
                }
              }
              .btn:hover {
                color: darken($link-color,10%);
              }
              .btn:active, .btn.active {
                box-shadow: none;
              }
            }
            .cm-show-cursor{
              cursor: pointer;
            }
            .cm-nested-comments-link{
              font-weight: 500;
              float: right;
              display: inline-block;
            }
          }
          .cm-comment-footer {
            border-color: $csm-border-color;
          }
          .cm-reply-box {
            margin-bottom:12px;
            .cm-widget-mce {
              .field-label{ //Hiding tinyMCE field label
                display: none;
              }
              margin-top: 0px;
              margin-bottom: 0px;
              iframe {
                width: 99% !important;
              }
            }
            .cm-form-actions{
              overflow: hidden;
              .btn-container{
                overflow: hidden;
                .cm-attach-link {
                  display: inline-block;
                }
                .cm-cancel-btn {
                  margin-right: 10px;
                }
              }
            }
          }
        }
        .panel-footer.cm-show-reply {
          border-left: 1px solid $panel-default-border;
          .btn {
            color: $link-color;
            width: 100%;
            font-weight: 500;
            background-color: transparent; 
            border: none;
            padding: 0;
            .fa {
              padding-right: 5px;
            }
          }
          .btn:active, .btn.active {
            box-shadow: none;
          }
          .btn:hover {
            color: darken($link-color,10%);
          }
        }
        .panel-footer.cm-show-reply {
          border-color: $csm-border-color;
        }
      }
      .cm-comment.cm-accepted{
        border-color: $state-success-border;
        padding: 20px 20px 0px;
        border-width: 1px;
        margin-bottom: 20px;
        margin-top: 15px;
        .cm-answered-icon{
          color: $brand-success;
          font-size: 22px;
        }
        .cm-answer-link{
          float: right;
        }
        .cm-comment-body .cm-comment-body-inner {
          border: none;
        }
        .cm-comment-header.cm-accepted-header{
          padding-top: 0px;
          padding-bottom: 12px;
          margin-bottom: 0px;
          border-bottom: 1px solid $panel-default-border;
        }
        .cm-comment-header.cm-accepted-header {
          border-color: $csm-border-color;
        }
      }

    }
    .cm-comment-spinner {
      padding: 50px 0px;
      min-height: 150px;
      color: $text-muted;
      border: 1px solid $gray-light;
      border-right: none;
      border-bottom: none;
      .cm-loading-text {
        padding-top: 15px;
        font-style: italic;	
        line-height: 16px;
      }
    }
    .cm-comment-spinner {
      border-color: $csm-border-color;
    }
    .cm-end-reply-panel{
      margin-top: 15px;
      padding: 20px;
      .cm-reply-box-hide{
        .cm-reply-text{
          margin-left: 10px;
          display: inline-block;
          vertical-align: middle;
          color: $text-muted;
          font-size: 18px;
        }
      }
    }
    .cm-reply-box{
      .cm-widget-mce {
        .field-label{ //Hiding tinyMCE field label
          display: none;
        }
        margin-top: 0px;
        margin-bottom: 0px;
        iframe {
          width: 99% !important;
        }
      }
      .cm-form-actions{
        overflow: hidden;
        .btn-container{
          overflow: hidden;
          .cm-attach-link {
            display: inline-block;
          }
          .cm-cancel-btn {
            margin-right: 10px;
          }
        }
      }
    }
    .cm-select2-topic .select2-container-multi .select2-choices li.select2-search-choice {
      margin-top: 5px;
    }
  }
  .cm-sp-video-width{
    iframe {
      width:99.99%!important
    }
  }
  .cm-border-bottom {
    border-bottom: 1px solid $panel-default-border !important;
  }
  .cm-border-bottom {
    border-bottom: 1px solid $csm-border-color !important;
  }

  .cm-comment-body.cm-border-top .cm-comment-body-inner {
    border-top: 1px solid $panel-default-border;
  }
  .cm-comment-body.cm-border-top .cm-comment-body-inner {
    border-top: 1px solid $csm-border-color;
  }

  .cm-align-center {
    text-align: center;
  }

  .cm-alert {
    .cm-alert-icon {
      padding-top: 3px;
      padding-right: 5px;
    }
  }
  .cm-alert-question-inform {
    margin:15px 5px 5px 5px;
  }

  .cm-alert.info {
    border: 1px solid $state-info-border;	
    background-color: $state-info-bg;
    color: $state-info-text;
  }

  .alert{
  	margin: 1rem 0;
    .alert-icon {
      margin-right: 10px;
    }
  }
  .self-clear:after {
    content: "";
    clear: both;
    display: table;
  }

  .cm-menu-ellipsis{
    color: $text-color;
    font-size: 18px;
  }
  .cm-menu-parent-ellipsis{
    display: inline-block;
    color: $text-color;
  }
  .required .control-label:before {
    content:"* ";
    color: $brand-danger;
  }
  .required.filled .control-label:before {
    color: $text-muted;	
  }
  .mandate {
    border: 1px solid $brand-danger;
  }
  .mandate {
    border: 1px solid $csm-danger-light !important;
  }
  .cm-bottom-padding {
    margin-bottom: 0px;
  }

  .cm-message-top-padding {
    margin-top: 15px;
  }

  .cm-menu-item {
    padding-left: 17px;
    padding-right: 5px;
    padding-top: 5px;
    padding-bottom: 5px;
    cursor: pointer;
  }
  .cm-disable-comment {
    a {
      pointer-events: none;
      color: $panel-default-border !important;
    }
  }
  .cm-guest-alert{
    a, a:hover {
      color: inherit;
      text-decoration: underline;
    }
  }
  .cm-margin-btm{
    margin-bottom: 13px;
  }
  //responsiveness
   @media screen and (max-width: 768px) {
     .cm-author-details{
       display:flex
     }
     .cm-content-type-menu{
       .tooltip{
         display: none !important;
       }
     }
     .cm-comment-body{
       .cm-comment-menu{
         .tooltip{
           display: none !important;
         }
       }
     }
   }
  @media screen and (max-width: 500px) {
    .cm-content-type-menu{
      .tooltip{
        display: none !important;
      }
    }
    .cm-comments{
      .cm-comment{
        .cm-comment-body{
          .cm-comment-child{
            margin-left: 10px;
          }
          .cm-reply-box{
            margin-top: 15px;
          }
          .cm-comment-footer{
            .cm-nested-comments-link{
              margin-top: 15px;
            }
          }
          .cm-comment-menu{
            .tooltip{
              display: none !important;
            }
          }
        }
      }
    }
  }

  @media screen and (min-width: 501px) and (max-width: 768px) {
    .cm-content-type-menu{
      .tooltip{
        display: none !important;
      }
    }
    .cm-comments{
      .cm-comment{
        .cm-comment-body{
          .cm-comment-child{
            margin-left: 10px;
          }
          .cm-reply-box{
            margin-top: 15px;
          }
          .cm-comment-footer{
            .cm-nested-comments-link{
              margin-top: 0px;
            }
          }
          .cm-comment-menu{
            .tooltip{
              display: none !important;
            }
          }
        }
      }
    }
  }

  @media screen and (min-width: 769px) {
    .cm-comments{
      .cm-comment{
        .cm-comment-body{
          .cm-comment-child{
            margin-left: 62px;
          }
          .cm-comment-footer{
            .cm-nested-comments-link{
              margin-top: 0px
            }
          }
        }
      }
    }
  }
    }

.nonactive-link {
   pointer-events: none;
   cursor: default;
}

.active-link:hover {
   text-decoration: underline;
}

.cm-bg-dark {
  background-color: $well-bg !important;
}
.cm-bg-light {
  background-color: $panel-bg !important;
}
.cm-b-t-none {
  border-top: none !important;
}
.cm-b-b-none {
  border-bottom: none !important;
}
.cm-small-font {
  font-size: 12px;
}
.highlight-activty {
  border: 1px solid $input-border-focus;
  box-shadow: 0 0 4px 0 $input-border-focus;
  border-radius: 3px;
}
.community_image_fullscreen{
cursor: pointer;
}
.modal-body .warn-msg .fa {
  color: $gray-lighter;
}
.community-image-modal .close {
	color: $panel-bg;
}
.community-image-modal .close:focus {
	color: $panel-bg;
}
.community-image-modal .close:hover {
	color: $btn-default-border;
}
.avatar-container .avatar.soloAvatar .sub-avatar{
  color: $gray-darker;
  background: $gray-lighter;
  background-size: cover;
}

.forum-width {
  width: 400px;
}

@media  (max-width: 510px) {
  .forum-width {
    width: 100%;
  }
}

.cm-loading-div{
  vertical-align: middle;
  color: $text-muted;
  padding-top: 300px;
  padding-bottom: 300px;
}

.cm-loading{
  font-style: italic;
}
.modal-load{
   height:150px;
  color: $text-muted;
  text-align: center;
  .fa-spinner {
    font-size: 22px;
  }
  p{
    font-style: italic;
    margin-top: 75px;
    vertical-align: middle;
  }
}
.dropdown.open .tooltip {
	display: none !important;
}

.disable-comments-checkbox{
  height: 16px;	
  width: 16px;	
  border-radius: 2px;
  background-color: $brand-primary;
  padding-left:0px !important;
}
.disable-comments-message{
  color: $text-muted;
  text-align: center;
  font-size: 18px;
}
 &lt;/css&gt;&lt;data_table&gt;sp_instance&lt;/data_table&gt;&lt;demo_data/&gt;&lt;description/&gt;&lt;docs/&gt;&lt;field_list/&gt;&lt;has_preview&gt;true&lt;/has_preview&gt;&lt;id&gt;community-content-question&lt;/id&gt;&lt;internal&gt;false&lt;/internal&gt;&lt;link&gt;&lt;![CDATA[function(scope) {
	var c = scope.c,
		$timeout = $injector.get('$timeout'),
		$uibModal = $injector.get('$uibModal');

	/*****
	This opens the image in a modal and handles the image sizing.
	****/
	var options = {
		scope: scope,
		keyboard: true,
		templateUrl: 'community-image-modal-question.html'
	};
	$(".cm-top-level-class").on("click",".community_image_fullscreen", function() {
		var src= this.src;
		var tag = $(this).parent().get(0).tagName;
		if( tag != 'A'){
			c.imageInstance = $uibModal.open(options);
			var orignalWidth = $(this).prop('naturalWidth');
			var orignalHeight = $(this).prop('naturalHeight');
			$timeout(function(){
				var modal = document.getElementById('communityImageModal'),
					modalImg = $('#modalImage')[0];
				modal.style.display = "block";
				modalImg.src = src;
				c.imagesrc = src;
				modalImg.width = orignalWidth &gt; c.minImageWidth ? orignalWidth : c.minImageWidth;
				modalImg.style.minHeight = orignalHeight &gt; c.minImageHeight ? orignalHeight : c.minImageHeight +"px";
				$('.modal-dialog').width(modalImg.width);
				$('#modal-close').focus();
			});
		}

	});
	
	/*****
	Css specifications of the table which generate by tinymce editor's input, is overridden by bootstrap css specifications. This function fixes conflicting css specifications corresponding to attributes inside table.
	****/
	scope.$on('sp.community.question.tinymce.table.fixcss', function(event, contentSelector){
		$(contentSelector + ' table').each(function(){
			$(this).css("border-spacing", $(this).attr("cellspacing") + "px");
			$(this).find( "td" ).css("padding", $(this).attr("cellpadding") + "px");
			$(this).css("border-collapse", "separate");
			$(this).wrap("&lt;div style = 'overflow: auto'&gt;&lt;/div&gt;" );
		});
	});

	/*****
	Apply focus css on reply anchor.
	****/
	scope.$on('sp.community.question.anchor.focus', function(event, data){
		$('#' + data.anchor).parent().attr('tabindex', '0');
		$('#' + data.anchor).parent().attr('aria-label', 'You are currently on a reply');
		$('#' + data.anchor).parent().focus();
		$('#' + data.anchor).parent().addClass('highlight-activty');
		$('#' + data.anchor).parent().on("focusin", function(){
			$(this).removeClass('highlight-activty');
		});
		$timeout(function() {
			$('#' + data.anchor).parent().removeClass('highlight-activty');
		}, qsConfigJson? qsConfigJson.timeouts.anchorFocus : c.options.anchor_focus_timeout);
	});
}]]&gt;&lt;/link&gt;&lt;name&gt;Community Content Question&lt;/name&gt;&lt;option_schema&gt;[{"name":"panel_type","default_value":"default","section":"other","label":"Panel Type","type":"string"},{"name":"view_refresh_time","default_value":"10","section":"other","label":"View Refresh Time (seconds)","type":"string"},{"hint":"in miliseconds","name":"anchor_focus_timeout","default_value":"5000","section":"other","label":"Anchor Focus Timeout","type":"integer"},{"name":"min_image_height","default_value":"100","section":"other","label":"Minimum Image Height (pixels)","type":"string"},{"name":"min_image_width","default_value":"185","section":"other","label":"Minimum Image Width (pixels)","type":"string"},{"name":"user_mention_list_size","section":"other","default_value":"10","label":"User Mentions Suggestion List Size","type":"integer"},{"hint":"","name":"user_mention_min_chars","section":"other","default_value":"3","label":"Number of characters required after the '@' for users mentions","type":"integer"},{"hint":"","name":"user_mention_debounce","section":"other","default_value":"250","label":"Time in milliseconds used to throttle fetch user mentions","type":"string"}]&lt;/option_schema&gt;&lt;public&gt;true&lt;/public&gt;&lt;roles/&gt;&lt;script&gt;&lt;![CDATA[(function($sp){

	data.enable_gamification = gs.getProperty("sn_communities.enable_gamification"); // Gamification property to check for display
  data.useSnBind = gs.getProperty("sn_communities.useSnBind"); // To ascertain whether to use ng-Bind or sn-Bind
	data.levelInfo = gs.getProperty("sn_communities.content.show_gamification_level");
	data.enable_csm_case_creation_from_question = gs.getProperty("sn_communities.enable_csm_case_creation_from_question");
	data.defaultDaysFeatureContent=gs.getProperty("sn_communities.default_featured_days");
	var questionContentTypeId = '5a2fcaa0dbd26600b1f6f78eaf9619a8';
	if (input &amp;&amp; input.checkUserAccessToPostComment) {
		data.hasAccessToPostComent = new CommunityUser().hasContentAccess(input.forum, CommunityConstants.ANSWER_CONTENT_TYPE_ID, CommunityConstants.CONTENT_WRITE);
	}
	if(!input || (input &amp;&amp; input.type === "cxs_view") ){
		var readOnlyMode = false;
		if((input &amp;&amp; input.read_only) || $sp.getParameter("sysparm_readonly") === 'true')
			readOnlyMode = true;
		
		data.frameless_class = '';
		if((input &amp;&amp; input.frameless) || $sp.getParameter("frameless") === 'true')
			data.frameless_class = 'frameless';

		data.readOnlyMode = readOnlyMode;
		data.isLoggedIn = !readOnlyMode &amp;&amp; gs.isLoggedIn();
		data.question_to_entity_creation = $sp.getWidget('question-to-entity-creation');
		
		//Fetch Question Information
		var questionId = (input ? input.sys_id : $sp.getParameter('sys_id')); 
		var anchor = $sp.getParameter("anchor");
		if(anchor){
			var answerId = anchor.replace(CommunityConstants.ANSWER_PREFIX,'');
			data.root = new CommunityContent().getRootContent(answerId, CommunityConstants.ANSWER_TYPE);
		}
		var communityContent = new CommunityContent();
		data.question = communityContent.getContentInfo(questionId, questionContentTypeId);
		data.isMemberShipForum=communityContent.isInMemberShipForum(questionId)+'';
		if(gs.isLoggedIn()){
			var live_profile = new GlideRecord('live_profile');
			live_profile.addQuery("document", gs.getUserID());
			live_profile.query();
			if (live_profile.next()) data.loggedInUserProfileId = live_profile.getUniqueValue();
			var profileId  = data.loggedInUserProfileId;
			var profile = new Community_Factory().getWrapperType(CommunityConstants.PROFILE).getUserInfo([profileId],['display_name', 'photo', 'title', 'initials']);
			if (!gs.nil(profile[profileId])) {
				data.loggedInUser = profile[profileId];
				data.loggedInUser.userImage = data.loggedInUser.userImage != "" ? data.loggedInUser.userImage + "?t=small" : "";
			}
			data.contentModerationEnabled = communityContent.isContentModerationEnabled() + '';
		}
		data.topicsEnabled = CommunityConstants.ENABLE_TOPICS;
		$sp.getWidget("community-view-logger");
		//data.video=$sp.getWidget("comm-video-upload", {});
	}else if(input &amp;&amp; input.message){
		gs.getSession().putClientData('cm.content.delete.notify',new sn_communities.CommunityUtil().escapeHTML(input.message));
		data.success = true;
	}else if(input &amp;&amp; input.convertToCase) {
		if(GlidePluginManager.isActive(	'com.sn_customerservice')) {
			var communityCaseUtility = new CommunityCaseUtility();
			data.validCase = communityCaseUtility.canConvertToCase(input.liveProfileId, input.contentId);
		}
		return;	
	}else if(input &amp;&amp; input.getCaseMapping &amp;&amp; input.questionId) {
		var commUtility = new CommunityCaseUtility();
		data.mapping = commUtility.getEntityMapping('kb_social_qa_question', input.questionId, 'e3f008adeb400300a51a63fba206fe11');
		return;
	} else if(input &amp;&amp; input.showSuccessMsg &amp;&amp; input.showSuccessMsg) {
		successMessage = ((input.successMsg == 'Case Created: ') ? gs.getMessage('Case Created: '): input.successMsg);
		successMessage = successMessage + input.successParam;
		gs.addInfoMessage(successMessage);
		return;
	} else if (input &amp;&amp; input.moderation &amp;&amp; input.contentId &amp;&amp; input.type){
		data.moderationReasons = new CommunityModeration().getModerationSettings(input.type, input.contentId);
	} else if(input &amp;&amp; input.getAuthorAccessOnTargetForum){
		data.forumPerms = new CommunityUser(input.authorUserId).getPermissionsForForum(input.forum);
		return;
	} else if(input &amp;&amp; input.getWritableForumIdsAndAuthorUserId){
		var author_live_profile = new GlideRecord('live_profile');
		author_live_profile.addQuery("sys_id", input.authorCommunityProfileId);
		author_live_profile.query();
		if(author_live_profile.next()){
			data.authorUserId =  author_live_profile.getValue("document");
		}
		data.contentWritableForums = new CommunityUser().getWritableForumsForContentType(questionContentTypeId);
		return;
	}
	data.maxTopicLimit = parseInt(gs.getProperty('sn_communities.max_topic_limit'));
	data.seo_meta_descrition_length = parseInt(gs.getProperty('sn_communities.seo.pages.meta_descrition.length'));
	data.userMentionConfig = {
		enabled: sn_communities.CommunityConstants.ENABLED_USER_MENTIONS,
		sourceTable: sn_communities.CommunityConstants.QUESTION_TABLE,
		sourceId: $sp.getParameter("sys_id"),
		limit: options.user_mention_list_size || 10,
		minChars: options.user_mention_min_chars || 3,
		debounce: parseInt(options.user_mention_debounce) || 250,
		messages: {
			loading: gs.getMessage('Loading'),
			noMatches: gs.getMessage('No matches'),
			init: gs.getMessage('Enter the name of the person you want to mention')
		}
	}
	data.msg = {
		editQuestionSuccess : gs.getMessage('Question edited.'),
		editQuestionSuccess_scanInProgress : gs.getMessage('Question edited. Attachment(s) are currently undergoing security scan.'),
		moveQuestionSuccess : gs.getMessage('Question moved to forum {0}.'),
		moveQuestionSuccess_scanInProgress : gs.getMessage('Question moved to forum {0}. Attachment(s) are currently undergoing security scan.'),
		editQuestionReviewSuccess : gs.getMessage('Question edited and is under review.'),
		editQuestionReviewSuccess_scanInProgress : gs.getMessage('Question edited and is under review. Attachment(s) are currently undergoing security scan.'),
		moveQuestionReviewSuccess : gs.getMessage('Question moved to forum {0} and is under review.'),
		moveQuestionReviewSuccess_scanInProgress : gs.getMessage('Question moved to forum {0} and is under review. Attachment(s) are currently undergoing security scan.'),
		editAnswerSuccess : gs.getMessage('Answer edited.'),
		editAnswerSuccess_scanInProgress : gs.getMessage('Answer edited. Attachment(s) are currently undergoing security scan.'),
		editCancelMsg: gs.getMessage('Are you sure you want to discard the changes?'),
		discardChange: gs.getMessage('Discard changes'),
		answerDeleteSuccess: gs.getMessage('Answer deleted.'),
		questionDeleteSuccess: gs.getMessage("Question '{0}' deleted."),
		questionSubscribeSuccess: gs.getMessage('You have successfully subscribed to the question.'),
		questionUnsubscribeSuccess: gs.getMessage('You have unsubscribed from the question.'),
		postReplySuccess: gs.getMessage('Reply posted.'),
		postReplySuccess_scanInProgress: gs.getMessage('Reply posted. Attachment(s) are currently undergoing security scan.'),
		postReplyUnderModeration: gs.getMessage('Reply posted and is under moderation.'),
		postReplyUnderModeration_scanInProgress: gs.getMessage('Reply posted and is under moderation. Attachment(s) are currently undergoing security scan.'),
		questionUndoBookmarkSuccess: gs.getMessage('You have removed the bookmark from the question.'),
		profileLink : gs.getMessage("{0} Profile"),
		replyLinkText : gs.getMessage("1 reply, click to reply"),
		repliesLinkText : gs.getMessage("{0} replies, click to reply"),
		replyCountText : gs.getMessage("1 Reply"),
		repliesCountText : gs.getMessage("{0} Replies"),
		viewRepsCountText : gs.getMessage("View {0} replies"),
		viewRepCountText : gs.getMessage("View 1 reply"),
		helpfulCountZeroText : gs.getMessage("No one marked helpful"),
		helpfulsCountText : gs.getMessage("{0} members marked helpful."),
		helpfulCountText : gs.getMessage("1 member marked helpful."),
	  upvotesCountText : gs.getMessage("{0} members upvoted."),
		upvoteCountText : gs.getMessage("1 member upvoted."),
		upvoteCountZeroText : gs.getMessage("No one upvoted"),
		requiredFieldsError : gs.getMessage("Error. Please fill all the required(*) fields."),
		commentRequiredFieldError : gs.getMessage("Error. Please fill all the required fields."),
		subscribeText: gs.getMessage("Subscribe"),
		unsubscribeText: gs.getMessage("Unsubscribe"),
		subscribedText: gs.getMessage("Subscribed"),
		editAlertMsg: gs.getMessage('Please note that this post has already received activity. It is not advisable to edit it now. Are you sure you want to continue?'),
		upvotes: gs.getMessage('Upvotes'),
		helpful: gs.getMessage('Helpful'),
		topicNoteMsg: gs.getMessage("Select a maximum of {0} topic(s)",data.maxTopicLimit+''),
		harvestKnowledge:  gs.getMessage('Harvest Knowledge'),
		harvestedKnowledge:  gs.getMessage('Harvested Article'),
		harvestSuccess: gs.getMessage("Knowledge has been harvested into an article {0}."),
		viewHere: gs.getMessage('View Here'),
		topicLimitExceededMsg: gs.getMessage("You have reached the maximum number of topics"),
		topicLimitExceededAlert: gs.getMessage("More than {0} topic(s) cannot be associated to a content",data.maxTopicLimit+''),
		errorMessage_harvest_403: gs.getMessage("You do not have access to contribute to knowledge base. Please contact KM administrator."),
		moreOptions : gs.getMessage("More Options"),
		deleteAlertMsg: gs.getMessage("Please note that this post has already received some feedback/response. It's not advisable to delete this content now. Are you sure you want to delete?"),
		deleteAlertNoFeedbackMsg: gs.getMessage("Are you sure you want to delete?"),
		points: gs.getMessage("community.gmhovercard.points"),
		noActionAvailableMsg: gs.getMessage("No actions available"),
		anchorReplyNotFound: gs.getMessage("community.replyNotFoundMsg"),
		questionContentTypeNotPresent: gs.getMessage("Question content type is not associated to selected forum."),
		topicsRemovedWarning: gs.getMessage("These topics that are not part of the selected forum cannot be associated: {0}"),
		userPermissionsWarning: gs.getMessage("Only users with access to the content type Question in the selected forum, will be able to view the content upon saving."),
		authorLosingAccessWarning: gs.getMessage("{0} does not have access to the content type Question in the selected forum. Hence, the author will be unable to view the content upon saving."),
		globalFeatureContentError: gs.getMessage("Some users may not be able to view the content due to lack of permissions."),
		featureContentEditAlert: gs.getMessage("Successfully saved the changes to featured content."),
		featureContentMarkAlert: gs.getMessage("Successfully featured this content."),
		subject: gs.getMessage('Regarding your comment'),
		subjectQuestion: gs.getMessage("Regarding your question '{0}' ")
	};
	data.allowInsertVideoOnQuestion = false;
	data.allowInsertVideoOnAnswer = false;
	var contentTypesGR = new GlideRecord("sn_communities_content_type");
	contentTypesGR.addQuery('sys_id', CommunityConstants.QUESTION_CONTENT_TYPE_ID).addOrCondition('sys_id', CommunityConstants.ANSWER_CONTENT_TYPE_ID);
	contentTypesGR.query();
	while (contentTypesGR.next()) {
		if(contentTypesGR.embedded_types &amp;&amp; contentTypesGR.embedded_types.includes(CommunityConstants.VIDEO_EMBEDDED_TYPE_ID)) {
			if(contentTypesGR.sys_id+"" == CommunityConstants.QUESTION_CONTENT_TYPE_ID)
				data.allowInsertVideoOnQuestion = true;
			else
				data.allowInsertVideoOnAnswer = true;
		}
	}
	data.articleView = "kb_article";
	data.articleViewId= "sys_id";
	if(GlidePluginManager.isActive('com.snc.knowledge_serviceportal')){
		data.articleView = "kb_article_view";
		data.articleViewId= "sys_kb_id";
	}

	var forumId = '';
	if (data.question &amp;&amp; data.question.data &amp;&amp; data.question.data[0]) {
		data.isCommuAdminOrMod = data.question.data[0].isCommunityAdminOrMod;
		var dataContent=data.question.data[0];
		if(dataContent.state==CommunityConstants.PUBLISHED){
			var commUser = new sn_communities.CommunityUser();
			forumId = dataContent.forum.sys_id;		
			var isForumAdminOrMod=false;
			if(!data.isCommuAdminOrMod)
				isForumAdminOrMod=commUser.isAdminOfForum(forumId) || commUser.isForumModerator(forumId);
			if(data.isCommuAdminOrMod||isForumAdminOrMod){
				var commFeatureContent=new CommunityFeaturedContent();
				var featuringContentTypes = commFeatureContent.getPrimaryContentTypes();		
				data.canFeaturContent = (featuringContentTypes.indexOf(questionContentTypeId) != -1);
				if(data.canFeaturContent)
					data.isFeaturedContent= commFeatureContent.isFeaturedContent(dataContent.content_sys_id);
			}
		}
		if (dataContent &amp;&amp; dataContent.userAvatarObject) {
			var userData;
			var userId = dataContent.userAvatarObject.userId;
			data.canEmail = data.isCommuAdminOrMod &amp;&amp; (userId &amp;&amp; data.loggedInUserProfileId != userId);
			if (data.canEmail)
				userData = new CommunityProfile().getUserInfoHover([userId], ["email"]);
			if (userData)
				data.showMailTo = userData[userId].email;
		}
	}
	data.forumLevelsText = [
			gs.getMessage("this is a level 1 forum"),
			gs.getMessage("this is a level 2 forum"),
			gs.getMessage("this is a level 3 forum"),
			gs.getMessage("this forum is beyond level 3")
		];
})($sp);]]&gt;&lt;/script&gt;&lt;servicenow&gt;false&lt;/servicenow&gt;&lt;sys_class_name&gt;sp_widget&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2017-08-16 23:35:21&lt;/sys_created_on&gt;&lt;sys_id&gt;2f4a647c672032007bf09a6617415a58&lt;/sys_id&gt;&lt;sys_mod_count&gt;2322&lt;/sys_mod_count&gt;&lt;sys_name&gt;Community Content Question&lt;/sys_name&gt;&lt;sys_package display_value="Communities" source="sn_communities"&gt;10809a9edb866200b1f6f78eaf961904&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Communities"&gt;10809a9edb866200b1f6f78eaf961904&lt;/sys_scope&gt;&lt;sys_update_name&gt;sp_widget_2f4a647c672032007bf09a6617415a58&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-11-21 16:33:31&lt;/sys_updated_on&gt;&lt;template&gt;&lt;![CDATA[&lt;div class="cm-top-level-class"&gt;
  &lt;div class="alert alert-success cm-alert clearfix" data-ng-show="c.showFeatureContentAlert" aria-live="polite" role="alert"&gt;
    &lt;div class="alert-text pull-left col-xs-11 flexbox no-padder"&gt;
      &lt;i class="fa fa-check cm-alert-icon" aria-hidden="true"&gt;&lt;/i&gt;
      &lt;span&gt;{{c.featureContentAlert}}&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class="alert-close pull-right col-xs-1 no-padder"&gt;
      &lt;i role="button" class="fa fa-times pull-right cm-alert-icon" data-ng-click="c.showFeatureContentAlert = false" 
         aria-label="${Close}" tabindex="0"&gt;&lt;/i&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;!--sp-widget widget="data.question_to_entity_creation"&gt; &lt;/sp-widget--&gt;
  &lt;div data-ng-if="::c.postNotValid" class="alert alert-danger cm-alert cm-message-top-padding clearfix" aria-live="polite" role="alert"&gt;
    &lt;div class="alert-text pull-left col-xs-11 flexbox no-padder"&gt;
      &lt;i class="fa fa-exclamation-circle cm-alert-icon" aria-hidden="true"&gt;&lt;/i&gt;
      &lt;span&gt;${Sorry, the content you are trying to view is currently unavailable.}&lt;/span&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;!--Unauthorized message when user don't have required permissions --&gt;
  &lt;div class="alert {{::c.pageAlertClass}} cm-alert clearfix cm-guest-alert" data-ng-if="::c.showPageAlertForError" aria-live="polite" role="alert"&gt;
    &lt;div class="alert-text pull-left col-xs-12 flexbox no-padder"&gt;
      &lt;i class="fa {{::c.alertIconClass}} cm-alert-icon" aria-hidden="true"&gt;&lt;/i&gt;
      &lt;span ng-bind-html="::c.pageAlertMessageHTML"&gt;&lt;/span&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;!--Unauthorized message when user is not logged in --&gt;
  &lt;div class="alert {{::c.pageAlertClass}} cm-alert clearfix cm-guest-alert" data-ng-if="c.showPageAlertForGuest"&gt;
    &lt;div class="alert-text pull-left col-xs-11 flexbox no-padder"&gt;
      &lt;i class="fa {{::c.alertIconClass}} cm-alert-icon" aria-hidden="true"&gt;&lt;/i&gt;
      &lt;span&gt;${Please} &lt;a href="?id=community_login" role="link"&gt;${Login}&lt;/a&gt; ${to view the content!}&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class="alert-close pull-right col-xs-1 no-padder"&gt;
      &lt;i role="button" class="fa fa-times pull-right cm-alert-icon" data-ng-click="c.showPageAlertForGuest = false"
         aria-label="${close}"&gt;&lt;/i&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id="topOfPage" data-ng-if="::c.post.isValidContent" class="cm-content-question"&gt;
    &lt;div class="alert {{c.pageAlertClass}} cm-alert clearfix"  data-ng-if="c.showPageAlert" aria-live="polite" role="alert"&gt;
      &lt;div class="alert-text pull-left col-xs-11 flexbox no-padder"  &gt;
        &lt;i class="fa {{c.alertIconClass}} cm-alert-icon" aria-hidden="true"&gt;&lt;/i&gt;
        &lt;span &gt;&lt;span ng-bind-html="c.pageAlertMessageHTML"/&gt;&lt;span ng-if="c.showMailTo"&gt;${ The author has been notified. }&lt;a ng-href="mailto:{{::c.data.showMailTo}}?subject={{::c.formatMessage(c.data.msg.subjectQuestion,[c.post.title])}}"&gt;${Click here to email the author.}&lt;/a&gt;
        &lt;/span&gt;
      &lt;/div&gt;
      &lt;div  class="alert-close pull-right col-xs-1 no-padder"&gt;
        &lt;i role="button" tabindex="0" class="fa fa-times pull-right cm-alert-icon "  data-ng-click="c.showPageAlert = false"
           aria-label="${close}"&gt;&lt;/i&gt;
      &lt;/div&gt;
    &lt;/div&gt;
     &lt;div class="alert alert-warning cm-alert-inform clearfix" data-ng-repeat="warning in c.warnings track by $index"  data-ng-if="c.showWarnings &amp;&amp; !warning.hideWarning &amp;&amp; c.formValidation.pass &amp;&amp; c.post.showEditMode" ng-show="!c.loading"&gt;
       &lt;div class="alert-icon pull-left"&gt;
         &lt;i class="fa fa-exclamation-triangle"&gt;&lt;/i&gt;
       &lt;/div&gt;
       &lt;div class="alert-text col-xs-11 no-padder"&gt;
         &lt;span ng-bind="warning.message"&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div  class="alert-close pull-right no-padder"&gt;
         &lt;i role="button" tabindex="0" class="fa fa-times pull-right cm-alert-icon"  data-ng-click="warning.hideWarning = true"
            aria-label="${close}"&gt;&lt;/i&gt;
       &lt;/div&gt;
    &lt;/div&gt;
    &lt;div data-ng-if="c.post.canEdit &amp;&amp; !c.post.showEditMode &amp;&amp; ( c.post.hasInfectedFile || c.post.hasPendingFile)" class="alert alert-danger {{!c.post.hasInfectedFile? 'info': ''}} cm-alert cm-message-top-padding clearfix"&gt;
      &lt;div class="alert-text pull-left col-xs-11 flexbox no-padder"&gt;
        &lt;i class="fa {{ !c.post.hasInfectedFile ? 'fa-info-circle' : 'fa-times-circle' }} cm-alert-icon" aria-hidden="true"&gt;&lt;/i&gt;
        &lt;span ng-bind="c.post.fileErrMsg"&gt;&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="panel panel-{{::options.panel_type}} csm-tile cm-content csm-widget {{::c.data.frameless_class}} m-b"&gt;
      &lt;div class="panel-body alert alert-danger cm-alert-question-inform clearfix" data-ng-if="c.showModerationError"&gt;
        &lt;div class="alert-icon pull-left"&gt;
          &lt;i class="fa fa-exclamation-circle" aria-hidden="true"&gt;&lt;/i&gt;
        &lt;/div&gt;
        &lt;div class="alert-close pull-right"&gt;
          &lt;button class="btn cm-close-btn pull-right" data-ng-click="c.showModerationError = false"
             aria-label="${close}"&gt;&lt;i class="fa fa-times" aria-hidden="true"&gt;&lt;/i&gt;&lt;/button&gt;
        &lt;/div&gt;
        &lt;div class="alert-text pull-left"&gt;
          &lt;span &gt;
            &lt;p&gt;${Please fix the following errors before posting: }&lt;/p&gt;
            &lt;ul class="cm-alert-section"&gt;
              &lt;li ng-repeat="error in c.moderationError track by $index"&gt;
                &lt;span ng-bind="::error"&gt;&lt;/span&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="cm-view-mode" data-ng-if="!c.post.showEditMode"&gt;
        &lt;div class="cm-content-header"&gt;
          &lt;div ng-class="::(c.data.isLoggedIn ? 'cm-content-type' : 'cm-content-type cm-margin-btm')"&gt;
            &lt;div class="cm-content-type-icon"&gt;
              &lt;span data-ng-if="c.answered"&gt;&lt;i class="fa fa-check-circle cm-answered-icon" aria-hidden="true"&gt;&lt;/i&gt;&lt;/span&gt;
              &lt;span data-ng-if="!c.answered"&gt;&lt;i class="fa {{::c.post.icon}} cm-common-link-color" aria-hidden="true"&gt;&lt;/i&gt;&lt;/span&gt;
              &lt;span class="cm-content-type-name cm-common-dark-color"&gt;${Question}&lt;/span&gt;
            &lt;/div&gt;
            &lt;div class="cm-menu-bar-items" data-ng-if="::c.data.isLoggedIn"&gt;
              &lt;div class="cm-menu-button" data-ng-if="::!c.isContentAuthor"&gt;
                &lt;button ng-if="c.showFollow" class="btn btn-primary" data-ng-click="c.subscribe()"&gt;
                  ${Subscribe}
                &lt;/button&gt;
                &lt;button ng-if="!c.showFollow" class="btn btn-default" data-ng-click="c.subscribe()"
                        ng-mouseover="c.showUnSubscribe()"
                        ng-mouseleave="c.showSubscribed()"
                        ng-focus="c.showUnSubscribe()"
                        ng-blur="c.showSubscribed()"
                        aria-label="${Question subscribed. Click to unsubscribe}"&gt;
                  &lt;span ng-bind="c.subscribeLabel"&gt;&lt;/span&gt;
                &lt;/button&gt;
              &lt;/div&gt;
              &lt;div data-ng-if="::c.data.isLoggedIn" class="cm-content-type-menu"&gt;
                &lt;ul role="menubar" class="menu-header"&gt;
                    &lt;li class="dropdown header-menu-item" role="presentation"&gt;
                &lt;a role="button" aria-label="${actions menu}" href="Javascript:void(0)" id="actionQuestionMenu" class="btn btn-default pull-right cm-action-icon dropdown-toggle"
                   data-ng-click="c.getMenuItems(c.post, 'Question')" data-toggle="dropdown" aria-haspopup="true" tooltip-placement="bottom" uib-tooltip='{{::c.data.msg.moreOptions}}'&gt;
                  &lt;span  class="cm-menu-parent-ellipsis" &gt;&lt;i class="fa fa-ellipsis-h" aria-hidden="true"&gt;&lt;/i&gt;&lt;/span&gt;
                &lt;/a&gt;
                &lt;ul data-ng-if="c.post.showDropDown" class="dropdown-menu" aria-expanded="false" role="menu"&gt;
                  &lt;li data-ng-if="c.post.canEdit" role="presentation"&gt;&lt;a role="menuitem"  class="cm-menu-item" href="Javascript:void(0)"  data-ng-click="c.canShowEditMode(c.post,'content')" tabindex="-1"&gt;${Edit}&lt;/a&gt;&lt;/li&gt;
                  &lt;li data-ng-if="c.post.canEdit" role="presentation"&gt;&lt;a role="menuitem"  class="cm-menu-item" href="Javascript:void(0)"  data-ng-click="c.canDeleteContent(c.post,'content')" tabindex="-1"&gt;${Delete}&lt;/a&gt;&lt;/li&gt;
                  &lt;li data-ng-if="c.post.canBookmark &amp;&amp; c.post.activities_allowed.bookmark" role="presentation"&gt;&lt;a role="menuitem" class="cm-menu-item" href="Javascript:void(0)" data-ng-click="c.postFeedback('bookmark',c.post,null,false)" tabindex="-1"&gt;${Bookmark}&lt;/a&gt;&lt;/li&gt;
                  &lt;li data-ng-if="c.post.canBookmark &amp;&amp; !c.post.activities_allowed.bookmark" role="presentation"&gt;&lt;a role="menuitem" class="cm-menu-item" href="Javascript:void(0)" data-ng-click="c.postFeedback('bookmark',c.post,null,true)" tabindex="-1"&gt;${Remove Bookmark}&lt;/a&gt;&lt;/li&gt;
                  &lt;li data-ng-if="::c.isContentAuthor" role="presentation"&gt;&lt;a role="menuitem" class="cm-menu-item" href="Javascript:void(0)" data-ng-click="c.subscribe()" tabindex="-1"&gt;&lt;span ng-bind="c.toggleSubscribeText"&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
                  &lt;li data-ng-if="c.accepted_answer &amp;&amp; c.accepted_answer.canHarvest" role="presentation"&gt;&lt;a role="menuitem" class="cm-menu-item" href="Javascript:void(0)"  data-ng-click="c.harvestContent(c.accepted_answer,'comment')" tabindex="-1"&gt;&lt;span ng-bind="::c.data.msg.harvestKnowledge"&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
                  &lt;li data-ng-if="c.post.canModerate" role="presentation"&gt;&lt;a role="menuitem"  class="cm-menu-item" href="Javascript:void(0)"  data-ng-click="c.flagContent(c.post,'content')" tabindex="-1"&gt;${Report Content}&lt;/a&gt;&lt;/li&gt;
                  &lt;li data-ng-if="c.canCreateCase &amp;&amp; c.validCase.showCreate &amp;&amp; (c.validCase.userType==='customer_contact' || c.validCase.userType==='csm_consumer_user') &amp;&amp; !c.validCase.caseNumber" role="presentation"&gt;&lt;a role="menuitem"  class="cm-menu-item" href="Javascript:void(0)"  data-ng-click="c.createCase()" tabindex="-1"&gt;${Create Case}&lt;/a&gt;&lt;/li&gt;
                      &lt;li data-ng-if="c.data.canFeaturContent&amp;&amp; !c.data.isFeaturedContent" role="presentation"&gt;&lt;a role="link"  href="Javascript:void(0);" data-ng-click="c.featureContent(c.post,'contentFeature')" tabindex="-1"&gt;${Mark as featured}&lt;/a&gt;&lt;/li&gt;
                      &lt;li data-ng-if="c.data.canFeaturContent &amp;&amp; c.data.isFeaturedContent" role="presentation"&gt;&lt;a role="link"  href="Javascript:void(0);" data-ng-click="c.featureContent(c.post,'contentFeature')" tabindex="-1"&gt;${Edit Featured content}&lt;/a&gt;&lt;/li&gt;
                  &lt;li data-ng-if="c.post.noActionAvailable" role="presentation" tabindex="-1"&gt;&lt;div role="menuitem" ng-bind="::c.data.msg.noActionAvailableMsg"&gt;&lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;h3 class="cm-content-title m-t"&gt;
            &lt;span ng-bind="c.post.title"&gt;&lt;/span&gt;
          &lt;/h3&gt;
          &lt;div class="cm-author-details"&gt;
            &lt;div class="cm-author-image"&gt;
              &lt;span class="image50px" &gt;
                &lt;a ng-href="{{::(c.data.readOnlyMode ? '' : c.post.userAvatarObject.profileLink)}}" title="{{::c.post.userAvatarObject.name}}"&gt;
                  &lt;sn-avatar primary="::c.post.userAvatarObject" show-presence="false"/&gt;
                &lt;/a&gt;
              &lt;/span&gt;
            &lt;/div&gt;
            &lt;div class="cm-author-info cm-common-light-color"&gt;
              &lt;span&gt;${by }&lt;/span&gt;
              &lt;gm-hover-card readonlymode="::c.data.readOnlyMode" carddata="::c.post.userAvatarObject" enablegamification="::c.data.enable_gamification" pointslabel="::c.data.msg.points" profilelink="::c.data.msg.profileLink" subject="::c.formatMessage(c.data.msg.subjectQuestion,[c.post.title])" canemail="::c.data.canEmail"&gt;&lt;/gm-hover-card&gt;
              &lt;span data-ng-if="::(c.data.enable_gamification == 'true')"&gt;
                &lt;span ng-if = "::(c.post.user_details.levelName!= '')"&gt;
                  &lt;span ng-if = "::(c.data.levelInfo == 'sn_communities_forum')" data-toggle="tooltip" title = {{c.post.forum.name}} class="overall-level" ng-bind="::c.post.user_details.levelName"&gt;&lt;/span&gt;
                  &lt;span ng-if = "::(c.data.levelInfo != 'sn_communities_forum')" class="overall-level" ng-bind="::c.post.user_details.levelName"&gt;&lt;/span&gt;
                &lt;/span&gt;       
              &lt;/span&gt;
              &lt;span class="harvested-articles-info pull-right" ng-if="c.validCase.caseNumber &amp;&amp; (c.validCase.currentUserIsAuthor || c.validCase.showCreate)"&gt;
                ${Case: }
                &lt;ul class="harvested-articles"&gt;
                  &lt;li class="harvested-article"&gt;&lt;a class="article-link cm-link cm-common-dark-color" ng-class="{'active-link': c.validCase.currentUserIsAuthor, 'nonactive-link': !c.validCase.currentUserIsAuthor}" ng-href="{{c.data.readOnlyMode ? '' : '/' + c.data.portal + '?id=csm_ticket&amp;sys_id=' + c.validCase.caseId + '&amp;table=sn_customerservice_case&amp;view=csp'}}" title="{{::article.number}}"&gt;
                    &lt;span ng-bind="c.validCase.caseNumber"&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/span&gt;
              &lt;div&gt;
                &lt;span&gt;${created}&lt;/span&gt;
                &lt;span data-ng-if="!c.post.publishedHideTimeAgo"&gt;&lt;sn-time-ago timestamp="::c.post.published_date"/&gt;&lt;/span&gt;
                &lt;span data-ng-if="c.post.publishedHideTimeAgo"&gt;${Just Now}&lt;/span&gt;
                &lt;span data-ng-if="c.isEdited"&gt;
                  &lt;span&gt;(${edited}
                    &lt;span data-ng-if="!c.post.editedHideTimeAgo"&gt;&lt;sn-time-ago timestamp="c.post.edited_date"/&gt;&lt;/span&gt;&lt;span data-ng-hide="c.post.editedHideTimeAgo"&gt;)&lt;/span&gt;
                    &lt;span data-ng-if="c.post.editedHideTimeAgo"&gt;${Just Now})&lt;/span&gt;
                  &lt;/span&gt;
                &lt;/span&gt;
                &lt;span&gt;${in}&lt;/span&gt;
                &lt;a class="cm-link cm-common-dark-color" data-ng-href="{{c.data.readOnlyMode ? '' : '/' + c.data.portal + '?id=community_forum&amp;sys_id=' + c.post.forum.sys_id}}"&gt;
                  &lt;span ng-bind="c.post.forum.name"&gt;&lt;/span&gt;
                &lt;/a&gt;
                &lt;span ng-if="c.post.harvestedArticles &amp;&amp; c.post.harvestedArticles.length &gt; 0" class="harvested-articles-info pull-right hidden-xs" &gt;
                  ${ {{::(c.post.harvestedArticles.length &gt; 1 ? 'Articles' : 'Article')}}} :
                  &lt;ul class="harvested-articles"&gt;
                    &lt;li class="harvested-article" data-ng-repeat="article in c.post.harvestedArticles track by article.id"&gt;&lt;a class="article-link cm-link cm-common-dark-color" ng-href="{{::(c.data.readOnlyMode ? '' : '?id=' + c.data.articleView + '&amp;' + c.data.articleViewId + '=' + article.id)}}" target="_kbView" title="{{::article.number}}"&gt;&lt;span ng-bind="::article.number"&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/span&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div&gt;
            &lt;span ng-if="c.post.harvestedArticles &amp;&amp; c.post.harvestedArticles.length &gt; 0" class="harvested-articles-info visible-xs" &gt;
              ${ {{::(c.post.harvestedArticles.length &gt; 1 ? 'Articles' : 'Article')}}} :
              &lt;ul class="harvested-articles"&gt;
                &lt;li class="harvested-article" data-ng-repeat="article in c.post.harvestedArticles track by article.id"&gt;&lt;a class="article-link cm-link cm-common-dark-color" ng-href="{{::(c.data.readOnlyMode ? '' : '?id=' + c.data.articleView + '&amp;' + c.data.articleViewId + '=' + article.id)}}" target="_kbView" title="{{::article.number}}"&gt;{{::article.number}}&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/span&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="cm-content-body" data-ng-if = "(c.post.description|| (c.post.attachments &amp;&amp; c.post.attachments.length&gt;0) || (c.data.topicsEnabled &amp;&amp; c.post.topics.length &gt; 0))"&gt;
          &lt;hr/&gt;
          &lt;sp-html-content model="c.post.description| communityHTMLFilter:c.data.readOnlyMode" data-ng-if = "::(c.data.useSnBind == 'false')" class="cm-content-detail"&gt;&lt;/sp-html-content&gt;
          &lt;p data-ng-if = "::(c.data.useSnBind == 'true')" class="cm-content-detail" sn-bind-html="c.post.description"&gt;&lt;/p&gt;
          &lt;community-attachments attachments="c.post.attachments"
                                 config="{inlineMode: true,
                                         showInlineDnD: false,
                                         showInlineList: true,
                                         dialogMode: true,
                                         showDialogList: true,
                                         canDownloadFile: true,
                                         attachmentsCount: c.post.attachments.length,
                                         isOwnerOfContent: c.post.isOwnerOfContent,
                                         parentWidget: c.widget.sys_id
                                         }"  &gt;&lt;/community-attachments&gt;
          &lt;div ng-if="c.data.topicsEnabled &amp;&amp; c.post.topics.length &gt; 0" class="cm-topics"&gt;
            &lt;span class="cm-topic-label cm-common-light-color"&gt;${Topics:} &lt;/span&gt;
            &lt;span ng-repeat="topic in c.post.topics track by topic.id" class="cm-topic-info"&gt;
              &lt;a class="btn btn-default btn-xs cm-topic-badge" href="{{c.data.readOnlyMode ? '' : '/' + c.data.portal + '?id=community_topic&amp;sys_id=' + topic.id}}"&gt;&lt;span ng-bind="::topic.name"&gt;&lt;/span&gt;&lt;/a&gt;
            &lt;/span&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;hr class="m-t-sm" /&gt;
        &lt;div class="cm-content-footer cm-common-light-color"&gt;
          &lt;div class="cm-action-box"&gt;
            &lt;div class="upvote cm-action"&gt;
              &lt;span data-ng-if="::(c.post.canUpvote &amp;&amp; c.data.isLoggedIn)"&gt;
                &lt;a role="button" id="upVoteEle" href="Javascript:void(0);" data-ng-if="c.post.activities_allowed.upvote" class="cm-button-link cm-common-light-color"
                   aria-label="${upvote}" data-ng-click="c.postFeedback('upvote',c.post, null, false)"&gt;
                  &lt;i class="fa fa-arrow-circle-up cm-action-icons" aria-hidden="true"&gt;&lt;/i&gt; ${Upvote}
                &lt;/a&gt;
                &lt;a role="button" id="downVoteEle" href="Javascript:void(0);" data-ng-if="!c.post.activities_allowed.upvote" class="cm-button-link cm-acted-color"
                   aria-label="${undo upvote}" data-ng-click="c.postFeedback('upvote',c.post,null, true)"&gt;
                  &lt;i class="fa fa-arrow-circle-up cm-action-icons" aria-hidden="true"&gt;&lt;/i&gt; ${Upvote}
                &lt;/a&gt;
                &lt;a data-ng-if="c.post.upvote_count &gt; 0" role="button" aria-haspopup="true" href="Javascript:void(0);" data-ng-click="c.getFeedbackProfiles(c.post,'upvote')" class="cm-button-link cm-common-dark-color"&gt;(&lt;span ng-bind="c.post.upvote_count"&gt;&lt;/span&gt;) &lt;/a&gt;
                &lt;span data-ng-if="c.post.upvote_count == 0" role="presentation" class="cm-common-dark-color"&gt;(&lt;span ng-bind="c.post.upvote_count"&gt;&lt;/span&gt;) &lt;/span&gt;
              &lt;/span&gt;
              &lt;span data-ng-if="::(!c.post.canUpvote &amp;&amp; c.data.isLoggedIn)" class="cm-common-light-color"&gt;
                &lt;i class="fa fa-arrow-circle-up cm-action-icons" aria-hidden="true"&gt;&lt;/i&gt; ${Upvote}
                &lt;a data-ng-if="c.post.upvote_count &gt; 0" role="button" aria-haspopup="true" href="Javascript:void(0);" data-ng-click="c.getFeedbackProfiles(c.post,'upvote')" class="cm-button-link cm-common-dark-color"&gt;(&lt;span ng-bind="c.post.upvote_count"&gt;&lt;/span&gt;) &lt;/a&gt;
                &lt;span data-ng-if="c.post.upvote_count == 0" role="presentation" class="cm-common-dark-color"&gt;(&lt;span ng-bind="c.post.upvote_count"&gt;&lt;/span&gt;) &lt;/span&gt;
              &lt;/span&gt;
              &lt;span data-ng-if="::!c.data.isLoggedIn" class="cm-common-light-color"&gt;
                &lt;i class="fa fa-arrow-circle-up cm-action-icons" aria-hidden="true"&gt;&lt;/i&gt; ${Upvotes}
                &lt;span role="presentation" class="cm-common-dark-color"&gt;(&lt;span ng-bind="c.post.upvote_count"&gt;&lt;/span&gt;) &lt;/span&gt;
              &lt;/span&gt;
            &lt;/div&gt;
            &lt;div class="reply cm-action"&gt;
              &lt;a role="button" href="Javascript:void(0);" aria-label="{{c.post.comment_count &gt; 0 ? (c.formatMessage(c.data.msg.repliesLinkText, [c.post.comment_count])) : c.data.msg.replyLinkText}}" data-ng-if="::(c.post.canReply &amp;&amp; c.data.isLoggedIn)" ng-class="c.post.showReplyBox ? 'cm-acted-color cm-action cm-button-link' : 'cm-common-light-color cm-action cm-button-link'" data-ng-click="c.showReplyBox(c.post,!c.post.showReplyBox,1,'ccq_questionEditor')" &gt;
                &lt;span&gt;&lt;i class="fa fa-comment cm-action-icons" aria-hidden="true"&gt;&lt;/i&gt; ${Reply}
                  &lt;span class="cm-common-dark-color"&gt;(&lt;span ng-bind="c.post.comment_count"&gt;&lt;/span&gt;)&lt;/span&gt;
                &lt;/span&gt;
              &lt;/a&gt;
            &lt;/div&gt;
            &lt;div class="cm-views" data-ng-if="::(c.post.view_count &gt; 1)"&gt;&lt;span ng-bind="::c.post.view_count"&gt;&lt;/span&gt;&lt;span&gt;${Views}&lt;/span&gt;&lt;/div&gt;
            &lt;div class="cm-views" data-ng-if="::(c.post.view_count == 1)"&gt;&lt;span ng-bind="::c.post.view_count"&gt;&lt;/span&gt;&lt;span&gt;${View}&lt;/span&gt;&lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="cm-reply-box self-clear m-t" data-ng-if="c.post.showReplyBox"&gt;
            &lt;div class="alert alert-danger cm-alert-inform clearfix" data-ng-if="c.formValidation.showMsg"&gt;
              &lt;div class="alert-icon pull-left"&gt;
                &lt;i class="fa fa-exclamation-circle" aria-hidden="true"&gt;&lt;/i&gt;
              &lt;/div&gt;
              &lt;div class="alert-text pull-left"&gt;
                &lt;span ng-bind="c.formValidationError"&gt;&lt;/span&gt;
              &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class="form-group cm-widget-mce hidden-xs" id="ccq_questionEditor" data-ng-if="c.post.showReplyBox"&gt;
              &lt;sp-tinymce-video data-ng-model="c.newReplyText" ng-model-options="{height: '300', allow: c.data.allowInsertVideoOnAnswer, updateOn: 'default blur',
                                       debounce:{
                                       'default':250}
                                       }" sn-mentions-config="::c.data.userMentionConfig"&gt;&lt;/sp-tinymce-video&gt;
            &lt;/div&gt;
            &lt;div class="form-group cm-reply-textarea visible-xs"&gt;
              &lt;label id="lb1l" class="sr-only"&gt;${Post A Reply}&lt;/label&gt;
              &lt;textarea aria-labelledby="lb1l" data-ng-model="c.post.textInput" class="form-control" rows="5"
                         ng-model-options="{
                                       updateOn: 'default blur',
                                       debounce:{
                                       'default':250}
                                       }"&gt;&lt;/textarea&gt;
            &lt;/div&gt;
            &lt;div class="form-group" &gt;
              &lt;div class="cm-attach-link padder-t"&gt;
                &lt;community-attachments attachments="c.attachments"
                                       config="{canEdit: true,
                                               dialogMode: true,
                                               showDialogDnD: true,
                                               showDialogList: true,
                                               canDeleteFile: true,
                                               attachmentsCount: c.attachmentsCount,
                                               attachmentsAdded: c.attachmentsAdded,
                                               parentWidget: c.widget.sys_id
                                               }"  &gt;&lt;/community-attachments&gt;
              &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class="cm-form-actions"&gt;
              &lt;div class="btn-container"&gt;
                &lt;div class="pull-right"&gt;
                  &lt;button type="cancel" class="btn btn-default cm-cancel-btn action-btn" data-ng-click="c.cancelReply(c.post,1)"&gt;${Cancel}&lt;/button&gt;
                  &lt;button type="submit" class="btn btn-primary action-btn" data-ng-disabled="!c.post.isDirty" data-ng-click="c.postComment(c.post,'question')"&gt;${Reply}&lt;/button&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div data-ng-if="c.loading" class="text-center cm-loading-div"&gt;
        &lt;p class="cm-loading"&gt;
          &lt;i class="fa fa-spinner fa-spin fa-2x fa-fw"&gt;&lt;/i&gt;${Loading...}
        &lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="cm-edit-mode" data-ng-if="c.post.showEditMode" ng-show="!c.loading"&gt;
        &lt;div class="alert alert-danger cm-alert-inform clearfix" data-ng-if="c.formValidation.showMsg"&gt;
          &lt;div class="alert-icon pull-left"&gt;
            &lt;i class="fa fa-exclamation-circle" aria-hidden="true"&gt;&lt;/i&gt;
          &lt;/div&gt;
          &lt;div class="alert-text pull-left"&gt;
            &lt;span ng-bind="c.formValidationError"&gt;&lt;/span&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="cm-content-header"&gt;
          &lt;div class="cm-content-type"&gt;
            &lt;div class="cm-content-type-icon"&gt;
              &lt;span&gt;&lt;i class="fa {{::c.post.icon}} cm-common-link-color" aria-hidden="true"&gt;&lt;/i&gt;&lt;/span&gt;
              &lt;span class="cm-content-type-name cm-common-dark-color"&gt;${Question}&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;form class="self-clear" role="form" name="cm_form"&gt;
          &lt;div class="form-group padder-t-md"&gt;
            &lt;div class="cm-input-title required {{c.post.title ? 'filled' : ''}}"&gt;
              &lt;label for="title" class="control-label padder-b-xs"&gt;${Question}&lt;/label&gt;
              &lt;input data-ng-model="c.post.title" name="title" type="text" class="form-control" id="title" placeholder=""
                     ng-model-options="{
                                       updateOn: 'default blur',
                                       debounce:{
                                       'default':250}
                                       }"&gt;
            &lt;/div&gt;
          &lt;/div&gt;
           &lt;div id="choose_forums_div" class="form-group cm-select2-forum padder-t required filled"&gt;
            &lt;label for="choose_forum" class="control-label label-text padder-b-xs"&gt;${Forum}&lt;/label&gt;
            &lt;select id="choose_forum" class="cm-select2 forum-width" title="${Forum}" aria-required="true" ng-readonly="!c.canEditForum"&gt;
              &lt;option value="" &gt;&lt;/option&gt;
            &lt;/select&gt;
          &lt;/div&gt;
          &lt;div id="choose_topics_div" class="form-group cm-select2-topic padder-t" data-ng-if="::c.data.topicsEnabled"&gt;
            &lt;label for="choose_topics" class="control-label padder-b-xs"&gt;${Topic(s)}&lt;/label&gt;
            &lt;select id="choose_topics" class="cm-select2" multiple="multiple" ng-readonly="!c.forumTopics || c.forumTopics.length == 0"&gt;
            &lt;/select&gt;
            &lt;div class="note-text" ng-bind="::c.data.msg.topicNoteMsg"&gt;&lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="form-group widget-mce padder-t"&gt;
            &lt;label for="description" class="control-label padder-b-xs"&gt;${Description}&lt;/label&gt;
            &lt;sp-tinymce-video data-ng-model="c.post.description" name="description" ng-model-options="{height: '300', allow: c.data.allowInsertVideoOnQuestion, updateOn: 'default blur',
                                       debounce:{
                                       'default':250}
                                       }" sn-mentions-config="::c.data.userMentionConfig" class="cm-sp-video-width" &gt;&lt;/sp-tinymce-video&gt;
          &lt;/div&gt;
          &lt;div class="form-group" &gt;
            &lt;div class="cm-attach-link"&gt;
                &lt;community-attachments attachments="c.attachments"
                                       config="{canEdit: true,
                                               dialogMode: true,
                                               showDialogDnD: true,
                                               showDialogList: true,
                                               canDeleteFile: true,
                                               attachmentsCount: c.attachmentsCount,
                                               isOwnerOfContent: c.post.isOwnerOfContent,
                                               attachmentsAdded: c.attachmentsAdded,
                                               parentWidget: c.widget.sys_id
                                               }"  &gt;&lt;/community-attachments&gt;
              &lt;/div&gt;
          &lt;/div&gt;
          &lt;div data-ng-show="c.showDisableComments" class="form-group padder-t"&gt;
            &lt;input data-ng-model="c.post.disable_comments" id="checkboxDC" class="checkbox inline disable-comments-checkbox" type="checkbox" name="checkboxDC" /&gt;
            &lt;label for="checkboxDC" class="control-label label-text padder-b-xs"&gt;${Disable Replies}&lt;/label&gt;
          &lt;/div&gt;
          &lt;div class="cm-form-actions"&gt;
            &lt;div class="btn-container"&gt;
              &lt;div class="pull-right"&gt;
                &lt;button type="cancel" class="btn btn-default cm-cancel-btn action-btn" data-ng-click="c.cancelConfirm(c.post,'question')"&gt;${Cancel}&lt;/button&gt;
                &lt;button type="submit" class="btn btn-primary action-btn" data-ng-click="c.editContent(c.post,'question')"&gt;${Save}&lt;/button&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/form&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="cm-comments" ng-view&gt;
      &lt;div class="panel panel-{{::options.panel_type}}  csm-tile cm-comment cm-accepted csm-widget" data-ng-if="c.showAcceptedPannel"&gt;
        &lt;div class="cm-comment-header cm-accepted-header" aria-label="${Accepted Solution}"&gt;
          &lt;span class="cm-reply-count cm-common-dark-color"&gt;
            &lt;span&gt;&lt;i class="fa fa-check-circle cm-answered-icon" aria-hidden="true"&gt;&lt;/i&gt;&lt;/span&gt;
            ${Accepted Solution}
          &lt;/span&gt;
          &lt;div class="cm-answer-link"&gt;
            &lt;a href="Javascript:void(0);" class="cm-link cm-common-dark-color" ng-click="anchorScroll('answer_'+c.accepted_answer.sys_id, c.accepted_answer)"&gt;${See this answer in context}&lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="cm-comment-body"&gt;
          &lt;div class="cm-comment-body-inner self-clear"&gt;
            &lt;div class="cm-avatar-container"&gt;
              &lt;span class="image50px"&gt;
                &lt;a ng-href="{{c.data.readOnlyMode ? '' : c.accepted_answer.userAvatarObject.profileLink}}" title="{{c.accepted_answer.userAvatarObject.name}}"&gt;
                  &lt;sn-avatar primary="c.accepted_answer.userAvatarObject" show-presence="false"/&gt;
                &lt;/a&gt;
              &lt;/span&gt;
            &lt;/div&gt;
            &lt;div class="cm-comment-container"&gt;
              &lt;div class="cm-comment-text"&gt;
                &lt;div class="cm-comment-main"&gt;
                  &lt;div class="cm-comment-user-info"&gt;
                    &lt;span&gt;
                      &lt;gm-hover-card readonlymode="::c.data.readOnlyMode" carddata="c.accepted_answer.userAvatarObject" enablegamification="::c.data.enable_gamification" pointslabel="::c.data.msg.points" profilelink="::c.data.msg.profileLink" subject="::c.data.msg.subject" canemail="::data.isCommuAdminOrMod&amp;&amp;data.loggedInUserProfileId!=c.accepted_answer.userAvatarObject.userId"&gt;&lt;/gm-hover-card&gt;
                      &lt;span data-ng-if="::(c.data.enable_gamification == 'true')"&gt;
                        &lt;span ng-if = "c.accepted_answer.user_details.levelName!= ''"&gt;
                          &lt;span ng-if = "::(c.data.levelInfo == 'sn_communities_forum')" data-toggle="tooltip" title = {{::c.post.forum.name}} class="overall-level" ng-bind="c.accepted_answer.user_details.levelName"&gt;&lt;/span&gt;
                          &lt;span ng-if = "::(c.data.levelInfo != 'sn_communities_forum')" class="overall-level" ng-bind="c.accepted_answer.user_details.levelName"&gt;&lt;/span&gt;
                        &lt;/span&gt;       
                      &lt;/span&gt;
                    &lt;/span&gt;
                    &lt;span class="cm-common-light-color"&gt;
                      &lt;span class="csm-separator-dot" aria-hidden="true"&gt;&amp;bull;&lt;/span&gt;
                      &lt;span&gt;&lt;sn-time-ago timestamp="c.accepted_answer.edited_date" /&gt;&lt;/span&gt;
                    &lt;/span&gt;
                  &lt;/div&gt;
                  &lt;div class="cm-comment-text-info"&gt;
                    &lt;sp-html-content class="cm-comment-text-detail" model="c.sanitizeVideo(c.accepted_answer)  | communityHTMLFilter:c.data.readOnlyMode"&gt;&lt;/sp-html-content&gt;
                    &lt;community-attachments attachments="c.accepted_answer.attachments"
                                 config="{inlineMode: true,
                                         showInlineDnD: false,
                                         showInlineList: true,
                                         dialogMode: true,
                                         showDialogList: true,
                                         canDownloadFile: true,
                                         attachmentsCount: c.accepted_answer.attachments.length,
                                         isOwnerOfContent: c.accepted_answer.isOwnerOfContent,
                                         parentWidget: c.widget.sys_id
                                         }"  &gt;&lt;/community-attachments&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
              &lt;div class="cm-comment-footer cm-common-light-color"&gt;
                &lt;div class="helpful cm-action"&gt;
                  &lt;span data-ng-if="c.accepted_answer.canMarkHelpful &amp;&amp; c.data.isLoggedIn"&gt;
                    &lt;a role="link" id="helpful_0" href="Javascript:void(0);" data-ng-if="c.accepted_answer.activities_allowed.helpful" class="cm-button-link cm-common-light-color"
                       aria-label="${helpful}" data-ng-click="c.postFeedback('helpful',c.accepted_answer,0, false)"&gt;
                      &lt;i class="fa fa-thumbs-up cm-action-icons" aria-hidden="true"&gt;&lt;/i&gt; ${Helpful}
                    &lt;/a&gt;
                    &lt;a role="link" id="unhelpful_0" href="Javascript:void(0);" data-ng-if="!c.accepted_answer.activities_allowed.helpful" class="cm-button-link cm-acted-color"
                       aria-label="${undo helpful}" data-ng-click="c.postFeedback('helpful',c.accepted_answer,0, true)"&gt;
                      &lt;i class="fa fa-thumbs-up cm-action-icons" aria-hidden="true"&gt;&lt;/i&gt; ${Helpful}
                    &lt;/a&gt;
                    &lt;a data-ng-if="c.accepted_answer.helpful_count &gt; 0" role="link" href="Javascript:void(0);" aria-haspopup="true"
                       data-ng-click="c.getFeedbackProfiles(c.accepted_answer,'helpful')" class="cm-common-dark-color cm-button-link"&gt;(&lt;span ng-bind="c.accepted_answer.helpful_count"&gt;&lt;/span&gt;) &lt;/a&gt;
                    &lt;span data-ng-if="c.accepted_answer.helpful_count == 0" role="presentation" class="cm-common-dark-color"&gt;(&lt;span ng-bind="c.accepted_answer.helpful_count"&gt;&lt;/span&gt;) &lt;/span&gt;
                  &lt;/span&gt;
                  &lt;span data-ng-if="!c.accepted_answer.canMarkHelpful &amp;&amp; c.data.isLoggedIn" class="cm-common-light-color"&gt;
                    &lt;i class="fa fa-thumbs-up cm-action-icons" aria-hidden="true"&gt;&lt;/i&gt; ${Helpful}
                    &lt;a data-ng-if="c.accepted_answer.helpful_count &gt; 0" role="link" href="Javascript:void(0);" aria-haspopup="true"
                       data-ng-click="c.getFeedbackProfiles(c.accepted_answer,'helpful')" class="cm-common-dark-color cm-button-link"&gt;(&lt;span ng-bind="c.accepted_answer.helpful_count"&gt;&lt;/span&gt;) &lt;/a&gt;
                    &lt;span data-ng-if="c.accepted_answer.helpful_count == 0" role="presentation" class="cm-common-dark-color"&gt;(&lt;span ng-bind="c.accepted_answer.helpful_count"&gt;&lt;/span&gt;) &lt;/span&gt;
                  &lt;/span&gt;
                  &lt;span data-ng-if="::!c.data.isLoggedIn" class="cm-common-light-color"&gt;
                    &lt;i class="fa fa-thumbs-up cm-action-icons" aria-hidden="true"&gt;&lt;/i&gt; ${Helpful}
                    &lt;span role="presentation" class="cm-common-dark-color"&gt;(&lt;span ng-bind="c.accepted_answer.helpful_count"&gt;&lt;/span&gt;) &lt;/span&gt;
                  &lt;/span&gt;
                &lt;/div&gt;
                &lt;div class="reply cm-action" data-ng-class="c.post.showEditMode ? 'cm-disable-comment': ''"&gt;
                  &lt;a role="button" tabindex="0" href="Javascript:void(0);" aria-label="${reply}" data-ng-if="c.post.canReply &amp;&amp; c.data.isLoggedIn" ng-class="c.acceptedAnswer.showReplyBox ? 'cm-acted-color cm-button-link' : 'cm-common-light-color cm-button-link'" data-ng-click="c.showReplyBox(c.acceptedAnswer,!c.acceptedAnswer.showReplyBox,1,'ccq_acceptedAnswerEditor')" &gt;
                    &lt;span&gt;&lt;i class="fa fa-comment cm-action-icons" aria-hidden="true"&gt;&lt;/i&gt; ${Reply}
                      &lt;span data-ng-if="c.accepted_answer.comment_count &gt; 0" class="cm-common-dark-color" role="presentation" aria-label="${Number of replies to the this reply}"&gt;(&lt;span ng-bind="c.accepted_answer.comment_count"&gt;&lt;/span&gt;)&lt;/span&gt;
                    &lt;/span&gt;
                  &lt;/a&gt;
                  &lt;span tabindex="0" aria-label="${reply}" data-ng-if="!c.data.isLoggedIn" ng-class="'cm-common-light-color cm-button-link'"&gt;
                    &lt;i class="fa fa-comment cm-action-icons" aria-hidden="true"&gt;&lt;/i&gt; ${Replies}
                    &lt;span class="cm-common-dark-color" role="presentation" aria-label="${Number of replies to the this reply}"&gt;(&lt;span ng-bind="c.accepted_answer.comment_count"&gt;&lt;/span&gt;)&lt;/span&gt;
                  &lt;/span&gt;
                &lt;/div&gt;
              &lt;/div&gt;
              &lt;div&gt;
                &lt;div class="cm-reply-box self-clear" data-ng-if="c.acceptedAnswer.showReplyBox"&gt;
                  &lt;div class="alert alert-danger cm-alert-inform clearfix" data-ng-if="c.formValidation.showMsg"&gt;
                    &lt;div class="alert-icon pull-left"&gt;
                      &lt;i class="fa fa-exclamation-circle" aria-hidden="true"&gt;&lt;/i&gt;
                    &lt;/div&gt;
                    &lt;div class="alert-text pull-left"&gt;
                      &lt;span ng-bind="c.formValidationError"&gt;&lt;/span&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                  &lt;div class="form-group cm-widget-mce hidden-xs" id="ccq_acceptedAnswerEditor" data-ng-if="c.acceptedAnswer.showReplyBox"&gt;
                    &lt;sp-tinymce-video data-ng-model="c.newReplyText" ng-model-options="{height: '300', allow: c.data.allowInsertVideoOnAnswer, updateOn: 'default blur',
                                       debounce:{
                                       'default':250}
                                       }" sn-mentions-config="::c.data.userMentionConfig"&gt;&lt;/sp-tinymce-video&gt;
                  &lt;/div&gt;
                  &lt;div class="form-group cm-reply-textarea visible-xs"&gt;
                    &lt;label id="lbl2" class="sr-only"&gt;${Post A Reply}&lt;/label&gt;
                    &lt;textarea data-ng-model="c.accepted_answer.textInput" class="form-control" rows="5" aria-labelledby="lbl2"
                              ng-model-options="{
                                       updateOn: 'default blur',
                                       debounce:{
                                       'default':250}
                                       }"&gt;&lt;/textarea&gt;
                  &lt;/div&gt;
                  &lt;div class="form-group" &gt;
                    &lt;div class="cm-attach-link padder-t"&gt;
                      &lt;community-attachments attachments="c.attachments"
                                               config="{canEdit: true,
                                                       dialogMode: true,
                                                       showDialogDnD: true,
                                                       showDialogList: true,
                                                       canDeleteFile: true,
                                                       attachmentsCount: c.attachmentsCount,
                                                       attachmentsAdded: c.attachmentsAdded,
                                                       parentWidget: c.widget.sys_id
                                                       }"  &gt;&lt;/community-attachments&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                  &lt;div class="cm-form-actions"&gt;
                    &lt;div class="btn-container"&gt;
                      &lt;div class="pull-right"&gt;
                        &lt;button type="cancel" class="btn btn-default cm-cancel-btn action-btn" data-ng-click="c.cancelReply(c.acceptedAnswer,1)"&gt;${Cancel}&lt;/button&gt;
                        &lt;button type="submit" class="btn btn-primary action-btn" data-ng-disabled="!c.acceptedAnswer.isDirty" data-ng-click="c.postComment(c.accepted_answer,'accepted_comment')"&gt;${Reply}&lt;/button&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="cm-comment-header self-clear" data-ng-if="c.comments.length"&gt;
        &lt;div class="pull-left cm-hdr-text"&gt;
          &lt;span class="cm-reply-count cm-common-dark-color" ng-bind="c.post.comment_count &gt; 1 ? (c.formatMessage(c.data.msg.repliesCountText, [c.post.comment_count])) : c.data.msg.replyCountText"&gt;
          &lt;/span&gt;
          &lt;span class="cm-last-reply-info cm-common-light-color" data-ng-if="!isMobileView()"&gt;(${ Latest reply}
            &lt;span class="cm-last-reply-timestamp"&gt;
              &lt;span data-ng-if="!c.latestReply.hideTimeAgo"&gt;&lt;sn-time-ago timestamp="c.latestReply.edited_date" /&gt;&lt;/span&gt;
              &lt;span data-ng-if="c.latestReply.hideTimeAgo"&gt;${Just Now}&lt;/span&gt;
            &lt;/span&gt;
            ${by}
            &lt;gm-hover-card readonlymode="::c.data.readOnlyMode" carddata="c.latestReply.userAvatarObject" enablegamification="::c.data.enable_gamification" pointslabel="::c.data.msg.points" profilelink="::c.data.msg.profileLink" subject="::c.data.msg.subject" canemail="::data.isCommuAdminOrMod&amp;&amp;data.loggedInUserProfileId !=c.latestReply.userAvatarObject.userId"&gt;&lt;/gm-hover-card&gt;
            &lt;span class="cm-close-brace"&gt;)&lt;/span&gt;
          &lt;/span&gt;
        &lt;/div&gt;
        &lt;button class="btn btn-default show-all-btn pull-right" data-ng-if="!c.hideShowAllReplyBtn" data-ng-click="c.showNestedReplies()" data-ng-class="isMobileView() ? 'cm-small-font' : ''"&gt;
          &lt;span data-ng-if="!c.showAllReplies"&gt;${Show All Replies}&lt;/span&gt;
          &lt;span data-ng-if="c.showAllReplies"&gt;${Hide All Replies}&lt;/span&gt;
        &lt;/button&gt;
      &lt;/div&gt;
      &lt;div class="panel panel-{{::options.panel_type}} csm-tile csm-widget cm-comment" data-ng-repeat="comment in c.comments track by comment.sys_id" emit-on-last-repeat&gt;
        &lt;div class="panel-body cm-comment-body"&gt;
          &lt;div data-ng-include='"communityRepliesTemplate"'&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="panel-footer text-center cm-show-reply" data-ng-if="isMobileView() &amp;&amp; comment.comment_count &gt; 0"&gt;
          &lt;button class="btn" data-ng-click="c.showNestedReplies(comment)"&gt;
            &lt;span data-ng-if="!comment.showReplies"&gt;&lt;i class="fa fa-arrow-circle-down" aria-hidden="true"&gt;&lt;/i&gt;${Show Replies}&lt;/span&gt;
            &lt;span data-ng-if="comment.showReplies"&gt;&lt;i class="fa fa-arrow-circle-up" aria-hidden="true"&gt;&lt;/i&gt;${Hide Replies}&lt;/span&gt;
          &lt;/button&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
      &lt;div data-ng-if="c.post.original_disable_comments" class="panel panel-{{::options.panel_type}} csm-tile cm-end-reply-panel csm-widget disable-comments-message"&gt;
        &lt;span class="cm-reply-text"&gt;${Replies are currently disabled for this question.}&lt;/span&gt;
      &lt;/div&gt;
    &lt;div class="panel panel-{{::options.panel_type}} csm-tile cm-end-reply-panel csm-widget" data-ng-if="c.comments.length &amp;&amp; c.post.canReply &amp;&amp; c.data.isLoggedIn &amp;&amp; !c.post.showEditMode"&gt;
      &lt;div class="cm-reply-box-hide" data-ng-if="!c.post.showReplyBox2" &gt;
        &lt;div class="cm-user-img cm-align-center visible-xs"&gt;
          &lt;span class="image50px" &gt;
            &lt;a ng-href="/{{c.data.portal}}?id=community_user_profile&amp;user={{c.user.userId}}" title="{{::c.user.name}}"&gt;
              &lt;sn-avatar primary="::c.user" show-presence="false"/&gt;
            &lt;/a&gt;
          &lt;/span&gt;
          &lt;a role="button" href="javascript:void(0);" class="cm-button-link cm-reply-text" data-ng-click="c.showReplyBox(c.post,!c.post.showReplyBox2,2,'ccq_postEditor')"&gt;
            ${Click here to reply on this post...}
          &lt;/a&gt;
        &lt;/div&gt;
        &lt;div class="cm-user-img hidden-xs"&gt;
          &lt;span class="image50px"&gt;
            &lt;a ng-href="/{{c.data.portal}}?id=community_user_profile&amp;user={{c.user.userId}}" title="{{::c.user.name}}"&gt;
              &lt;sn-avatar primary="::c.user" show-presence="false"/&gt;
            &lt;/a&gt;
          &lt;/span&gt;
          &lt;a role="button" href="javascript:void(0);" class="cm-button-link cm-reply-text" data-ng-click="c.showReplyBox(c.post,!c.post.showReplyBox2,2,'ccq_postEditor')"&gt;
            ${Click here to reply on this post...}
          &lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="cm-reply-box self-clear" data-ng-if="c.post.showReplyBox2"&gt;
        &lt;div class="alert alert-danger cm-alert-inform clearfix" data-ng-if="c.formValidation.showMsg"&gt;
          &lt;div class="alert-icon pull-left"&gt;
            &lt;i class="fa fa-exclamation-circle" aria-hidden="true"&gt;&lt;/i&gt;
          &lt;/div&gt;
          &lt;div class="alert-text pull-left"&gt;
            &lt;span ng-bind="c.formValidationError"&gt;&lt;/span&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="form-group cm-widget-mce hidden-xs" id="ccq_postEditor" data-ng-if="c.post.showReplyBox2"&gt;
          &lt;sp-tinymce-video data-ng-model="c.newReplyText" ng-model-options="{height: '300', allow: c.data.allowInsertVideoOnAnswer, updateOn: 'default blur',
                                       debounce:{
                                       'default':250}
                                       }" sn-mentions-config="::c.data.userMentionConfig"&gt;&lt;/sp-tinymce-video&gt;
        &lt;/div&gt;
        &lt;div class="form-group cm-reply-textarea visible-xs"&gt;
          &lt;label id="lbl4" class="sr-only"&gt;${Post A Reply}&lt;/label&gt;
          &lt;textarea data-ng-model="c.post.textInput" class="form-control" rows="5" aria-labelledby="lbl4"
                    ng-model-options="{
                                       updateOn: 'default blur',
                                       debounce:{
                                       'default':250}
                                       }"&gt;&lt;/textarea&gt;
        &lt;/div&gt;
        &lt;div class="form-group" &gt;
          &lt;div class="cm-attach-link padder-t"&gt;
            &lt;community-attachments attachments="c.attachments"
                                   config="{canEdit: true,
                                           dialogMode: true,
                                           showDialogDnD: true,
                                           showDialogList: true,
                                           canDeleteFile: true,
                                           attachmentsCount: c.attachmentsCount,
                                           attachmentsAdded: c.attachmentsAdded,
                                           parentWidget: c.widget.sys_id
                                           }"  &gt;&lt;/community-attachments&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="cm-form-actions"&gt;
          &lt;div class="btn-container"&gt;
            &lt;div class="pull-right"&gt;
              &lt;button type="cancel" class="btn btn-default cm-cancel-btn action-btn" data-ng-click="c.cancelReply(c.post,2)"&gt;${Cancel}&lt;/button&gt;
              &lt;button type="submit" class="btn btn-primary action-btn" data-ng-disabled="!c.post.isDirty" data-ng-click="c.postComment(c.post,'question',2)"&gt;${Reply}&lt;/button&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id="screen-reader-tag-id" class="sr-only" role="alert" aria-live="polite"&gt;
  &lt;/div&gt;
&lt;/div&gt;]]&gt;&lt;/template&gt;&lt;/sp_widget&gt;</payload>
        <sys_class_name>sp_rel_widget_clone</sys_class_name>
        <sys_created_by>pradeep</sys_created_by>
        <sys_created_on>2020-04-20 07:36:14</sys_created_on>
        <sys_id>f719af55db945410730a7b38689619c2</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>7b19eb55db945410730a7b3868961997</sys_name>
        <sys_package display_value="Titan Encircle" source="x_236494_titan_enc">fd74bb58db109010730a7b386896199e</sys_package>
        <sys_policy/>
        <sys_scope display_value="Titan Encircle">fd74bb58db109010730a7b386896199e</sys_scope>
        <sys_update_name>sp_rel_widget_clone_f719af55db945410730a7b38689619c2</sys_update_name>
        <sys_updated_by>pradeep</sys_updated_by>
        <sys_updated_on>2020-04-20 07:36:14</sys_updated_on>
    </sp_rel_widget_clone>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Titan Encircle">fd74bb58db109010730a7b386896199e</application>
        <file_path/>
        <instance_id>01ceb2c0dbf753804f035d00cf961989</instance_id>
        <instance_name>dev68729</instance_name>
        <name>sp_rel_widget_clone_f719af55db945410730a7b38689619c2</name>
        <payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_rel_widget_clone"><sp_rel_widget_clone action="INSERT_OR_UPDATE"><child display_value="Copy of Community Content Question">7b19eb55db945410730a7b3868961997</child><cloned>2020-04-20 07:36:14</cloned><last_validated>2020-04-20 07:36:14</last_validated><parent display_value="Community Content Question">2f4a647c672032007bf09a6617415a58</parent><payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;sp_widget&gt;&lt;category/&gt;&lt;client_script&gt;&lt;![CDATA[function($timeout, $scope, $location, $rootScope, $interval, $filter, $uibModal,$sce, $http, spUtil, $window, $anchorScroll, $q, spCommunitySEOService, csmUnifiedDeviceType) {

	var apiBaseUrl = '/api/sn_communities/v1/community';
	var subscriptionBaseUrl = '/api/now/v1/actsub';
	var answerTable = "kb_social_qa_answer";

	var c = this,
		contentComments = {},
		maxCommentLevel = 7; //Total levels = 8;
	c.comments = [];
	c.queryParams = $location.search();
	c.correctComment = null;
	c.showFollow = true;
	c.contentValid = true;
	c.userSelection = '';
	c.userText = '';
	c.currentPost = '';
	c.currentType = '';
	c.user = c.data.loggedInUser || {};
	c.formValidation = {pass:true};
	c.refresh_delay = c.options.view_refresh_time;
	c.showModerationError = false;
	c.postNotValid = false;
	c.newReplyText = "";
	c.validCase = false;
	c.latestReply = null;
	/*To distinguish reply box on accepted solution panel,
				and reply box on answer in context*/
	c.acceptedAnswer = {showReplyBox: false};
	c.data.portal = $rootScope.portal.url_suffix;
	c.formValidationError = c.data.msg.requiredFieldsError;
	c.reported = false;
	$scope.reportText = "Report";
	c.postReportResult = '';
	c.choices = [];
	c.userSelection = '';
	c.current = '';
	c.moderationSubmitted = false;
	c.moderationReasonsFetched = false;
	c.canCreateCase = (c.data.enable_csm_case_creation_from_question === 'true');
	c.showAllReplies = false; //If True, shows all the nested replies expanded on page load.		
	c.hideShowAllReplyBtn = true;
	c.imageInstance = '';
	c.minImageHeight = parseInt(c.options.min_image_height) || 100;
	c.minImageWidth = parseInt(c.options.min_image_width) || 185;
	c.errorForums=[];
	c.showFeatureContentAlert=false;
	$scope.isMobileView = csmUnifiedDeviceType.isMobileView;		
	qsConfigJson = $scope.portal.quick_start_config ? JSON.parse($scope.portal.quick_start_config)[0] : null;
	if ($scope.isMobileView())		
		maxCommentLevel = 3;
	//c.activeTinyMCE stores the reply object that has tinyMCE opened, either by edit or by creating new reply
	c.activeTinyMCE = {};

	var showCaseSuccessMsg = function() {
		var caseNumber = $location.search().caseNumber;
		if($window.sessionStorage.getItem("notification") == 'true') {
			if(caseNumber){
				c.data.showSuccessMsg = true;
				c.data.successParam = caseNumber;
				c.data.successMsg = 'Case Created: ';
				c.server.update().then(function(response) {
					c.data.showSuccessMsg = false;
				});
			}
			$window.sessionStorage.setItem('notification', 'false');
		}
	};

	c.createCase = function() {
		c.data.getCaseMapping = true;
		c.data.questionId = c.post.sys_id;
		c.server.update().then(function(response) {
			c.data.getCaseMapping = false;
			var currentConfig = {};
			currentConfig.validMapping = response.mapping[0];
			currentConfig.previousUrl = $location.url();
			currentConfig.sourceUrl = $location.absUrl();
			currentConfig.contentId = c.post.content_sys_id;
			$window.sessionStorage.setItem("case_mapping", JSON.stringify(currentConfig));
			$location.url('?id=community_entity_creator');
		});
	};

	var imageCheck = 0;
	var imageArrayList;

	var query = {
		contentId : c.queryParams.sys_id,
		contentType: '5a2fcaa0dbd26600b1f6f78eaf9619a8' //question content type id
	};

	$rootScope.$on('imageArray', function(event,imageArray) {
		imageArrayList = imageArray;
		imageCheck =1;
	});

	function clearTinyMceAttachments(){
		imageCheck = 0;
		imageArrayList= [];
	}

	$scope.anchorScroll = function(anchor, answer) {
		var rootId,
			anchorId = anchor.replace('answer_', '');
		if (answer.root)
			rootId = answer.root.sys_id;
		if (rootId) {
			for (var i = 0; i &lt; c.comments.length; i++) {
				if (c.comments[i].sys_id == rootId) {
					if (rootId != anchorId)
						c.comments[i].showReplies = true;
					break;
				}
			}
		}
		$timeout(function(){
			$anchorScroll(anchor);
			$scope.$emit('sp.community.question.anchor.focus', {"anchor": anchor});
		});
	};

	$scope.gotoAnchor = function(anchor) {
		$timeout(function () {
			if(!anchor) {
				anchor = $location.search().anchor;
			}
			if(anchor) {
				var answerId = anchor.replace('answer_','');
				var root = c.data.root;
				if(root)
					$scope.anchorScroll(anchor, {'sys_id': answerId, 'root':root});
				else
					showPageAlert(c.data.msg.anchorReplyNotFound, 'alert-danger', 'fa-exclamation-circle', true);
			}
		});
	}

	if(c.data.isLoggedIn){
		//Record Watcher for Replies
		spUtil.recordWatch($scope, answerTable, "question="+query.contentId+"^content.profile!="+c.data.loggedInUserProfileId, function(data) {
			if(data.data.action == "entry"){
				getNewReplyDetails(data.data.sys_id);
			}
		});
	}

	var newCmParent = {};
	function getNewReplyDetails(answerId){
		var resourceUrl = '/contents/' + query.contentId + '/answers/' + answerId;
		$http.get(apiBaseUrl+resourceUrl)
			.then(function(data){
			var newComment = data.data.result.data;
			newComment.feedbackProfiles = [];
			newComment.showAnswer =  true;
			//	var parent = {};
			if(newComment.parent_id != ""){
				var rootIndex = findIndex(c.comments,'sys_id',newComment.root.sys_id),
					rootCm = rootIndex &gt; -1 ? c.comments[rootIndex] : null;
				if (newComment.root.sys_id == newComment.parent_id) {
					if(rootCm != null){
						newComment.replied_to = rootCm.userAvatarObject;
						placeNewComment(newComment, rootCm);
					}
				}
				else {
					getParentComment(rootCm.comments, newComment.parent_id, parent);
					newComment.replied_to = newCmParent.userAvatarObject;
					placeNewComment(newComment,newCmParent);
				}
			}
			else{
				newCmParent.sys_id = c.post.sys_id;
				placeNewComment(newComment,newCmParent);
			}
			$timeout(function(){
				$('.cm-comment-text-detail img').addClass('community_image_fullscreen');
			});
			//expand dom tree
			//$('.panel.panel-default.csm-tile.cm-comment.csm-widget &gt; .cm-comment-body').children().children('.ng-hide').removeClass('ng-hide');
			//$('.view-replies.cm-action.cm-nested-comments-link').addClass('ng-hide');
		},function(error){
			console.log(error);
		});
		newCmParent = {};//reset
	}

	var questionToCase = function() {
		c.data.convertToCase = true;
		c.data.liveProfileId = c.post.userAvatarObject.userId;
		c.data.contentId = c.post.content_sys_id;
		c.server.update().then(function(response) {
			c.validCase = response.validCase;
			c.data.convertToCase = false;
			showCaseSuccessMsg();
		});
	};

	function addRootInfo(root, cmArray) {
		cmArray.forEach(function(cm) {
			cm.root = root;
			if (cm.comments.length)
				addRootInfo(root, cm.comments);
		});
	}

	function appendNestedReplies(nest, anchor) {
		var nestedRepliesPresentFlag = false;
		c.comments.forEach(function(cm) {
			if(cm.comment_count) {
				cm.comments = nest[cm.sys_id] ? nest[cm.sys_id] : [];
				if(cm.comments.length) {
					nestedRepliesPresentFlag = true;
					addRootInfo(cm, cm.comments);	
				}
			}
		});
		if (nestedRepliesPresentFlag)
			c.hideShowAllReplyBtn = false;
		$timeout(function() {
			if(anchor)
				$scope.gotoAnchor(anchor);
		});
	}
	c.initCmObject = function(cm, scope) {
		cm.super_cm = scope.$parent.$parent.comment;
		manipulateAnswerObject(cm);
	};

	///Fetch Question Information
	var response = c.data.question;
	if(response.status == 200){
		c.post = response.data[0];
		if (c.post) {
			c.showDisableComments = c.post.canDisableComments;
			c.post.original_disable_comments = c.post.disable_comments;
			if(c.post.comment_count &gt; 0 ){
				var resourceUrl = '/contents/'+ c.post.sys_id+ '/answers?content_type='+query.contentType+'&amp;depth=1';
				var anchor = $location.search().anchor;
				if(anchor) {
					var answerId = anchor.replace('answer_','');
					resourceUrl += '&amp;anchor='+answerId;
				}
				$http.get(apiBaseUrl+resourceUrl)
					.then(function(response){
					contentComments.comments = response.data.result;
					c.comments = [];
					commentDataManipulations(contentComments);
					$timeout(function(){
						$('.cm-comment-text-detail img').addClass('community_image_fullscreen');
						$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-comment-text-detail"]);
					});
					
					$scope.$evalAsync(function(){
						/*Send nested replies call iff there are nested replies, 
						i.e. when atleast one of the top level reply has a nested reply*/
						if(!c.hideShowAllReplyBtn) {
							var resourceUrl = '/contents/'+ c.post.sys_id+ '/answers?content_type='+query.contentType+'&amp;depth=-1&amp;level_limit=' + maxCommentLevel+"&amp;view=nested";
							$http.get(apiBaseUrl+resourceUrl)
								.then(function(res){
								if(Object.keys(res.data.result).length) {
									appendNestedReplies(res.data.result, anchor);
								}
								$timeout(function(){
									$('.cm-comment-text-detail img').addClass('community_image_fullscreen');
									$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-comment-text-detail"]);
								});
							}, function(error) {
								console.log(error);
							});
						}else {
							$scope.gotoAnchor(anchor);
						}
					});
				}, function(error){
					console.log(error);
				});
			}
			if(c.canCreateCase)
				questionToCase();
			c.isContentAuthor = c.post.userAvatarObject.userId == c.data.loggedInUserProfileId;
			c.isEdited = (c.post.edited_date != '');
			c.post.isValidContent = true;
			c.post.originalTitle = c.post.title;
			c.state = c.post.state;
			c.post.originalTopics = c.post.topics;
			c.post.feedbackProfiles = [];
			c.latestReply = c.post.latestReply;
			c.accepted_answer = c.post.accepted_answer;
			if(Object.keys(c.accepted_answer).length &gt; 0){
				c.accepted_answer.feedbackProfiles = [];
				c.showAcceptedPannel = Object.keys(c.accepted_answer).length &gt; 0;
				c.accepted_answer.userAvatarObject.profileLink = getProfileLink(c.accepted_answer.userAvatarObject.userId);
			}
			//hide sn-time-ago for 1 minute
			if(c.post.publishedHideTimeAgo == true){
				$timeout(function(){
					c.post.publishedHideTimeAgo = false;
				}, c.post.publishedHideTime);
			}
			if(c.post.editedHideTimeAgo == true){
				$timeout(function(){
					c.post.editedHideTimeAgo = false;
				}, c.post.editedHideTime);
			}

			var contentId = c.post.sys_id;
			c.post.originalDescription = c.post.description;
			if(c.latestReply.userAvatarObject)
				c.latestReply.userAvatarObject.profileLink = getProfileLink(c.latestReply.userAvatarObject.userId);
			c.post.userAvatarObject.profileLink = getProfileLink(c.post.userAvatarObject.userId);
			if(c.post.answered){
				c.answered = true;
			}
			c.showFollow = c.post.showFollow;
		} 
		else {
			c.contentValid = false;
			c.postNotValid = true;
		}
	} 
	else if(response.status == 500) { //If there is an unexpected error, this message should take precedence over please login to view the content or content unavilable messages
		c.showPageAlertForError = true;
		showPageAlert(response.message, 'alert-danger', 'fa-exclamation-circle');
	}
	else if(!c.data.isLoggedIn){
		c.showPageAlertForGuest = true;
		showPageAlert('', 'alert-danger', 'fa-exclamation-circle');
		$window.sessionStorage.setItem('navToUri', $location.url());
	}
	else {
		c.showPageAlertForError = true;
		showPageAlert(response.message, 'alert-danger', 'fa-exclamation-circle');
	} 
	//--/

	//Clear tinyMCE content on cancel button click
	c.clearReply = function(content,replyBoxNumber){
		if(replyBoxNumber == 2)
			content.showReplyBox2 = false;
		else
			content.showReplyBox = false;
		c.newReplyText = "";
		content.textInput = "";
		c.showModerationError = false;
		resetAttachments(content.attachments);
	}
	
	c.cancelReply = function(content,replyBoxNumber){
		if( (c.newReplyText &amp;&amp; c.newReplyText!='') || isAttachmentDirty()){
			var modalInstance = $uibModal.open({
				animation: true,
				ariaLabelledBy: 'modal-title',
				ariaDescribedBy: 'modal-body',
				templateUrl: 'community-cancel-edit-question.html',
				controller: function($scope) {
					$scope.title = c.data.msg.discardChange;
					$scope.message = c.data.msg.editCancelMsg;
					$scope.cancel = function() { modalInstance.dismiss('cancel'); };
					$scope.confirm = function() {  modalInstance.close(); c.clearReply(content,replyBoxNumber); };
				}
			});
		}
		else
			c.clearReply(content,replyBoxNumber);
		
	}

	///Form validation for empty replies
	function validateForm(formObj,type){
		c.formValidationError = '';
		c.formValidation.pass = true;
		if(type == 'content'){
			if (!formObj.title){
				c.formValidation.pass = false;
				highlightErrors('.cm-edit-mode input[name="title"]', true);
			}else{
				removeHighlightErrors('.cm-edit-mode input[name="title"]', true);
			}

			if(c.data.topicsEnabled){
				if(formObj.topics &amp;&amp; formObj.topics.length&gt;c.data.maxTopicLimit){
					c.formValidationError = c.data.msg.topicLimitExceededAlert;
					c.formValidation.pass = false;
					highlightErrors('#choose_topics', true);
				}
				else{
					removeHighlightErrors('#choose_topics', true);
				}
			}
			if(c.canEditForum){
				if(c.writableForumIds.indexOf(formObj.forum)== -1){
					c.formValidationError = c.data.msg.questionContentTypeNotPresent;
					c.formValidation.pass = false;
					highlightErrors('#choose_forum');
					setAriaInvalid('.cm-select2-forum .cm-select2', true);
				}
				else{
					removeHighlightErrors('#choose_forum');
					setAriaInvalid('.cm-select2-forum .cm-select2', false);
				}
			}
		}
		else if(type == 'comment-view'){
			if(!formObj.reply){
				highlightErrors('.cm-content-question .mce-tinymce.mce-container.mce-panel');
				$('.cm-content-question .mce-container.mce-panel iframe').contents().find('#tinymce').attr('aria-invalid', true);
				c.formValidation.pass = false;
				c.formValidationError = c.data.msg.commentRequiredFieldError;
			}
			else{
				removeHighlightErrors('.cm-content-question .mce-tinymce.mce-container.mce-panel');
				$('.cm-content-question .mce-container.mce-panel iframe').contents().find('#tinymce').attr('aria-invalid', false);
				c.formValidation.pass = true;
			}
		}
		else if(type == 'comment-edit'){
			if(!formObj.reply){
				highlightErrors('.cm-comment-edit-mode .mce-tinymce.mce-container.mce-panel');
				$('.cm-comment-edit-mode .mce-container.mce-panel iframe').contents().find('#tinymce').attr('aria-invalid', true);
				c.formValidation.pass = false;
				c.formValidationError = c.data.msg.commentRequiredFieldError;
			}
			else{
				removeHighlightErrors('.cm-comment-edit-mode .mce-tinymce.mce-container.mce-panel');
				$('.cm-comment-edit-mode .mce-container.mce-panel iframe').contents().find('#tinymce').attr('aria-invalid', true);
				c.formValidation.pass = true;
			}
		}
		if(!c.formValidation.pass){
			if(c.formValidationError=='')
				c.formValidationError = c.data.msg.requiredFieldsError;
			c.formValidation.showMsg = true;
			if(c.formValidationError != c.data.msg.commentRequiredFieldError) {
				$scope.$evalAsync(function(){
					$anchorScroll('topOfPage');
				});
			}
		}
		else
			c.formValidation.showMsg = false;
	}

	function highlightErrors(element, addAriaInvalid){
		// addAriaInvalid true adds aria-invalid attribute true to passed element
		$(element).addClass('mandate');
		if(addAriaInvalid) setAriaInvalid(element, true);
	}

	function removeHighlightErrors(element, removeAriaInvalid){
		// removeAriaInvalid true makes aria-invalid attribute false to passed element
		$(element).removeClass('mandate');
		if(removeAriaInvalid) setAriaInvalid(element, false);
	}
	
	function setAriaInvalid(elem, value){
		$(elem).attr('aria-invalid', value);
	}

	var watcher1 = function(){}, interval1 = function(){};
	function watchFormFields(content,type){
		c.watchFormObj =  c.formData;
		$interval.cancel(interval1);
		interval1 = $interval(function(){
			if(type == 'content'){
				c.watchFormObj =  {
					title: c.post.title,
					description: c.post.description
				};
				if(c.data.topicsEnabled){
					c.watchFormObj.topics = $('#choose_topics').val();
				}
				c.watchFormObj.forum = $('#choose_forum').val();
			}
			else if(type == 'comment-view'){
				c.watchFormObj =  {
					reply: c.newReplyText
				};
			}
			else if(type == 'comment-edit'){
				c.watchFormObj =  {
					reply: content.text
				};
			}
		}, 500);

		watcher1();
		watcher1 = $scope.$watch('c.watchFormObj', function(){
			validateForm(c.watchFormObj,type);
			if(c.formValidation.pass){
				watcher1();
				$interval.cancel(interval1);
			}
		}, true);
	}
	//--/

	function showPageAlert(msg, alertClass, alertIcon, neverDisapper, callback, showMailTo) {
		c.pageAlertMessageHTML = msg;
		c.pageAlertClass = alertClass;
		c.alertIconClass = alertIcon;
		c.showPageAlert = true;
		c.showMailTo = showMailTo;
		$anchorScroll('topOfPage');
		$timeout(function(){
				$('#topOfPage .cm-alert i.fa-times').focus();
		});

		if(!neverDisapper)
			$timeout(function(){
				c.showPageAlert = false;
			}, 5000);
		if(callback)callback();
	}

	///Post Reply
	c.postComment= function(content,type,replyboxnumber){
		c.showModerationError = false;

		if($('.cm-widget-mce').is(":visible")){
			c.newReplyText = tinyMCE.activeEditor.getContent();
			reply = c.newReplyText;
		}
		else{
			reply = content.textInput;
		}

		c.formData = {};
		c.formData.reply = reply;
		validateForm(c.formData,'comment-view');
		if(!c.formValidation.pass){
			watchFormFields(content,'comment-view');
			return;
		}

		else{
			var parent;
			if(type == 'comment' || type == 'accepted_comment')parent = content.sys_id
			else parent = null;
			content.isDirty = false;
			var input = {
				text: c.formData.reply,
				parent: parent,
				imageCheck:imageCheck,
				imageArray:imageArrayList
			}
			var resourceUrl = '/contents/'+ query.contentId + '/answers';
			validateAttachments().then(function(resp){
				if(resp.valid !=true){
					content.isDirty = true;
					showAttachmentError(resp.error);
					return;
				}
				$http.post(apiBaseUrl+resourceUrl,input)
					.then(function(data){
					if(data.status == 202){
						if (data.data.result &amp;&amp; data.data.result.moderateResponse
							&amp;&amp; data.data.result.moderateResponse.filterResults) {
							var filterResults = data.data.result.moderateResponse.filterResults;
							var moderationError = [] ;
							var moderateHighlight = [];
							for (var i = 0; i &lt; filterResults.length; i ++ ) {
								moderationError.push(filterResults[i].comment);
							}
							c.showModerationError = true;
							c.moderationError = moderationError;
							$anchorScroll('topOfPage');
							content.isDirty = true;
							$timeout(function(){
								$('#topOfPage .cm-alert-question-inform .cm-close-btn').focus();
							});
						}

					} else {
						if(type == 'comment')c.activeAnswer = content.root;
						var newComment = data.data.result.contentInfo;
						if (newComment.replied_to)
							newComment.replied_to = content.userAvatarObject;

						var cb = function(edited_on, isScanInProgress, attachmentError){
							if(type == 'accepted_comment'){
								c.clearReply(c.acceptedAnswer);
							}
							else if(replyboxnumber == 2){
								c.clearReply(content,replyboxnumber);
							}
							else{
								c.clearReply(content);
							}

							c.showFollow = false;
							if(type == 'accepted_comment'){
								angular.forEach(c.comments,function(val){
									if(val.sys_id == content.sys_id)content = val;
								});
							}

							if(data.data.result.contentInfo &amp;&amp; data.data.result.contentInfo.willUnderModeration == true){
								$scope.$emit('$$uiNotification', [{		
										message: isScanInProgress ? c.data.msg.postReplyUnderModeration_scanInProgress : c.data.msg.postReplyUnderModeration,
										type: 'success'}]);
							} else {
								placeNewComment(newComment,content);
								$timeout(function() {
									$('.cm-comment-text-detail img').addClass('community_image_fullscreen');
									$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-comment-text-detail"]);
									$anchorScroll('answer_'+newComment.sys_id);
									$scope.$emit('$$uiNotification', [{		
										message: isScanInProgress ? c.data.msg.postReplySuccess_scanInProgress : c.data.msg.postReplySuccess,
										type: 'success'}]);
								});
								//showPageAlert(c.data.msg.postReplySuccess, 'alert-success', 'fa-check');
							}
							if(attachmentError){
								$scope.$emit('$$uiNotification', [{		
									'message': attachmentError,
									'type': 'error'}]
								);
							}
						}
						uploadAttachments('comment', newComment, 'post', cb);
					}
				}, function(error){
					if(error.status == 503 || error.status == 429 || error.status == 401)
						showPageAlert(error.data.result.message, 'alert-danger', 'fa-exclamation-circle');
					var boxNumber;
					if(content.showReplyBox)
						boxNumber = 1;
					else if(content.showReplyBox2)
						boxNumber = 2;
					if(error.status != 429 &amp;&amp; error.status != 401)
						c.clearReply(content,boxNumber);
				});
			})
		}
	};

	function placeNewComment(newComment,parent){
		newComment.showAnswer = true;
		newComment.originalTitle = newComment.text;
		newComment.userAvatarObject.profileLink = getProfileLink(newComment.userAvatarObject.userId);
		c.post.comment_count++;
		if (parent &amp;&amp; parent.level) parent.level = parseInt(parent.level);
		if(parent &amp;&amp; parent.sys_id &amp;&amp; parent.sys_id == c.post.sys_id) {
			c.comments.push(newComment);
			newComment.level = 0;
		}
		else {
			parent.comment_count++;
			newComment.level = parent.level &lt; maxCommentLevel ? parent.level + 1 : maxCommentLevel;
			if (parent.level &lt; maxCommentLevel)
				parent.comments.push(newComment);
			else {
				var superParent = parent.super_cm ? parent.super_cm : c;
				var parentInd = superParent.comments.map(function(val){return val.sys_id}).indexOf(parent.sys_id);
				var childrenCount = numberofChildren(parent, superParent.comments);
				superParent.comments.splice(parentInd+childrenCount+1, 0, newComment);
			}
			if(c.hideShowAllReplyBtn) {
				c.hideShowAllReplyBtn = false;
				c.showAllReplies = true;
			}
			//Expand the nested comments when new reply is posted
			if(parent.level == 0)
				parent.showReplies = true;
			else if (parent.root &amp;&amp; !parent.root.showReplies)
				parent.root.showReplies = true;
		}

		c.latestReply = newComment;
		//hide sn-time-ago for 1 minute
		newComment.hideTimeAgo = true;
		$timeout(function(){
			newComment.hideTimeAgo = false;
		}, 70000);
		c.getClasses(newComment, true);
	}
	
	function numberofChildren(parent, comments){
		var commentCount = 0;
		angular.forEach(comments, function(val){
			if(val.parent_id == parent.sys_id){
				commentCount += 1 + numberofChildren(val, comments);
			}
		});
		return commentCount;
	}


	//--/

	///Edit related functions
	c.editContent = function(content, type){
		c.showModerationError = false;
		var data = {};
		c.formData = {};
		if(type == 'question'){
			data.title = c.post.title;
			c.post.description = tinyMCE.activeEditor.getContent();
			data.description = c.post.description;
			if(c.data.topicsEnabled)
				data.topics = $('.cm-content-question select#choose_topics').val();
			data.forum = $("#choose_forum").val();
			contentType = query.contentType;
			validationType = 'content';
			data.disableComments = c.post.disable_comments;
			c.formData = data;
		}
		else{
			content.text = tinyMCE.activeEditor.getContent();
			data.title = content.text;
			contentType = ' 8f0a215c6707220071b89a6617415aa7'; //answer content type id
			validationType = 'comment-edit';
			c.formData.reply = content.text;
		}

		data.imageCheck=imageCheck;
		data.imageArray=imageArrayList;

		validateForm(c.formData,validationType);
		if(!c.formValidation.pass)
		{
			watchFormFields(content,validationType);
			return;
		}

		var resourceUrl = '/contents/' + content.sys_id + '?content_type='+ contentType;
		validateAttachments().then(function(resp){
			if(resp.valid != true){
				showAttachmentError(resp.error);
				if(type == 'question') {
					$timeout(function(){
						$anchorScroll('topOfPage');
					});
				}
				return;
			}

			var metaDesc = spCommunitySEOService.getMetaDescription(tinyMCE.activeEditor.getContent({format : 'text'}), c.data.seo_meta_descrition_length);
			if(!metaDesc) metaDesc = data.title;
			data.metaDescription = metaDesc;

			$http.put(apiBaseUrl+resourceUrl,data)
				.then(function(result){
				$timeout(function(){
					$('.cm-comment-text-detail img').addClass('community_image_fullscreen');
					$('.cm-content-body img').addClass('community_image_fullscreen');		
				});
				var contentEdited = function(editedDate, editedHideTimeAgo, editedHideTime){
					if(!editedDate){
						$timeout(function(){
							$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-content-body"]);
							$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-comment-text-detail"]);
						});
						return;
					}
					content.edited_date = editedDate;
					editedHideTimeAgo = editedHideTimeAgo || true;
					editedHideTime = editedHideTime || 60;
					if(type == 'question'){
						c.isEdited = true;
						if(editedHideTimeAgo == true){
							c.post.editedHideTimeAgo = true;
							$timeout(function(){
								c.post.editedHideTimeAgo = false;
							}, editedHideTime);
						}
					}else if(type == 'comment'){
						c.latestReply = content;
						content.hideTimeAgo = true;
						$timeout(function(){
							content.hideTimeAgo = false;
						}, 70000);
					}
					$timeout(function(){
						$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-content-body"]);
						$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-comment-text-detail"]);
					});
				};
				if(result.status == 202){
					if (result.data.result &amp;&amp; result.data.result.moderateResponse
						&amp;&amp; result.data.result.moderateResponse.filterResults) {
						var filterResults = result.data.result.moderateResponse.filterResults;
						var moderationError = [] ;
						var moderateHighlight = [];
						for (var i = 0; i &lt; filterResults.length; i ++ ) {
							moderationError.push(filterResults[i].comment);
						}
						c.showModerationError = true;
						c.moderationError = moderationError;
						$anchorScroll('topOfPage');
					}
				} else {
					var cb = function(_editedOn, isScanInProgress, attachmentError){
						var editedDate = result.data.result.data.edited_date;
						if(editedDate != '')
						{
							contentEdited(editedDate, result.data.result.data.editedHideTimeAgo, result.data.result.data.editedHideTime);
						}
						content.showEditMode	= !content.showEditMode;
						content.originalTitle = data.title;
						if(type == 'question')
						{
							content.originalDescription = data.description;
							var prevForumId = c.post.forum.sys_id;
							if(c.canEditForum){
									c.post.forum = {
										'sys_id': $('#choose_forum').val(),
										'name': c.adminOrModerationForumsWithForumIdAsKey[$('#choose_forum').val()].name
									};
							}
							
							if(c.data.topicsEnabled)
								c.post.topics = makeTopicsArray($('.cm-content-question select#choose_topics').select2('data'), 'view');
							
							
							var alertMessage = '';
							var showMailTo;
							if(result.data.result.data.content_state == 'review') {
								if(prevForumId != c.post.forum.sys_id){
									if (c.data.canEmail)
									    showMailTo = true;
									alertMessage = isScanInProgress ? c.formatMessage(c.data.msg.moveQuestionReviewSuccess_scanInProgress,[c.post.forum.name]) : c.formatMessage(c.data.msg.moveQuestionReviewSuccess,[c.post.forum.name]);
								}
								else{
									alertMessage = isScanInProgress ? c.data.msg.editQuestionReviewSuccess_scanInProgress : c.data.msg.editQuestionReviewSuccess;
								}
							}
							else {
								if(prevForumId != c.post.forum.sys_id){
									if (c.data.canEmail)
									    showMailTo = true;
									alertMessage = isScanInProgress ? c.formatMessage(c.data.msg.moveQuestionSuccess_scanInProgress,[c.post.forum.name]) : c.formatMessage(c.data.msg.moveQuestionSuccess,[c.post.forum.name]);
								}
								else{
									alertMessage = isScanInProgress ? c.data.msg.editQuestionSuccess_scanInProgress : c.data.msg.editQuestionSuccess;
								}
							}
							showPageAlert(alertMessage, 'alert-success', 'fa-check', showMailTo, false, showMailTo);
						}
						else{
							showPageAlert(isScanInProgress ? c.data.msg.editAnswerSuccess_scanInProgress : c.data.msg.editAnswerSuccess, 'alert-success', 'fa-check');
						}
						contentEdited(_editedOn);
						if(attachmentError){
							$scope.$emit('$$uiNotification', [{		
								'message': attachmentError,
								'type': 'error'}]
							);
						}
					}
					uploadAttachments(type, content, 'edit', cb, (result.data.result.data.edited_date == "" || result.data.result.data.edited_date == content.edited_date));
					if (content.original_disable_comments != content.disable_comments &amp;&amp; c.showDisableComments) {
						c.post.canReply = !content.disable_comments;
						content.original_disable_comments = content.disable_comments;
					}
					else if (c.canEditForum) {
						c.post.canReply = c.showDisableComments &amp;&amp; !c.post.disable_comments;
					}
					if (!c.showDisableComments)
						c.post.disable_comments = c.post.original_disable_comments;

					c.post.canDisableComments = c.showDisableComments;
				}
			},function(error){
				if(error.status == 503 || error.status == 429 || error.status == 401)
						showPageAlert(error.data.result.message, 'alert-danger', 'fa-exclamation-circle');
			});

		});
	}
	
	function isCommentDirty(){
		var isDirty = false;
		if(c.activeTinyMCE &amp;&amp; c.activeTinyMCE.text &amp;&amp; c.originalCommentText){
			isDirty = c.originalCommentText!=c.activeTinyMCE.text;
		}
		else if(!c.originalCommentText &amp;&amp; tinyMCE.activeEditor){
			var newComment = tinyMCE.activeEditor.getContent();
			if(newComment &amp;&amp; newComment!='')
				isDirty=true;
		}
		if(!isDirty)
			isDirty= isAttachmentDirty();

		return isDirty;
	}
	
	function isAttachmentDirty(){
		var isDirty = false;
		if(c.attachments){
			for( var idx = 0 ; idx &lt; c.attachments.length; idx++) {
				var file = c.attachments[idx];
				if (file.isDeleted || file.isNew){
					isDirty = true;
					break;
				}
			}

		}
		return isDirty;
	}

	function isFormEdited(){
		if(!c.post.showEditMode){
			return false;
		}
		if($('#choose_forum').val() != c.post.forum.sys_id){
			return true;
		}
		if(c.data.topicsEnabled){
			var choose_topics_val = $('#choose_topics').val();
			if(choose_topics_val){
				if(c.post.topics.length != choose_topics_val.length){
					return true;
				}
				for(var i=0;i&lt;c.post.topics.length;i++){
					var topic = c.post.topics[i].id;
					if(choose_topics_val.indexOf(topic)==-1){
						return true;
					}
				}
			}
			else if(c.post.topics.length != 0){
				return true;
			}
		}
		var	formEdited = false;
		for( var idx = 0 ; idx &lt; c.attachments.length; idx++) {
			var file = c.attachments[idx];
			if (file.isDeleted || file.isNew){
				formEdited = true;
				break;
			}
		}
		if (formEdited) return formEdited;
		if(c.post.originalTitle != c.post.title || $sce.valueOf(c.post.originalDescription) != $sce.valueOf(c.post.description)||(c.post.disable_comments != c.post.original_disable_comments)){
			formEdited = true;
			return formEdited;
		}
		else
			return formEdited;
	}

	c.cancelConfirm = function(content,type , redirect_url){
		if ((type!='comment' &amp;&amp; isFormEdited()) || (type!='question' &amp;&amp; isCommentDirty())){
			var modalInstance = $uibModal.open({
				animation: true,
				ariaLabelledBy: 'modal-title',
				ariaDescribedBy: 'modal-body',
				templateUrl: 'community-cancel-edit-question.html',
				controller: function($scope) {
					$scope.title = c.data.msg.discardChange;
					$scope.message = c.data.msg.editCancelMsg;
					$scope.cancel = function() { modalInstance.dismiss('cancel'); };
					$scope.confirm = function() {  modalInstance.close();c.cancelEdit(content,type,redirect_url); };
				}
			});
		}
		else{
			if(redirect_url){
				c.redirect(redirect_url);
				return;
			}
			c.cancelEdit(content,type);
		}
		$timeout(function(){
			if(type == 'question'){
				$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-content-body"]);				
			}else{
				$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-comment-text-detail"]);
			}
		});
	};

	c.redirect = function(redirect_url){
		var host =  window.location.protocol + "//"+window.location.host;
		if(redirect_url.startsWith(host)){
			var path = redirect_url.replace(host,'');
			c.redirectionConfirmed = true;
			$location.url(path);
		}
		else{
			window.location.href = redirect_url;
		}
		return;
	};

	c.cancelEdit = function(content,type , redirect_url){
		c.showModerationError = false;
		c.showWarnings = false;
		if(type == 'question')
		{
			content.title = content.originalTitle;
			content.description = content.originalDescription;
			content.disable_comments = content.original_disable_comments;
			c.showDisableComments = c.post.canDisableComments;
		}
		else if(type == 'comment' &amp;&amp; content &amp;&amp; content.text){
			content.text= c.originalCommentText;
		}
		else{
			content.text = content.originalTitle;
		}
		resetAttachments(content.attachments);
		if(redirect_url){
			c.redirect(redirect_url);
			return;
		}
		content.showEditMode = !content.showEditMode;
	}

	var currentEditableEditorId;
	c.canShowEditMode = function(content,type,index,editorId){
		setupAttachments(content.attachments);
		clearTinyMceAttachments();
		currentEditableEditorId = editorId;
		c.modalType = "edit";
		c.modalMessage = c.data.msg.editAlertMsg;
		var targetId ="actionQuestionMenu";
		if(typeof index !=undefined &amp;&amp; index&gt;=0)
			targetId = targetId+"_"+index;
		if(type == 'comment'){
			c.originalCommentText= content.text;
			if((content.comments.length &gt;0) || (content.helpful_count&gt;0)){
				c.currentContent = content;
				c.showModal('edit',c.retainFocus.bind(this,null,targetId));

			}
			else c.showEditMode(content);
		}
		else if(type == 'content'){
			if((c.comments.length &gt;0) || (c.post.upvote_count&gt;0)){
				c.currentContent = content;
				c.showModal('edit',c.retainFocus.bind(this,null,targetId));
			}
			else c.showEditMode(content);
		}
	};

	c.closeEditModal = function(){
		instance.dismiss('cancel');
	};
	
	function constructForumIdToForumObjectMap(forumList){
		c.adminOrModerationForumsWithForumIdAsKey = {};
		if(forumList){
			for(var index=0;index&lt; forumList.length; index++){
				var temp =  forumList[index];
				c.adminOrModerationForumsWithForumIdAsKey[temp.sys_id] = temp;
			}
		}
	}
	
	function populateTopicsAndAutoFillAuthorTopics(topics,originalTopics){
		if(!originalTopics){
			originalTopics = [];
		}
		$('#choose_topics').select2('val','');
		$('#choose_topics option').remove();
		var topicsArray = [];
		for(var i=0;i&lt;topics.length;i++){
			topicsArray.push(topics[i].id);
			var option = '&lt;option value='+topics[i].id+'&gt;'+topics[i].name+'&lt;/option&gt;';
			$('#choose_topics').append(option);
		}
		if(topics &amp;&amp; topics.length &gt; 0)
				$('#choose_topics').prop("disabled", false);
		else
				$('#choose_topics').prop("disabled", true);
		var preservedTopics = [];
		c.removedTopics = [];
 		for(i=0; i&lt;originalTopics.length; i++){
			var topicId = originalTopics[i].id;
			if(topicsArray.indexOf(topicId)&gt;-1){
				preservedTopics.push(originalTopics[i]);
			}
			else{
				c.removedTopics.push({
					'id': originalTopics[i].id,
					'name': originalTopics[i].name
				})
			}
		}
		$("#choose_topics").select2("data", makeTopicsArray(preservedTopics,'edit'));
		return;
	}
	
	function formatForum(node, container, query) {
			var result;
		    c.query_term = query.term;
			if(query.term==""){
				var parsedNode=c.adminOrModerationForumsWithForumIdAsKey[node.id];
				if(parsedNode.level != undefined){
					result = ('&lt;span style="display: inline-block;padding-left:' + (10 * Math.min(parsedNode.level,3)) + 'px;"&gt;' + node.text + '&lt;/span&gt;');
					$(container).attr("aria-label",node.text+', '+c.data.forumLevelsText[Math.min(parsedNode.level,3)]);
				}
				else
					result = ('&lt;span&gt;' + node.text + '&lt;/span&gt;');
			}
			else
				result = ('&lt;span style="display: inline-block;"&gt;' + node.text + '&lt;/span&gt;');
			return result;
		}
	
	function createWarning(warningMsg){
		c.showWarnings = true;
		c.warnings.push({
			'message':  warningMsg,
			'hideWarning': false
		});
		return;
	}
	
	function initializeReadOnlyForumFilter(sys_id, name){
		$timeout(function(){
			var option = '&lt;option value='+sys_id+'&gt;'+name+'&lt;/option&gt;';
			$('#choose_forum').append(option);
			$('#choose_forum').select2();
			$('#choose_forum').select2('data',{ id: sys_id, text: name});
			c.loading = false;
		});
	}

	c.showEditMode = function(content){
		c.loading = true;
		c.showModerationError = false;
		c.showWarnings = false;
		c.formValidation.showMsg = false;
		if(instance)
			instance.dismiss('cancel');
		c.canEditForum = false;
		$http.get(apiBaseUrl + '/forums?getHierarchialAdminOrModerationForums=1').then(function(data){
			if(data &amp;&amp; data.data &amp;&amp; data.data.result){
				c.loading = false;
				c.forumsWithAdminOrModerationAccess = data.data.result;
				var len = c.forumsWithAdminOrModerationAccess.length;
				for( var i=0; i&lt; len; i++){
					if(c.post.forum.sys_id == c.forumsWithAdminOrModerationAccess[i].sys_id){
						c.canEditForum = true;
						break;
					}
				}
				if(c.canEditForum){
					c.canEditForum = (len != 1);
				}
				if(c.canEditForum){
					constructForumIdToForumObjectMap(c.forumsWithAdminOrModerationAccess);

					for(var i=0;i&lt;len;i++){
						var option = '&lt;option value='+c.forumsWithAdminOrModerationAccess[i].sys_id+'&gt;'+c.forumsWithAdminOrModerationAccess[i].name+'&lt;/option&gt;';
						$('#choose_forum').append(option);
					}
					$('#choose_forum').select2({
						minimumResultsForSearch: 10,
						formatResult: formatForum
					});

					$('#choose_forum').select2('data',{ id: c.post.forum.sys_id, text: c.post.forum.name});
					var input = {};
					input.getWritableForumIdsAndAuthorUserId = true;
					input.authorCommunityProfileId = c.post.userAvatarObject.userId;
					c.server.get(input).then(function(r){
						c.contentWritableForums = r.data.contentWritableForums;
						c.writableForumIds = [];
						angular.forEach(c.contentWritableForums,function(val){
							c.writableForumIds.push(val.id);
						});
						c.authorUserId = r.data.authorUserId;
					});
					$('#choose_forum').off("change");
					var previous;
					$('#choose_forum').on("change", function (e) {
						c.showDisableComments = c.post.canDisableComments;
						c.showWarnings = false;
						c.warnings = [];
						if(c.data.topicsEnabled){
							c.forumTopics = c.adminOrModerationForumsWithForumIdAsKey[e.val].topics;
							populateTopicsAndAutoFillAuthorTopics(c.forumTopics,c.post.topics);
						}
						if(c.writableForumIds.indexOf(e.val) == -1){
							c.formValidationError = c.data.msg.questionContentTypeNotPresent;
							c.formValidation.pass = false;
							c.formValidation.showMsg = true;
							$scope.$evalAsync(function(){
								$anchorScroll('topOfPage');
							});
						}
						else{
							c.formValidation.pass = true;
							c.loading = true;
							if(c.data.topicsEnabled){
								if(c.removedTopics.length &gt; 0){
									var removedTopicsNames = [];
									for(var i=0; i &lt; c.removedTopics.length; i++){
										removedTopicsNames.push(c.removedTopics[i].name)
									}
									createWarning(c.formatMessage(c.data.msg.topicsRemovedWarning, [removedTopicsNames.join(", ")]));
								}
							}
							if(e.val != c.post.forum.sys_id){
								createWarning(c.data.msg.userPermissionsWarning);
								var input={};
								input.getAuthorAccessOnTargetForum = true;
								input.authorCommunityProfileId = c.post.userAvatarObject.userId;
								input.forum = e.val;
								input.authorUserId = c.authorUserId;
								input.checkUserAccessToPostComment = true;
								c.server.get(input).then(function(r){
									c.loading = false;
									c.showDisableComments = r.data.hasAccessToPostComent;	
									if(!(r.data.forumPerms &amp;&amp; r.data.forumPerms.content_access &amp;&amp; r.data.forumPerms.content_access[query.contentType] &amp;&amp; r.data.forumPerms.content_access[query.contentType].access &amp;&amp; (r.data.forumPerms.content_access[query.contentType].access.indexOf("content_read")&gt;-1))){
										createWarning(c.formatMessage(c.data.msg.authorLosingAccessWarning, [c.post.userAvatarObject.name]));
									}
								});
							}
							else{
								c.loading = false;
								$scope.$digest();
							}
							c.formValidation.showMsg = false;
						}
					});
				}
				else{
					initializeReadOnlyForumFilter(c.post.forum.sys_id, c.post.forum.name);
				}
			}
			else{
				initializeReadOnlyForumFilter(c.post.forum.sys_id, c.post.forum.name);
			}
		});
		
		if(c.data.topicsEnabled){
			$http.get(apiBaseUrl + '/forums/'+c.post.forum.sys_id+'/topics')
				.then(function(data){
				c.forumTopics = data.data.result.data;
				populateTopicsAndAutoFillAuthorTopics(c.forumTopics);
				prepopulateTopics();
			});
		}
		
		
		
		
		content.showReplyBox = false;
		//Show only one edit box at a time
		c.activeTinyMCE.showEditMode = false;
		c.activeTinyMCE.showReplyBox = false;
		c.post.showReplyBox = false;
		c.post.showReplyBox2 = false;
		c.acceptedAnswer.showReplyBox = false;
		c.post.showEditMode = false;
		content.showEditMode	= true;
		c.activeTinyMCE = content;
		$timeout(function(){
			if(!c.data.isAccessibilityEnabled){
						$('input[id="title"]').focus();
					}
			if(c.data.topicsEnabled){
				$(function () {
					$.extend($.fn.select2.defaults, {
						formatSelectionTooBig: function (limit) {
							return c.data.msg.topicLimitExceededMsg;
						}
					});
				});
				$('.cm-content-question select#choose_topics')
					.select2({
					minimumResultsForSearch: 10,
					maximumSelectionSize : c.data.maxTopicLimit
				});
				$('.select2-choices').removeAttr('role');
				prepopulateTopics();
				$('#choose_topics_div').on('keydown',function(e){
					if($('#choose_topics').val() &amp;&amp; c.data.maxTopicLimit&lt;=$('#choose_topics').val().length){
						if((e.code || e.which) != 9){
							e.preventDefault();
						}
					}
				});
			}
			$timeout(function(){if(currentEditableEditorId)
				focusOnEditor(currentEditableEditorId);},100);
			$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-comment-text-detail"]);
			$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-content-body"]);
		});
	}

	function prepopulateTopics(){
		$timeout(function(){
			if(c.post.topics)
			{
				$("#choose_topics").select2("data", makeTopicsArray(c.post.topics,'edit'));
			}

		});
	}

	function makeTopicsArray(rawTopics,type){
		var topics = [];
		angular.forEach(rawTopics,function(val){
			var obj = {};
			obj.id = val.id;
			/*For prepopulating topics in edit, we need text attribute,
			  where as in view mode, we need name attribute */
			if(type == 'view')
				obj.name = val.text;
			else if(type == 'edit')
				obj.text = val.name;

			topics.push(obj);
		});
		return topics;
	}
	//--/

	c.retainFocus = function(element, id){
		if(!element) element = $("#"+id);
		if(element)element.focus();
	};

	///Delete related functions
	c.canDeleteContent = function(content, type,index){
		if(type == 'comment'){
			if((content.comments.length &gt;0) || (content.helpful_count&gt;0)){
				c.modalMessage = c.data.msg.deleteAlertMsg;
			}
			else{
				c.modalMessage = c.data.msg.deleteAlertNoFeedbackMsg;
			}
			//content.parentComment= getParentComment(content, index);
			content.parentComment = content.super_cm;
		}
		else if(type == 'content'){
			if((c.comments.length &gt;0) || (c.post.upvote_count&gt;0)){
				c.modalMessage = c.data.msg.deleteAlertMsg;
			}
			else{
				c.modalMessage = c.data.msg.deleteAlertNoFeedbackMsg;
			}
		}
		c.modalType = "delete";
		c.contentType = type;
		c.currentContent = content;
		var targetId ="actionQuestionMenu";
		if(typeof index !=undefined &amp;&amp; index&gt;=0)
			targetId = targetId+"_"+index;
		c.showModal('delete',c.retainFocus.bind(this,null,targetId));
	};

	c.deleteContent = function(content,type){
		if(instance)
			instance.dismiss('cancel');
		if(type == 'content')
			content_type = query.contentType;
		else if(type == 'comment')
			content_type = '8f0a215c6707220071b89a6617415aa7';
		resourceUrl = '/contents/' + content.sys_id + '?content_type='+ content_type;
		$http({method: 'DELETE', url: apiBaseUrl+resourceUrl}).then(function(response){
			if(type == 'content'){
				var input={};
				input.message = c.data.msg.questionDeleteSuccess.replace('{0}', c.post.title);
				c.server.get(input).then(function(data){
					$window.location.href = '?id=community_home';
				});
			}
			else{
				c.post.comment_count = response.data.result.root_count;
				removeComment(content);
				showPageAlert(c.data.msg.answerDeleteSuccess, 'alert-danger', 'fa-check');
				//addMoreClasses();
			}
		});
	}

	function getParentComment(cmArray, parentId){
		for(var i=0; i &lt; cmArray.length; i++){
			if(cmArray[i] &amp;&amp; cmArray[i].sys_id == parentId ){
				newCmParent = cmArray[i];
				break;
			}
			else {
				if(cmArray[i].comments.length)
					getParentComment(cmArray[i].comments, parentId);
				if(newCmParent.sys_id)
					break;
			}
		}
	}


	function recurMarkToRemove(idx, parent) {
		var cm = parent.comments[idx];
		cm.delete_me = true; //mark to be deleted
		if (parseInt(cm.comment_count) &gt; 0) {
			parent.comments.forEach(function(ch, key) {
				if(ch.parent_id == cm.sys_id) recurMarkToRemove(key, parent);
			});
		}
	}

	function removeComment(cm) {
		var parent = cm.super_cm,
			index = parent ? findIndex(parent.comments,'sys_id',cm.sys_id) : findIndex(c.comments,'sys_id',cm.sys_id),
			actual_parent;
		if (cm.level &lt; maxCommentLevel) {
			if (parent) {
				parent.comments.splice(index, 1);
				parent.comment_count--;
			}
			else c.comments.splice(index, 1);	
		}
		else {
			//reduce parent comment count first
			actual_parent = parent.comments.find(function(val) {
				return cm.parent_id == val.sys_id;
			});
			if (actual_parent)
				actual_parent.comment_count--;
			else
				parent.comment_count--;

			//Now delete the comment
			recurMarkToRemove(index, parent);
			parent.comments = parent.comments.filter(function(cm) {
				return !cm.delete_me;
			});
		}
	}

	function findIndex(arr,attr,val){
		var res = -1;
		for (var i = 0; i &lt; arr.length ; i++) {
			if(arr[i][attr] == val) {
				res = i;
				break;
			}
		}
		return res;
	}

	//--/

	///Subscribe or Unsubscribe
	c.subscribe = function(){
		var objectType = c.queryParams.contentType;
		var objectId = c.post.sys_id;
		var resourceUrl;
		var type =  'ef7d03c467103200ace49a6617415a51';

		if(c.showFollow){
			var input = {
				type: type
			};
			resourceUrl = '/subscriptions/'+objectId+'/subscribe';
			$http.post(subscriptionBaseUrl+resourceUrl,input)
				.then(function(){
				c.showFollow = false;
				//showPageAlert(c.data.msg.questionSubscribeSuccess, 'alert-success', 'fa-check');
			});

		}else{
			resourceUrl = '/subscriptions/'+objectId+'/unsubscribe';
			$http({method: 'DELETE', url: subscriptionBaseUrl+resourceUrl})
				.then(function(){
				c.showFollow = true;
				//showPageAlert(c.data.msg.questionUnsubscribeSuccess, 'alert-info', 'fa-check');
			});
		}
		c.retainFocus(null,"actionQuestionMenu");
	};

	c.showSubscribed = function(){
		c.subscribeLabel = c.data.msg.subscribedText;
	}
	c.showUnSubscribe = function(){
		c.subscribeLabel = c.data.msg.unsubscribeText;
	}

	$scope.$watch('c.showFollow', function(){
		c.toggleSubscribeText = c.showFollow ? c.data.msg.subscribeText : c.data.msg.unsubscribeText;
		c.subscribeLabel = c.showFollow ? c.data.msg.subscribeText : c.data.msg.subscribedText;
	});
	//--/

	$scope.$on('$locationChangeStart', function(event, next, current) {
		if(!c.redirectionConfirmed &amp;&amp; ( c.post.showEditMode ? (isFormEdited() &amp;&amp; !c.cancelConfirm(c.post,'question' ,next)) : (isCommentDirty() &amp;&amp; !c.cancelConfirm(c.post,'comment' ,next))) ) {
			event.preventDefault();
		}
	});

	function refreshData(){
		var resourceUrl = '/contents/' + query.contentId + '?content_type='+ query.contentType;
		$http.get(apiBaseUrl+resourceUrl)
			.then(successCallback, errorCallback);
	}

	///Content Feedback
	c.postFeedback = function (action,content,$index,isUndoActivity){
		var focusTargetId;
		if(content.postingFeedback &amp;&amp; content.postingFeedback[action]){
			return;
		}
		if(!content.postingFeedback){
			content.postingFeedback = {};
		}
		content.postingFeedback[action] = true; 
		var successCallback = function(){
			if (action == 'upvote' &amp;&amp; !isUndoActivity){
				if(content.feedbackProfiles.length == content.upvote_count){
					content.feedbackProfiles.unshift(c.user);
				}
				content.upvote_count++;
				c.announceMessage("upvote",content.upvote_count);
				content.activities_allowed.upvote = false;
				content.activities_allowed.downvote = true;
				focusTargetId = "downVoteEle";
			}
			else if (action == 'upvote' &amp;&amp; isUndoActivity){
				if(content.feedbackProfiles.length == content.upvote_count){
					index = findIndex(content.feedbackProfiles,'userId',c.user.userId);
					content.feedbackProfiles.splice(index,1);
				}
				content.upvote_count--;
				c.announceMessage("upvote",content.upvote_count);
				content.activities_allowed.upvote = true;
				content.activities_allowed.downvote = false;
				focusTargetId = "upVoteEle";
			}
			else if(action == 'helpful' &amp;&amp; !isUndoActivity){
				if(content.feedbackProfiles.length == content.helpful_count){
					content.feedbackProfiles.unshift(c.user);
				}
				content.helpful_count++;
				c.announceMessage("helpful",content.helpful_count);
				content.activities_allowed.helpful = false;
				content.activities_allowed.unhelpful = true;
				focusTargetId = "unhelpful";
				if(typeof $index != undefined &amp;&amp; $index&gt;=0)
					focusTargetId = focusTargetId+"_"+$index;
			}
			else if(action == 'helpful' &amp;&amp; isUndoActivity){
				if(content.feedbackProfiles.length == content.helpful_count){
					index = findIndex(content.feedbackProfiles,'userId',c.user.userId);
					content.feedbackProfiles.splice(index,1);
				}
				content.helpful_count--;
				c.announceMessage("helpful",content.helpful_count);
				content.activities_allowed.helpful = true;
				content.activities_allowed.unhelpful = false;
				focusTargetId = "helpful";
				if(typeof $index != undefined &amp;&amp; $index&gt;=0)
					focusTargetId = focusTargetId+"_"+$index;
			}
			else if(action == 'bookmark' &amp;&amp; !isUndoActivity){
				content.activities_allowed.bookmark = false;
			}
			else if(action == 'bookmark' &amp;&amp; isUndoActivity){
				content.activities_allowed.bookmark = true;
			}
			content.postingFeedback[action] = false;
			$("#"+focusTargetId).focus();
		}
		var errorCallback = function(data){
			content.postingFeedback[action] = false;
			$("#"+focusTargetId).focus();
			if(data.status == 503 || data.status == 429)
				showPageAlert(data.data.result.message, 'alert-danger', 'fa-exclamation-circle');
		}
		var resourceUrl = '/activities/' + content.sys_id + '?verb=' + action+'&amp;isUndo='+(isUndoActivity==true);
		$http.post(apiBaseUrl+resourceUrl).then(successCallback,errorCallback);
	};

	//--/
	///Report Abuse
	c.flagContent = function(content,type,index){

		if(!c.moderationReasonsFetched){
			c.server.get({'moderation': true, 'contentId':query.contentId, 'type': 'content'}).then(function(r){
				var reasonsObj = r.data.moderationReasons;
				var reasons = reasonsObj ? reasonsObj.user_flag_reason_list+'' : '';
				if (reasons &amp;&amp; reasons.length &gt; 0){
					c.choices = reasons.split('|');
					c.userSelection = c.choices[0];
					c.moderationReasonsFetched = true;
				} else {
					console.log('No reason is provided');
				}
			});
		}
		c.currentPost = content;
		c.currentType = type;

		var targetId ="actionQuestionMenu";
		if(typeof index !=undefined &amp;&amp; index&gt;=0)
			targetId = targetId+"_"+index;
		c.showModal(type,c.retainFocus.bind(this, null,targetId));
	};

	c.getFeedbackProfiles = function(content, verb){
		if(c.feedbackPopupOpened){
			return;
		}
		c.feedbackPopupOpened =  true;
		var summaryField = verb + '_count';
		c.feedbackName = '';
		$http.get(apiBaseUrl + '/contents/' + content.sys_id + '/feedback/profiles?verb=' + verb)
			.then(function(response) {
			content.feedbackProfiles = response.data.result;
			content[summaryField] = content.feedbackProfiles.length;
			c.feedbackModal(content, verb);
		},
				  function(error) {
			console.log(error);
			c.feedbackPopupOpened = false;
		}
				 );
	};

	c.feedbackModal = function(content, verb){
		c.feedbackMembers = content.feedbackProfiles;
		if(verb == 'upvote')
		{
			c.feedbackName = c.data.msg.upvotes;
		}
		else if(verb == 'helpful')
		{
			c.feedbackName = c.data.msg.helpful;
		}
		if(c.feedbackMembers.length &gt;0)
			c.showModal(verb);
		else
			c.feedbackPopupOpened = false;
	}

	var instance;
	c.showModal = function (type,callback) {
		var templateUrl,size;
		if(type == 'content' || type == 'answer')
		{
			templateUrl = 'community-report-modal.html';
			size = 'md';
		}
		else if(type == 'helpful' || type == 'upvote')
		{
			templateUrl = 'community-question-feedback.html';
			size = 'sm';
		}
		else if(type == 'edit' || type == 'delete'){
			templateUrl = 'community-edit-question.html';
			size = 'md';
		}else if (type == 'contentFeature') {
            templateUrl = 'community-feature-content-question.html';
            size = 'md';
        }

		try{
			var options = {
				size: size,
				scope: $scope,
				backdrop: 'static',
				keyboard: true,
				templateUrl: templateUrl
			};

			instance = $uibModal.open(options);
			instance.closed.then(function(){
				c.feedbackPopupOpened = false;
			});
			instance.result.then(callback,callback);

		}catch(err){
			console.log(err);
		}
	};

	c.cancel = function () {
		if (c.postReportResult == 'redirect') {
			var portalName = $rootScope.portal.url_suffix;
			$window.location.href = '/' + portalName + '?id=community_home';
		} else if (c.postReportResult == 'refresh') {
			instance.dismiss('cancel');
			c.reported = false;
			c.userSelection = c.choices[0];
			c.userText = '';
		} else {
			c.reported = false;
			c.userSelection = c.choices[0];
			c.userText = '';
			instance.dismiss('cancel');
		}
	};

	c.closeFeedbackModal = function(){
		c.feedbackPopupOpened = false;
		instance.dismiss('cancel');
	};

	c.submitContent = function(){
		c.postModerationTask(c.currentPost,c.currentType);
	};

	c.postModerationTask = function(currentPost, type){
		var input = {
			reason: c.userText,
			select: c.userSelection,
			type: 'content',
			documentId: String(currentPost.sys_id)
		};

		var postModTaskUrl = '/moderation/postModerationTask';
		$http.post(apiBaseUrl+postModTaskUrl,input)
			.then(function(data){
			c.userSelection = c.choices[0];
			c.userText = '';
			c.allowAbuseReporting = false;
			c.reported = true;
			currentPost.canModerate = false;
			if(type != 'content' &amp;&amp; !currentPost.canEdit) {
				currentPost.noActionAvailable = true;
			}
			if (data.data &amp;&amp; data.data.result &amp;&amp; data.data.result.data &amp;&amp;
				!data.data.result.data.hide) {
				c.postReportResult = 'refresh';
				c.feedback = " Your abuse report has been received and will be reviewed shortly. Thank you.";
			} else {
				if (type == 'content') {
					c.postReportResult = 'redirect';
					c.feedback = " Your abuse report has been received and this post will be hidden. You will be redirected to community home page. Thank you.";
				} else {
					//taken care of 'marked as correct' answer
					if (currentPost &amp;&amp; currentPost.correct == 'true') {
						//now hide the correct answer if needed
						currentPost.correct = 'false';
						c.correctComment = null;
						c.accepted_answer = null;
						c.showAcceptedPannel = false;
						c.answered = false;
					}

					c.postReportResult = 'refresh';
					c.feedback = " Your abuse report has been received and this post will be hidden.";
				}
			}
			c.moderationSubmitted = true;
			$('.modal-header .close').focus();

		}, function(error){
			console.log(error);
		});
	};
	//--/

	///Comment Data Flags Setting, Manipulations
	function commentDataManipulations(data){
		var nestedRepliesPresent = false;
		c.comments = data.comments;
		var i = 0;
		angular.forEach(c.comments, function(value){
			value.comment_count = parseInt(value.comment_count);
			if(value.comment_count &gt; 0)
				nestedRepliesPresent = true;
			manipulateAnswerObject(value);
			i++;
		});
		if (nestedRepliesPresent)
			c.hideShowAllReplyBtn = false;
		if(c.showAllReplies)
			showAllNestedReplies(true);
	}

	function manipulateAnswerObject(value, cb){
		value.feedbackProfiles = [];
		value.originalTitle = value.text;
		if(value.correct == 'true'){
			c.correctComment = value;
			c.accepted_answer = value;
			c.showAcceptedPannel = Object.keys(c.accepted_answer).length &gt; 0;
		}
		value.comment_count = parseInt(value.comment_count);
		//value.canShowMenu = (value.canModerate || value.canEdit) &amp;&amp; c.data.isLoggedIn;
		value.showAnswer = true;
		if(value.replyInAnchorReplyPath)
			value.viewNestedAnswerLink = false;
		value.userAvatarObject.profileLink = getProfileLink(value.userAvatarObject.userId);
		if(value.replied_to)
			value.replied_to.profileLink = getProfileLink(value.replied_to.userId);
		if(cb)cb();
	}

	function showAllNestedReplies(val) {
		c.comments.forEach(function(cm) {
			cm.showReplies = val;
		});
	}

	c.showNestedReplies = function(comment) {
		if(!comment) {
			c.showAllReplies = !c.showAllReplies;
			showAllNestedReplies(c.showAllReplies);
		}
		else 
			comment.showReplies = !comment.showReplies;	
	};

	c.showReplyBox = function(content,state,replyBoxNumber,editorId){
		c.showModerationError = false;
		resetAttachments();
		clearTinyMceAttachments();
		//Clear tinyMCE contents
		c.newReplyText = "";
		$rootScope.$broadcast('clearContent',[]);
		content.isDirty = true;
		c.activeTinyMCE.showReplyBox = false;
		c.activeTinyMCE.showEditMode = false;
		if(c.accepted_answer)
			c.acceptedAnswer.showReplyBox = false;
		c.post.showReplyBox = false;
		c.post.showReplyBox2 = false;
		if(replyBoxNumber == 2){
			content.showReplyBox2 = state;
		}
		else content.showReplyBox = state;
		c.activeTinyMCE = content;
		c.formValidation.showMsg = false;
		removeHighlightErrors('.cm-content-question .mce-tinymce.mce-container.mce-panel');
		$('.cm-content-question .mce-container.mce-panel iframe').contents().find('#tinymce').attr('aria-invalid', false);
		if(editorId)focusOnEditor(editorId);
		$timeout(function(){ $scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-comment-text-detail"]); });
	}

	var focusOnEditor = function (id){
		var counter = 0,
			duration = 100,
			focusEditorInterval = $interval(function(){
				counter = counter + duration;
				var selector = "#"+id+" .mce-container iframe",
					editorFrame = $(selector)[0];
				if(editorFrame){
					var currentEditorId = editorFrame.getAttribute("id");
					if(currentEditorId){
						var currentEditor;
						for (var i = 0; i &lt; tinyMCE.editors.length; i++) {
							if(tinyMCE.editors[i].id+"_ifr" == currentEditorId){
								currentEditor = tinyMCE.editors[i];
								break;
							}
						}
						if(currentEditor)currentEditor.focus();
					}
					$interval.cancel(focusEditorInterval); //kill the interval
				}
				else {
					if(counter &gt; 30000)
						$interval.cancel(focusEditorInterval); //kill it after 1/2 a minute
				}
			},duration);
	};

	c.getClasses = function(cm, immediate) {
		var classes = '';
		classes = (cm.level % 2 != 0 ? 'cm-bg-dark':'cm-bg-light');		
		classes += (cm.level == 0 ? ' cm-level0': '');
		if ($scope.isMobileView())
			classes += ' mobile-view';
		if ($('#answer_'+cm.sys_id).parent().next('.cm-comment-parent').length)
			classes += ' cm-b-b-none cm-has-next';
		else if (!$('#answer_'+cm.sys_id).parent().closest('.cm-comment-body-inner').hasClass('cm-has-next'))
			classes += ' cm-b-b-none';

		if (!cm.comments.length &amp;&amp; $('#answer_'+cm.sys_id).hasClass('cm-has-next'))
			classes = classes.replace(/ cm-b-b-none/g,'');

		if ($('#answer_'+cm.sys_id).parent().prev('.cm-comment-parent').length)
			classes += ' cm-b-t-none';

		if(immediate) { //Things to be done immediately. Dont wait for digest cycle.
			$timeout(function(){
				//1. Put border on the comment above
				if(cm.level == 1) {
					var el = $('#answer_'+cm.sys_id).parent().prev('.cm-comment-parent');
					if (!(el.find('.cm-comment-parent').length))
						el.children('.cm-comment-body-inner').removeClass('cm-b-b-none');						
				}
			});
		}

		return classes;
	};

	c.markCorrect = function(comment, mark,index){
		var targetId;
		if(mark == 'true')
		{
			mark= false;
			targetId = "markans_"+index;
		}
		else if(mark == 'false')
		{
			mark = true;
			targetId = "undomarkans_"+index;
		}
		var retainMarkAnswerFocus = function(){
			if($("#"+targetId))
				$("#"+targetId).focus();
		}
		if (c.accepted_answer &amp;&amp; c.accepted_answer.sys_id)
			c.accepted_answer.correct = 'false';
		c.accepted_answer = comment;
		query.answerId = comment.sys_id;
		if(mark){
			query.prevCorrectId = c.correctComment ? c.correctComment.sys_id:null;
		}
		var resourceUrl = '/contents/'+ query.contentId+ '/answers/' + query.answerId + '?mark=' + mark;
		$http.put(apiBaseUrl+resourceUrl)
			.then(function(data){
			if(mark){
				angular.forEach(c.comments, function(value){
					value.correct = 'false';
				});
				comment.correct = 'true';
				c.correctComment = comment;
				c.showAcceptedPannel = true;
				c.answered = true;
			}else{
				comment.correct = 'false';
				c.correctComment = null;
				c.accepted_answer = null;
				c.showAcceptedPannel = false;
				c.answered = false;
			}
			comment.canEdit = data.data.result.data.canEdit;
		});
	};
	//--/

	c.formatMessage = function(messageText, params) {
		return messageText.replace(/\{(\d+)\}/g, function() {
			return params[arguments[1]];
		});
	};

	c.sanitizeVideo = function(comment){
		if(comment.text &amp;&amp; (comment.text).indexOf('id="video_tinymce"') &gt; 0)
			comment.text = comment.text.replace('&lt;iframe id="video_tinymce" style="width: 100%;','&lt;iframe id="video_tinymce" style="width: 225%;');
		return comment.text;
	};

	function getProfileLink(profileId) {
		if(profileId)
			return $rootScope.portal.url_suffix + "?id=community_user_profile&amp;user=" + profileId;
		else return;
	}

	/*  *** Attachments *** */

	$scope.$on('sp.community.attachments.notification.alert',function(e,data){
		if(!isValidBroadcast(data.widget)) return;
		var icon = 'fa-check';
		if(data.icon)
			icon = data.icon;
		showPageAlert(data.message, data.type, icon);
	});

	c.attachments =[];

	var isValidBroadcast = function(widgetId){
		if(!widgetId || widgetId &amp;&amp; widgetId == c.widget.sys_id) return true;
		return false;
	};

	var resetAttachments = function(attachments){
		c.attachments =[];
		c.attachmentsCount = 0;
		c.attachmentsAdded = false;
		c.formError = c.data.msg.requiredFieldsError;
		if(attachments &amp;&amp; attachments.length &gt;0)
			$rootScope.$broadcast("sp.community.attachments.cancel", {'attachments': attachments});
		getFileStates(c.post);
	};

	var setupAttachments = function(attachments){
		resetAttachments();
		if(attachments &amp;&amp; attachments.length &gt; 0){
			c.attachments = [].concat(attachments);
			var i=0;
			angular.forEach(c.attachments, function(file){
				if(file.isDeleted != true)i++;
			});
			c.attachmentsCount = i;
		}
	};

	$rootScope.$on('sp.community.attachments.added', function(event,data) {
		if(!isValidBroadcast(data.widget)) return;
		c.attachments = data.attachments;
		c.attachmentsCount = data.attachmentsCount;
		c.attachmentsAdded = true;
		c.formValidation.showMsg = c.formValidation.showMsg &amp;&amp; c.formValidationError == c.data.msg.requiredFieldsError;
		c.formValidationError = c.data.msg.requiredFieldsError;
	});

	function uploadAttachments(type,content, uploadAction, cb, createActivity){
		if(!c.attachments.length || !type || !content || !content.sys_id){
			if(cb)cb();
			return;
		}
		var table;
		if(type == 'question' ) table = 'kb_social_qa_question';
		else table = 'kb_social_qa_answer';

		$rootScope.$broadcast("sp.community.attachments.upload", {'table': table, 'contentSysId': content.sys_id,
           'uploadAction': uploadAction, 'createActivity': createActivity, 'attachments': c.attachments}, function(attachments, edited_on, isScanInProgress, attachmentError){
			if(attachments)
				content.attachments = [].concat(attachments);
			resetAttachments();
			if(cb)cb(edited_on, isScanInProgress, attachmentError);
		});
	}

	function validateAttachments(attachments){
		var deferred = $q.defer();
		$timeout(function(){
			$rootScope.$broadcast("sp.community.attachments.validate", {"attachments": attachments || c.attachments}, function(valid, fileValidationError){
				deferred.resolve({'valid': valid, 'error': fileValidationError});
			});
		});
		return deferred.promise;
	}

	function showAttachmentError(err){
		var msg = c.data.msg.requiredFieldsError;
		if(err.size &gt; 0) msg = err.msgs.size;
		else if(err.ext &gt; 0) msg = err.msgs.ext;
		else if(err.content &gt; 0) msg = err.msgs.content;
		else if(err.user &gt; 0) msg = err.msgs.user;
		else if(err.storage &gt; 0) msg = err.msgs.storage;
		else if(err.error &gt; 0) msg = err.msgs.error;
		else if(err.infected &gt; 0) msg = err.msgs.infected;

		c.formValidationError = msg;
		c.formValidation.showMsg = true;
	}

	function getFileStates(content){
		if (!content)
			return;
		var callback = function(hasInfectedFile, hasPendingFile, errMsg) {
			content.hasInfectedFile = hasInfectedFile;
			content.fileErrMsg = errMsg;
			content.hasPendingFile = hasPendingFile;
		};
		$rootScope.$broadcast("sp.community.attachments.getFileStates", content.attachments, callback)
	}

	$timeout(function(){
		getFileStates(c.post);
	});
	$scope.$on("sp.community.attachments.foundInfectedFile", getFileStates.bind(this,c.post));
	//--/

	// Harvesting content
	c.harvestContent = function(content, type){
		if(!type || !content || !content.sys_id) return;
		var _resourceUrl = "/contents/harvest/"+content.sys_id;
		$http.post(apiBaseUrl+_resourceUrl,{})
			.then(function(resp){
			if(resp.status == 201 &amp;&amp; resp.data &amp;&amp; resp.data.result &amp;&amp; resp.data.result.status == 201){
				$rootScope.$broadcast('sp.community.flatlist.refresh');
				content.canHarvest = false;
				var result = resp.data.result;
				if(result.data.harvestRecId){
					var hrf = "/"+c.data.portal+"?id=community_harvest_knowledge&amp;sys_id="+result.data.harvestRecId;
					$window.location.href = hrf;
				} else {
					showPageAlert(c.data.msg.harvestSuccess, 'alert-success', 'fa-check', true);
				}
			}
		}, function(error){
			if(error.status == 403){
				showPageAlert(c.data.msg.errorMessage_harvest_403, 'alert-danger', 'fa-exclamation-circle', true);
			}
		});
	};
	$timeout(function(){
		$('.cm-content-body img').addClass('community_image_fullscreen');
		$('.cm-content-body img').attr('alt', 'image');
		$scope.$broadcast("sp.community.question.tinymce.table.fixcss", [".cm-content-body"]);
	});
	//get menu items for question and answers
	c.getMenuItems = function(content, type) {
		c.showPageAlert = false;
		if (content.menuItemsFetched) {
			if (!type || type != 'Question') {
				content.canEdit = content.originalCanEdit &amp;&amp; !c.post.original_disable_comments;
				content.noActionAvailable = !(content.canEdit || content.canModerate);
			}
			return;
		}
		content.showDropDown = false;
		var resourceUrl = '/contents/'+ content.sys_id + "/menuItems";
		$http.get(apiBaseUrl+resourceUrl)
			.then(function(response){
			if(response &amp;&amp; response.data &amp;&amp; response.data.result &amp;&amp; response.data.result.data) {
				var result = response.data.result.data;
				content.canEdit = result.canEdit;
				content.canModerate = result.canModerate;
				content.canBookmark = result.canBookmark;
				if(content.canBookmark &amp;&amp; result.activities_allowed)
					content.activities_allowed.bookmark = result.activities_allowed.bookmark;
				if(type == 'Question') {
					content.noActionAvailable = !(content.canEdit || content.canModerate || content.canBookmark || c.isContentAuthor || (c.accepted_answer &amp;&amp; c.accepted_answer.canHarvest)); 
				}
				else {
					content.originalCanEdit = content.canEdit;
					content.canEdit = content.originalCanEdit &amp;&amp; !c.post.original_disable_comments;
					content.noActionAvailable = !(content.canEdit || content.canModerate);
				}
				content.showDropDown = true;
				content.menuItemsFetched = true;
			}
		}, function(error){
			content.noActionAvailable = true;
			content.showDropDown = true;
			console.log(error);
		});
	};

	//for screen reader
	c.announceMessage = function(feedbackType,count) {
		if(feedbackType == "helpful")
			c.aria_message = count == 0 ? c.data.msg.helpfulCountZeroText : (count == 1 ? c.data.msg.helpfulCountText : (c.formatMessage(c.data.msg.helpfulsCountText, [count])))

			else if(feedbackType == "upvote")
				c.aria_message = c.post.upvote_count == 0 ? c.data.msg.upvoteCountZeroText : (c.post.upvote_count == 1 ? c.data.msg.upvoteCountText : (c.formatMessage(c.data.msg.upvotesCountText, [c.post.upvote_count]))) 
				document.getElementById('screen-reader-tag-id').innerHTML = '';
		document.getElementById('screen-reader-tag-id').innerHTML += '&lt;p class="sr-only"&gt;'+ c.aria_message+'&lt;/p&gt;'

	}

	c.moveFocus = function(curr) {
		if(curr == 'submit' || curr == 'cancel')
			c.current = curr;
		else if(curr == 'end') {
			var previous = c.current;
			if(previous == 'submit' || c.moderationSubmitted)
				$('.modal-header .close').focus();
			else if(previous == 'cancel'){
				$('.modal-body .submit').focus();
			}
		}
	}


	c.imgModalClose = function(){
		c.imageInstance.close();
	}
	
	c.prePolulateFeaturedContentData = function() {
		c.show_forums_feature = false;
		var resourceUrl = apiBaseUrl + '/featuredContent/forums/' + c.post.content_sys_id;
		$http({
			method: 'GET',
			url: resourceUrl
		}).then(function(r) {
			var forumData = [];
			var preData=[];
			c.show_homePage = false;
			if(r.data&amp;&amp;r.data.result)
			 preData= r.data.result.featuredContent;
			var len=preData.length;
			for (var i = 0; i &lt; len; i++) {
				var preDat = preData[i];
				if (preDat.global == "true") {
					c.show_homePage = true;
					c.showHomePageError = true;
				} else {
					forumData.push({
						id: preDat.forum_id,
						text: c.adminOrModerationForumsWithForumIdAsKey[preDat.forum_id].name
					});
					if (preDat.forum_id != c.data.question.data[0].forum.sys_id)
						c.isNotCurrentMemberShipForum = true;
				}
				c.noOfDays=parseInt(preDat.days);
			}
			if (forumData.length &gt; 0)
				c.show_forums_feature = true;
			$('#choose_forums').select2('data', forumData);
			 c.featureContentLoading=false;
		}, function(error) {
			console.log(error);
		});
	}
	c.featureContent = function(content, type) {
		c.showFeatureContentAlert=false;
		c.featureContentLoading=true;
		if(c.data.isFeaturedContent)
			c.featureContentAlert=c.data.msg.featureContentEditAlert;
		else
			c.featureContentAlert=c.data.msg.featureContentMarkAlert;
		c.errorForums=[];
		c.isNotCurrentMemberShipForum=false;
		c.show_forums_feature=false;
		c.show_homePage=false;
		c.showpostFeatureContentError = false;
		
		c.showModal(type, c.retainFocus.bind(this, null, "actionMenu"));
		var forum_id = c.data.question.data[0].forum.sys_id;
		var input = {};
		input.getWritableForumIdsAndAuthorUserId = true;
		input.authorCommunityProfileId = c.post.userAvatarObject.userId;
		c.server.get(input).then(function(r) {
			c.contentWritableForums = r.data.contentWritableForums;
			c.writableForumIds = [];
			angular.forEach(c.contentWritableForums, function(val) {
				c.writableForumIds.push(val.id);
			});
			c.authorUserId = r.data.authorUserId;
		});
		$timeout(function() {
			$('#choose_forums').select2();
			$http.get(apiBaseUrl + '/forums?getHierarchialAdminOrModerationForums=1').then(function(data) {
				if (data &amp;&amp; data.data &amp;&amp; data.data.result) {
					c.loading = false;
					c.forumsWithAdminOrModerationAccess = data.data.result;
					constructForumIdToForumObjectMap(c.forumsWithAdminOrModerationAccess);
					var len = c.forumsWithAdminOrModerationAccess.length;
					for (var i = 0; i &lt; len; i++) {
						var option = '&lt;option value=' + c.forumsWithAdminOrModerationAccess[i].sys_id + '&gt;' + c.forumsWithAdminOrModerationAccess[i].name + '&lt;/option&gt;';
						$('#choose_forums').append(option);
					}
					$('#choose_forums').select2({
						minimumResultsForSearch: 10,
						formatResult: formatForum,
	                    closeOnSelect: false,
	                    dropdownCssClass: 'select2-feature-content'
					});
					$('#choose_forums').select2('data', [{
						id: forum_id,
						text: c.adminOrModerationForumsWithForumIdAsKey[forum_id].name
					}]);
					if (c.data.isFeaturedContent)
						c.prePolulateFeaturedContentData();
					else
						c.featureContentLoading=false;
				}
			});
			c.noOfDays=parseInt(c.data.defaultDaysFeatureContent);
			$('#choose_forums').on('change', function(e) {
				var fData = e.val;
				 c.isNotCurrentMemberShipForum = false;
				 c.showpostFeatureContentError = false;
				c.errorForums = [];
				for (i = 0; i &lt; fData.length; i++) {
					if (fData[i] != forum_id)
						c.isNotCurrentMemberShipForum = true;
					if (c.writableForumIds.indexOf(fData[i]) == -1) {
						c.showpostFeatureContentError = true;
						c.errorForums.push({id:fData[i],name:c.adminOrModerationForumsWithForumIdAsKey[fData[i]].name});
					}
				}	           
			});	
			$('#choose_forums').on("select2-loaded", function(e, q) {
				if (c.query_term == '') {
					$timeout(function() {
						$('.select2-feature-content .select2-selected').css('cssText', 'display:block !important;pointer-events:none;background-color:#e8eaed;');
						$('.select2-feature-content .select2-selected .select2-result-label').each(function() {
							var ariaLabel = $(this).attr('aria-label');
							$(this).attr('aria-label', ariaLabel + ' : It is selected');
						});
					});
				}
			});
			$('#checkboxFC').change(function() {
				c.showHomePageError = true;
			});
			$("#choose_days").change(function() {
				if (this.value &gt; 999)
					c.noOfDays = 999;
				if (this.value &lt; 1)
					c.noOfDays = 1;
			});
		});
	}
	c.submitFeatureContent = function() {
		var forumsId = $('#choose_forums').val();
		if (!c.show_forums_feature)
			forumsId = null;
		var featureInput = {
			'forumsId': forumsId,
			'contentId': c.post.content_sys_id,
			'days':c.noOfDays,
			'global': c.show_homePage
		}
		var resourceUrl = apiBaseUrl + '/featuredContent';
		$http.post(resourceUrl, featureInput)
			.then(function(data) {
			c.showFeatureContentAlert=true;
			if (!forumsId &amp;&amp; !c.show_homePage)
				c.data.isFeaturedContent = false;
			else
				c.data.isFeaturedContent = true;
			c.featureContentClose();
		}, function(error) {
			console.log(error);
		});
	}
	c.disabledMarkFeatured = function() {
	    return ((!c.show_forums_feature || !$('#choose_forums').val()) &amp;&amp; !c.show_homePage) || (c.show_forums_feature &amp;&amp; c.errorForums.length &gt; 0);
	}
	c.showMemberShipForumError = function() {
	    return (c.data.isMemberShipForum == 'true') &amp;&amp; ((c.show_forums_feature &amp;&amp; c.isNotCurrentMemberShipForum) || c.show_homePage &amp;&amp; c.showHomePageError);
	};
	c.featureContentClose = function() {
	    instance.dismiss('cancel');
	}

}]]&gt;&lt;/client_script&gt;&lt;controller_as&gt;c&lt;/controller_as&gt;&lt;css&gt;.frameless{
  border : none;
}

.note-text{
    color: $text-muted;
    font-size: 12px;
    margin: 10px 0px 10px 0px;
    font-weight: 100;
  }

    .cm-top-level-class{
    .alert{
    overflow: hidden;
    min-height: 52px;
  }
      .cm-close-btn{
        background-color: inherit;
      }
  line-height: 20px;
  .overall-level{
    border: 1px solid $btn-default-border;
    padding-left: 5px;
    padding-right: 5px;
    padding-top: 2px;
    padding-bottom: 2px;
    margin-left: 5px;
  }
  .overall-level-sm{
    border: 1px solid $btn-default-border;
    padding: 5px;
    width: 209px;

    display: block;
    margin-left: auto;
    margin-right: auto;
  }
  .cm-content-question{
    .cm-success-color{
      color: $btn-success-bg;
    }
    .image50px .avatar-container {
      height: 50px !important;
      width: 50px !important;
      .sub-avatar{
        justify-content: center;
        align-items: center;
        display: inline-flex;
        span {
          font-size:16px;
        }
      }
    }
    .cm-button-link{
      text-decoration: none;
    }
    .cm-remove-focus{
      outline: none;
    }
    .cm-user-img{
      display: inline-block;
      img{
        height: 50px;
      }
    }
    .cm-user-img-blank {
      background-color: $csm-border-color;
      border-radius: 50%;
      padding: 10px;
      font-size: 16px;
      color: $text-muted;
      margin-top: 3px;
      margin-right: 5px;
      display: inline-block;
    }
    .cm-content {
      padding: 20px;
      margin-bottom: 0px;
      .cm-common-light-color{
        color: $text-muted;
      }
      .cm-common-dark-color{
        color: $text-color;
      }
      .cm-common-link-color{
        color: $link-color;
      }
      .cm-acted-color{
        color: $brand-primary;
      }
      .cm-acted-color{
        color: $csm-navbar-popover-text-color;
      }
      .cm-link{
        font-weight: 500;
        cursor: pointer;
      }
      .cm-content-header{
        .cm-content-type{
          min-height: 38px;
          font-size: 18px;
          width: 100%;
          .cm-answered-icon
          {
            color: $brand-success;
          }
          .cm-content-type-name{
            font-size: 14px;
            font-weight: 500;
            line-height: 16px;
            display: inline-block;
            vertical-align: middle;
            padding-left: 3px;
            font-weight: 400;
          }
          .cm-content-type-icon {
            display: inline-block;
            margin-top: 10px;
            //width: 90%;
          }
          .cm-menu-bar-items {
            position: relative;
            float: right;
            .cm-menu-button{
              display: inline;
              margin-right: 10px;
            }
            .cm-content-type-menu{
              display: inline;
              
              .menu-header{
              display:inline-block;
              padding: 0px 0px 0px;
              }
              .header-menu-item{
                display: inline-flex;
              }
              
            }
            .cm-content-type-menu.open{
              .tooltip{
                display:none !important;
              }
            }
          }
          .cm-action-icon {
            color: $text-muted;
            cursor: pointer;
          }
          .dropdown-menu {
            margin-top: 20px;
            position: absolute;
            top: 24px;
            right: 0;
            left: auto;
            min-width: inherit;
            background-color: $panel-bg;
            li:nth-child(n+2) {margin-top: 5px !important;}
            li a {
              padding: 3px 20px;
            }
            li &amp;gt; div {
              display: block;
              padding: 3px 20px;
              clear: both;
              font-weight: normal;
              line-height: 1.42857;
              color: $text-color;
              white-space: nowrap;
          	}
          }
        }
        .cm-content-title {
          margin-bottom: 13px;
          word-wrap: break-word;
        }

        .cm-author-details{
          .cm-author-image {
            float: left;
            margin-right: 5px;
            img{
              height: 50px;
            }
          }
          .cm-author-info {
            vertical-align: middle;
            padding-top: 5px;
          }
        }
        .harvested-articles-info.visible-xs{
          padding-top: 10px;
        }
        .harvested-articles-info{
          max-width: 350px;
          text-overflow: ellipsis;
          white-space: nowrap;
          overflow: hidden;
          display: inline-block;
          ul.harvested-articles{
            display: inline;
            padding-left: 2px;
            li.harvested-article{
              display: inline;
            }
            li.harvested-article:not(:last-child):after{
              content: ", ";
            }
          }
        }
      }

      .cm-content-body {
        line-height: initial;
        .cm-content-detail{
          word-wrap: break-word;
          img{
            max-width: 100% !important;
          }
          table{
          max-width: 100% !important;
          display: table;
          overflow-x: auto !important;
          }
          code {
            width: 100% !important;
            overflow-x: auto !important;
            display: block;
          }
          .container{
            max-width: 100% !important;
          }
        }
        .cm-topics{
          .cm-topic-label{
            padding-right: 10px;
          }
          .cm-topic-info{
            padding-right: 5px;
            .cm-topic-badge{
              height: auto;
              border-radius: 5px;
              background-color: $gray-lighter;
              font-size: 12px;
              font-weight:400;
              padding: 1px 5px;
              margin-top: 5px;
            }
            .cm-topic-badge{
              background-color: $csm-tags-bg;
            }
          }
        }
        .cm-inline-attachments-list {
          margin-top: 0px;
          padding-bottom: 5px;
        }
      }
      .cm-content-footer {
        .cm-views{
          float: right;
        }
        .cm-action-icons{
          font-size:18px;
        }
        .cm-action{
          display:inline-block;
          white-space: nowrap;
          padding-right: 10px;
        }
        .cm-show-cursor {
          cursor: pointer;
        }
        .cm-reply-box {
          .cm-widget-mce {
            .field-label{ //Hiding tinyMCE field label
              display: none;
            }
            margin-top: 0px;
            margin-bottom: 0px;
            iframe {
              width: 99% !important;
            }
          }
          .cm-form-actions{
            overflow: hidden;
            .btn-container{
              overflow: hidden;
              .cm-attach-link {
                display: inline-block;
              }
              .cm-cancel-btn {
                margin-right: 10px;
              }
            }
          }
        }
      }
      .cm-edit-mode{
        label {
          font-size: 16px;
          .sub-label {
            color: $btn-secondary-border;
            margin-left: 5px;
          }
        }
        .cm-content-header{
          overflow: hidden;
          border-bottom: 1px solid $panel-default-border;
        }
        .cm-content-header {
          border-bottom: 1px solid $csm-border-color;
        }

        .form-group {
          .cm-attach-link {
              display: inline-block;
            }
        }
        .cm-form-actions{
          overflow: hidden;
          .btn-container {
            overflow: hidden;
            .cm-cancel-btn, .cm-save-btn {
              margin-right: 10px;
            }
          }
        }
      }
    }

    .cm-comments{
      .userName {
        font-weight: 500;
      }
      .cm-comment-header{
        padding-top: 0px;
        padding-bottom: 15px;
        .cm-hdr-text {
          padding-top: 8px;
        }
        .cm-reply-count{
          font-size: 18px;
          padding-right:5px;
        }
        .cm-last-reply-info{
          .cm-close-brace{
            color: $text-muted;
            font-weight: 400;
          }
        }
        .btn.show-all-btn:active,
        .btn.show-all-btn.active,
        .btn.show-all-btn:focus,
        .btn.show-all-btn:hover{
          background-color: $panel-bg;
          box-shadow: none;
        }
      }
      .cm-comment {
        margin-bottom: 10px;
        border-left-width: 0;
        border-top-width: 0;
        .cm-common-light-color{
          color: $text-muted;
        }
        .cm-common-dark-color{
          color: $text-color;
        }
        .cm-answered-badge
        {
          color: $brand-success;
          font-size: 22px;
          vertical-align: middle;
          padding-left: 5px;
        }
        .cm-acted-color{
          color: $link-color;
          color: $csm-navbar-popover-text-color;
        }
        .cm-link{
          font-weight: 500;
          cursor: pointer;
        }
        .cm-level1{
          padding-left: 15px;
          margin-left: 62px;
        }
        .cm-comment-header{
          padding-bottom: 12px;
          border-bottom: 1px solid $panel-default-border;
          margin-bottom: 20px;
          .cm-reply-count{
            font-size: 18px;
            padding-right:5px;
          }
          .cm-last-reply-info{
            .cm-close-brace{
              color: $text-muted;
              font-weight: 400;
            }
          }
        }
        .cm-comment-header{
          border-bottom: 1px solid $csm-border-color;
        }
        .cm-comment-body{
          padding: 0;
          .cm-comment-body-inner {
            padding: 20px 0 0 20px;
            border: 1px solid $panel-default-border;
            border-right: none;
            //display: inline-flex;
            width: 100%;
          }
          .cm-comment-body-inner {
            border-color: $csm-border-color;
          }
          .cm-comment-body-inner.mobile-view {
            padding-left: 11px;
          }
          .cm-avatar-container {
            float: left;
            margin-right: 10px;
            margin-top: -6px;
            img {
              height: 50px;
            }
          }
          .cm-comment-container{
            width: calc(100% - 60px);
            padding-right: 20px;
          }
          .cm-comment-container.mobile-view {
            width: 100%;
            padding-right: 15px;
            .cm-comment-text {
              padding-top: 60px;
            }
          }
          .cm-action-icon {
            color: $text-muted;
            cursor: pointer;
          }
          .dropdown-toggle{
            font-size:20px;
          }
          .dropdown-menu {
            position: absolute;
            top: 24px;
            right: 0;
            left: auto;
            min-width: inherit;
            background-color: $panel-bg;
            li:nth-child(n+2) {margin-top: 5px !important;}
            li a {
              padding: 3px 20px;
            }
            li &amp;gt; div {
              display: block;
              padding: 3px 20px;
              clear: both;
              font-weight: normal;
              line-height: 1.42857;
              color: $text-color;
              white-space: nowrap;
          	}
          }
          .cm-comment-text{
            .cm-comment-main {
              display: block;
            }
            .cm-comment-user-info .user-details {
              display: inline-block;
              width: calc(100% - 20px);
            }
            .cm-comment-menu {
              float: right;
              position: relative;

              .menu-header{
                display:inline-block;
                padding: 0px 0px 0px;
              }
              .header-menu-item{
                display: inline-flex;
              }
            }
            .cm-comment-menu.open{
              .tooltip{
                display:none !important;
              }
            }
            .cm-badge{
              color: $badge-color;
              border-radius: 5px;
              font-weight: normal;
              margin-left: 10px;
            }
            .cm-author{
              background-color: $badge-bg;
            }
            .cm-author{
              background-color: $csm-author-badge-bg;
            }

            padding-left:0px;
            .cm-comment-user-info {
              .cm-separator-arrow {
                padding-left: 5px;
                padding-right: 5px;
                color: $text-muted;
              }
            }
            .cm-comment-text-info{
              padding-top:10px;
              padding-bottom: 5px;
              .cm-comment-text-detail{
                word-break: break-word;
                word-wrap: break-word;
                line-height: initial;
                img{
                  max-width: 100% !important;
                }
                iframe{
                  display:block;
                  width:100% !important;
                }
                .container{
                  max-width: 100% !important;
                }
              }
              .cm-inline-attachments-list {
                margin-top: 0px;
              	padding-bottom: 10px;
              }
            }
            .cm-edit-box {
              margin-top: 15px;
              padding-top: 15px;
              margin-bottom:12px;

              .cm-widget-mce {
                .field-label{ //Hiding tinyMCE field label
                  display: none;
                }
                margin-top: 0px;
                margin-bottom: 0px;
                iframe {
                  width: 99% !important;
                }
              }
              .cm-form-actions{
                overflow: hidden;
                .btn-container{
                  overflow: hidden;
                  .cm-attach-link {
                    display: inline-block;
                  }
                  .cm-cancel-btn {
                    margin-right: 10px;
                  }
                }
              }
            }
          }
          .cm-comment-footer{
            padding-top:15px;
            padding-bottom: 15px;
            border-top: 1px solid $panel-default-border;
            .cm-action{
              display:inline-block;
              white-space: nowrap;
              padding-right: 10px;
              .cm-action-icons{
                font-size:18px;
              }
            }
            .cm-action.show-reply {
              padding-right: 0;
              .btn {
                font-weight: 500;
                background-color: transparent; 
                border: none;
                padding: 0;
                color: $link-color;
                .fa {
                  padding-right: 5px;
                }
              }
              .btn:hover {
                color: darken($link-color,10%);
              }
              .btn:active, .btn.active {
                box-shadow: none;
              }
            }
            .cm-show-cursor{
              cursor: pointer;
            }
            .cm-nested-comments-link{
              font-weight: 500;
              float: right;
              display: inline-block;
            }
          }
          .cm-comment-footer {
            border-color: $csm-border-color;
          }
          .cm-reply-box {
            margin-bottom:12px;
            .cm-widget-mce {
              .field-label{ //Hiding tinyMCE field label
                display: none;
              }
              margin-top: 0px;
              margin-bottom: 0px;
              iframe {
                width: 99% !important;
              }
            }
            .cm-form-actions{
              overflow: hidden;
              .btn-container{
                overflow: hidden;
                .cm-attach-link {
                  display: inline-block;
                }
                .cm-cancel-btn {
                  margin-right: 10px;
                }
              }
            }
          }
        }
        .panel-footer.cm-show-reply {
          border-left: 1px solid $panel-default-border;
          .btn {
            color: $link-color;
            width: 100%;
            font-weight: 500;
            background-color: transparent; 
            border: none;
            padding: 0;
            .fa {
              padding-right: 5px;
            }
          }
          .btn:active, .btn.active {
            box-shadow: none;
          }
          .btn:hover {
            color: darken($link-color,10%);
          }
        }
        .panel-footer.cm-show-reply {
          border-color: $csm-border-color;
        }
      }
      .cm-comment.cm-accepted{
        border-color: $state-success-border;
        padding: 20px 20px 0px;
        border-width: 1px;
        margin-bottom: 20px;
        margin-top: 15px;
        .cm-answered-icon{
          color: $brand-success;
          font-size: 22px;
        }
        .cm-answer-link{
          float: right;
        }
        .cm-comment-body .cm-comment-body-inner {
          border: none;
        }
        .cm-comment-header.cm-accepted-header{
          padding-top: 0px;
          padding-bottom: 12px;
          margin-bottom: 0px;
          border-bottom: 1px solid $panel-default-border;
        }
        .cm-comment-header.cm-accepted-header {
          border-color: $csm-border-color;
        }
      }

    }
    .cm-comment-spinner {
      padding: 50px 0px;
      min-height: 150px;
      color: $text-muted;
      border: 1px solid $gray-light;
      border-right: none;
      border-bottom: none;
      .cm-loading-text {
        padding-top: 15px;
        font-style: italic;	
        line-height: 16px;
      }
    }
    .cm-comment-spinner {
      border-color: $csm-border-color;
    }
    .cm-end-reply-panel{
      margin-top: 15px;
      padding: 20px;
      .cm-reply-box-hide{
        .cm-reply-text{
          margin-left: 10px;
          display: inline-block;
          vertical-align: middle;
          color: $text-muted;
          font-size: 18px;
        }
      }
    }
    .cm-reply-box{
      .cm-widget-mce {
        .field-label{ //Hiding tinyMCE field label
          display: none;
        }
        margin-top: 0px;
        margin-bottom: 0px;
        iframe {
          width: 99% !important;
        }
      }
      .cm-form-actions{
        overflow: hidden;
        .btn-container{
          overflow: hidden;
          .cm-attach-link {
            display: inline-block;
          }
          .cm-cancel-btn {
            margin-right: 10px;
          }
        }
      }
    }
    .cm-select2-topic .select2-container-multi .select2-choices li.select2-search-choice {
      margin-top: 5px;
    }
  }
  .cm-sp-video-width{
    iframe {
      width:99.99%!important
    }
  }
  .cm-border-bottom {
    border-bottom: 1px solid $panel-default-border !important;
  }
  .cm-border-bottom {
    border-bottom: 1px solid $csm-border-color !important;
  }

  .cm-comment-body.cm-border-top .cm-comment-body-inner {
    border-top: 1px solid $panel-default-border;
  }
  .cm-comment-body.cm-border-top .cm-comment-body-inner {
    border-top: 1px solid $csm-border-color;
  }

  .cm-align-center {
    text-align: center;
  }

  .cm-alert {
    .cm-alert-icon {
      padding-top: 3px;
      padding-right: 5px;
    }
  }
  .cm-alert-question-inform {
    margin:15px 5px 5px 5px;
  }

  .cm-alert.info {
    border: 1px solid $state-info-border;	
    background-color: $state-info-bg;
    color: $state-info-text;
  }

  .alert{
  	margin: 1rem 0;
    .alert-icon {
      margin-right: 10px;
    }
  }
  .self-clear:after {
    content: "";
    clear: both;
    display: table;
  }

  .cm-menu-ellipsis{
    color: $text-color;
    font-size: 18px;
  }
  .cm-menu-parent-ellipsis{
    display: inline-block;
    color: $text-color;
  }
  .required .control-label:before {
    content:"* ";
    color: $brand-danger;
  }
  .required.filled .control-label:before {
    color: $text-muted;	
  }
  .mandate {
    border: 1px solid $brand-danger;
  }
  .mandate {
    border: 1px solid $csm-danger-light !important;
  }
  .cm-bottom-padding {
    margin-bottom: 0px;
  }

  .cm-message-top-padding {
    margin-top: 15px;
  }

  .cm-menu-item {
    padding-left: 17px;
    padding-right: 5px;
    padding-top: 5px;
    padding-bottom: 5px;
    cursor: pointer;
  }
  .cm-disable-comment {
    a {
      pointer-events: none;
      color: $panel-default-border !important;
    }
  }
  .cm-guest-alert{
    a, a:hover {
      color: inherit;
      text-decoration: underline;
    }
  }
  .cm-margin-btm{
    margin-bottom: 13px;
  }
  //responsiveness
   @media screen and (max-width: 768px) {
     .cm-author-details{
       display:flex
     }
     .cm-content-type-menu{
       .tooltip{
         display: none !important;
       }
     }
     .cm-comment-body{
       .cm-comment-menu{
         .tooltip{
           display: none !important;
         }
       }
     }
   }
  @media screen and (max-width: 500px) {
    .cm-content-type-menu{
      .tooltip{
        display: none !important;
      }
    }
    .cm-comments{
      .cm-comment{
        .cm-comment-body{
          .cm-comment-child{
            margin-left: 10px;
          }
          .cm-reply-box{
            margin-top: 15px;
          }
          .cm-comment-footer{
            .cm-nested-comments-link{
              margin-top: 15px;
            }
          }
          .cm-comment-menu{
            .tooltip{
              display: none !important;
            }
          }
        }
      }
    }
  }

  @media screen and (min-width: 501px) and (max-width: 768px) {
    .cm-content-type-menu{
      .tooltip{
        display: none !important;
      }
    }
    .cm-comments{
      .cm-comment{
        .cm-comment-body{
          .cm-comment-child{
            margin-left: 10px;
          }
          .cm-reply-box{
            margin-top: 15px;
          }
          .cm-comment-footer{
            .cm-nested-comments-link{
              margin-top: 0px;
            }
          }
          .cm-comment-menu{
            .tooltip{
              display: none !important;
            }
          }
        }
      }
    }
  }

  @media screen and (min-width: 769px) {
    .cm-comments{
      .cm-comment{
        .cm-comment-body{
          .cm-comment-child{
            margin-left: 62px;
          }
          .cm-comment-footer{
            .cm-nested-comments-link{
              margin-top: 0px
            }
          }
        }
      }
    }
  }
    }

.nonactive-link {
   pointer-events: none;
   cursor: default;
}

.active-link:hover {
   text-decoration: underline;
}

.cm-bg-dark {
  background-color: $well-bg !important;
}
.cm-bg-light {
  background-color: $panel-bg !important;
}
.cm-b-t-none {
  border-top: none !important;
}
.cm-b-b-none {
  border-bottom: none !important;
}
.cm-small-font {
  font-size: 12px;
}
.highlight-activty {
  border: 1px solid $input-border-focus;
  box-shadow: 0 0 4px 0 $input-border-focus;
  border-radius: 3px;
}
.community_image_fullscreen{
cursor: pointer;
}
.modal-body .warn-msg .fa {
  color: $gray-lighter;
}
.community-image-modal .close {
	color: $panel-bg;
}
.community-image-modal .close:focus {
	color: $panel-bg;
}
.community-image-modal .close:hover {
	color: $btn-default-border;
}
.avatar-container .avatar.soloAvatar .sub-avatar{
  color: $gray-darker;
  background: $gray-lighter;
  background-size: cover;
}

.forum-width {
  width: 400px;
}

@media  (max-width: 510px) {
  .forum-width {
    width: 100%;
  }
}

.cm-loading-div{
  vertical-align: middle;
  color: $text-muted;
  padding-top: 300px;
  padding-bottom: 300px;
}

.cm-loading{
  font-style: italic;
}
.modal-load{
   height:150px;
  color: $text-muted;
  text-align: center;
  .fa-spinner {
    font-size: 22px;
  }
  p{
    font-style: italic;
    margin-top: 75px;
    vertical-align: middle;
  }
}
.dropdown.open .tooltip {
	display: none !important;
}

.disable-comments-checkbox{
  height: 16px;	
  width: 16px;	
  border-radius: 2px;
  background-color: $brand-primary;
  padding-left:0px !important;
}
.disable-comments-message{
  color: $text-muted;
  text-align: center;
  font-size: 18px;
}
 &lt;/css&gt;&lt;data_table&gt;sp_instance&lt;/data_table&gt;&lt;demo_data/&gt;&lt;description/&gt;&lt;docs/&gt;&lt;field_list/&gt;&lt;has_preview&gt;true&lt;/has_preview&gt;&lt;id&gt;community-content-question&lt;/id&gt;&lt;internal&gt;false&lt;/internal&gt;&lt;link&gt;&lt;![CDATA[function(scope) {
	var c = scope.c,
		$timeout = $injector.get('$timeout'),
		$uibModal = $injector.get('$uibModal');

	/*****
	This opens the image in a modal and handles the image sizing.
	****/
	var options = {
		scope: scope,
		keyboard: true,
		templateUrl: 'community-image-modal-question.html'
	};
	$(".cm-top-level-class").on("click",".community_image_fullscreen", function() {
		var src= this.src;
		var tag = $(this).parent().get(0).tagName;
		if( tag != 'A'){
			c.imageInstance = $uibModal.open(options);
			var orignalWidth = $(this).prop('naturalWidth');
			var orignalHeight = $(this).prop('naturalHeight');
			$timeout(function(){
				var modal = document.getElementById('communityImageModal'),
					modalImg = $('#modalImage')[0];
				modal.style.display = "block";
				modalImg.src = src;
				c.imagesrc = src;
				modalImg.width = orignalWidth &gt; c.minImageWidth ? orignalWidth : c.minImageWidth;
				modalImg.style.minHeight = orignalHeight &gt; c.minImageHeight ? orignalHeight : c.minImageHeight +"px";
				$('.modal-dialog').width(modalImg.width);
				$('#modal-close').focus();
			});
		}

	});
	
	/*****
	Css specifications of the table which generate by tinymce editor's input, is overridden by bootstrap css specifications. This function fixes conflicting css specifications corresponding to attributes inside table.
	****/
	scope.$on('sp.community.question.tinymce.table.fixcss', function(event, contentSelector){
		$(contentSelector + ' table').each(function(){
			$(this).css("border-spacing", $(this).attr("cellspacing") + "px");
			$(this).find( "td" ).css("padding", $(this).attr("cellpadding") + "px");
			$(this).css("border-collapse", "separate");
			$(this).wrap("&lt;div style = 'overflow: auto'&gt;&lt;/div&gt;" );
		});
	});

	/*****
	Apply focus css on reply anchor.
	****/
	scope.$on('sp.community.question.anchor.focus', function(event, data){
		$('#' + data.anchor).parent().attr('tabindex', '0');
		$('#' + data.anchor).parent().attr('aria-label', 'You are currently on a reply');
		$('#' + data.anchor).parent().focus();
		$('#' + data.anchor).parent().addClass('highlight-activty');
		$('#' + data.anchor).parent().on("focusin", function(){
			$(this).removeClass('highlight-activty');
		});
		$timeout(function() {
			$('#' + data.anchor).parent().removeClass('highlight-activty');
		}, qsConfigJson? qsConfigJson.timeouts.anchorFocus : c.options.anchor_focus_timeout);
	});
}]]&gt;&lt;/link&gt;&lt;name&gt;Community Content Question&lt;/name&gt;&lt;option_schema&gt;[{"name":"panel_type","default_value":"default","section":"other","label":"Panel Type","type":"string"},{"name":"view_refresh_time","default_value":"10","section":"other","label":"View Refresh Time (seconds)","type":"string"},{"hint":"in miliseconds","name":"anchor_focus_timeout","default_value":"5000","section":"other","label":"Anchor Focus Timeout","type":"integer"},{"name":"min_image_height","default_value":"100","section":"other","label":"Minimum Image Height (pixels)","type":"string"},{"name":"min_image_width","default_value":"185","section":"other","label":"Minimum Image Width (pixels)","type":"string"},{"name":"user_mention_list_size","section":"other","default_value":"10","label":"User Mentions Suggestion List Size","type":"integer"},{"hint":"","name":"user_mention_min_chars","section":"other","default_value":"3","label":"Number of characters required after the '@' for users mentions","type":"integer"},{"hint":"","name":"user_mention_debounce","section":"other","default_value":"250","label":"Time in milliseconds used to throttle fetch user mentions","type":"string"}]&lt;/option_schema&gt;&lt;public&gt;true&lt;/public&gt;&lt;roles/&gt;&lt;script&gt;&lt;![CDATA[(function($sp){

	data.enable_gamification = gs.getProperty("sn_communities.enable_gamification"); // Gamification property to check for display
  data.useSnBind = gs.getProperty("sn_communities.useSnBind"); // To ascertain whether to use ng-Bind or sn-Bind
	data.levelInfo = gs.getProperty("sn_communities.content.show_gamification_level");
	data.enable_csm_case_creation_from_question = gs.getProperty("sn_communities.enable_csm_case_creation_from_question");
	data.defaultDaysFeatureContent=gs.getProperty("sn_communities.default_featured_days");
	var questionContentTypeId = '5a2fcaa0dbd26600b1f6f78eaf9619a8';
	if (input &amp;&amp; input.checkUserAccessToPostComment) {
		data.hasAccessToPostComent = new CommunityUser().hasContentAccess(input.forum, CommunityConstants.ANSWER_CONTENT_TYPE_ID, CommunityConstants.CONTENT_WRITE);
	}
	if(!input || (input &amp;&amp; input.type === "cxs_view") ){
		var readOnlyMode = false;
		if((input &amp;&amp; input.read_only) || $sp.getParameter("sysparm_readonly") === 'true')
			readOnlyMode = true;
		
		data.frameless_class = '';
		if((input &amp;&amp; input.frameless) || $sp.getParameter("frameless") === 'true')
			data.frameless_class = 'frameless';

		data.readOnlyMode = readOnlyMode;
		data.isLoggedIn = !readOnlyMode &amp;&amp; gs.isLoggedIn();
		data.question_to_entity_creation = $sp.getWidget('question-to-entity-creation');
		
		//Fetch Question Information
		var questionId = (input ? input.sys_id : $sp.getParameter('sys_id')); 
		var anchor = $sp.getParameter("anchor");
		if(anchor){
			var answerId = anchor.replace(CommunityConstants.ANSWER_PREFIX,'');
			data.root = new CommunityContent().getRootContent(answerId, CommunityConstants.ANSWER_TYPE);
		}
		var communityContent = new CommunityContent();
		data.question = communityContent.getContentInfo(questionId, questionContentTypeId);
		data.isMemberShipForum=communityContent.isInMemberShipForum(questionId)+'';
		if(gs.isLoggedIn()){
			var live_profile = new GlideRecord('live_profile');
			live_profile.addQuery("document", gs.getUserID());
			live_profile.query();
			if (live_profile.next()) data.loggedInUserProfileId = live_profile.getUniqueValue();
			var profileId  = data.loggedInUserProfileId;
			var profile = new Community_Factory().getWrapperType(CommunityConstants.PROFILE).getUserInfo([profileId],['display_name', 'photo', 'title', 'initials']);
			if (!gs.nil(profile[profileId])) {
				data.loggedInUser = profile[profileId];
				data.loggedInUser.userImage = data.loggedInUser.userImage != "" ? data.loggedInUser.userImage + "?t=small" : "";
			}
			data.contentModerationEnabled = communityContent.isContentModerationEnabled() + '';
		}
		data.topicsEnabled = CommunityConstants.ENABLE_TOPICS;
		$sp.getWidget("community-view-logger");
		//data.video=$sp.getWidget("comm-video-upload", {});
	}else if(input &amp;&amp; input.message){
		gs.getSession().putClientData('cm.content.delete.notify',new sn_communities.CommunityUtil().escapeHTML(input.message));
		data.success = true;
	}else if(input &amp;&amp; input.convertToCase) {
		if(GlidePluginManager.isActive(	'com.sn_customerservice')) {
			var communityCaseUtility = new CommunityCaseUtility();
			data.validCase = communityCaseUtility.canConvertToCase(input.liveProfileId, input.contentId);
		}
		return;	
	}else if(input &amp;&amp; input.getCaseMapping &amp;&amp; input.questionId) {
		var commUtility = new CommunityCaseUtility();
		data.mapping = commUtility.getEntityMapping('kb_social_qa_question', input.questionId, 'e3f008adeb400300a51a63fba206fe11');
		return;
	} else if(input &amp;&amp; input.showSuccessMsg &amp;&amp; input.showSuccessMsg) {
		successMessage = ((input.successMsg == 'Case Created: ') ? gs.getMessage('Case Created: '): input.successMsg);
		successMessage = successMessage + input.successParam;
		gs.addInfoMessage(successMessage);
		return;
	} else if (input &amp;&amp; input.moderation &amp;&amp; input.contentId &amp;&amp; input.type){
		data.moderationReasons = new CommunityModeration().getModerationSettings(input.type, input.contentId);
	} else if(input &amp;&amp; input.getAuthorAccessOnTargetForum){
		data.forumPerms = new CommunityUser(input.authorUserId).getPermissionsForForum(input.forum);
		return;
	} else if(input &amp;&amp; input.getWritableForumIdsAndAuthorUserId){
		var author_live_profile = new GlideRecord('live_profile');
		author_live_profile.addQuery("sys_id", input.authorCommunityProfileId);
		author_live_profile.query();
		if(author_live_profile.next()){
			data.authorUserId =  author_live_profile.getValue("document");
		}
		data.contentWritableForums = new CommunityUser().getWritableForumsForContentType(questionContentTypeId);
		return;
	}
	data.maxTopicLimit = parseInt(gs.getProperty('sn_communities.max_topic_limit'));
	data.seo_meta_descrition_length = parseInt(gs.getProperty('sn_communities.seo.pages.meta_descrition.length'));
	data.userMentionConfig = {
		enabled: sn_communities.CommunityConstants.ENABLED_USER_MENTIONS,
		sourceTable: sn_communities.CommunityConstants.QUESTION_TABLE,
		sourceId: $sp.getParameter("sys_id"),
		limit: options.user_mention_list_size || 10,
		minChars: options.user_mention_min_chars || 3,
		debounce: parseInt(options.user_mention_debounce) || 250,
		messages: {
			loading: gs.getMessage('Loading'),
			noMatches: gs.getMessage('No matches'),
			init: gs.getMessage('Enter the name of the person you want to mention')
		}
	}
	data.msg = {
		editQuestionSuccess : gs.getMessage('Question edited.'),
		editQuestionSuccess_scanInProgress : gs.getMessage('Question edited. Attachment(s) are currently undergoing security scan.'),
		moveQuestionSuccess : gs.getMessage('Question moved to forum {0}.'),
		moveQuestionSuccess_scanInProgress : gs.getMessage('Question moved to forum {0}. Attachment(s) are currently undergoing security scan.'),
		editQuestionReviewSuccess : gs.getMessage('Question edited and is under review.'),
		editQuestionReviewSuccess_scanInProgress : gs.getMessage('Question edited and is under review. Attachment(s) are currently undergoing security scan.'),
		moveQuestionReviewSuccess : gs.getMessage('Question moved to forum {0} and is under review.'),
		moveQuestionReviewSuccess_scanInProgress : gs.getMessage('Question moved to forum {0} and is under review. Attachment(s) are currently undergoing security scan.'),
		editAnswerSuccess : gs.getMessage('Answer edited.'),
		editAnswerSuccess_scanInProgress : gs.getMessage('Answer edited. Attachment(s) are currently undergoing security scan.'),
		editCancelMsg: gs.getMessage('Are you sure you want to discard the changes?'),
		discardChange: gs.getMessage('Discard changes'),
		answerDeleteSuccess: gs.getMessage('Answer deleted.'),
		questionDeleteSuccess: gs.getMessage("Question '{0}' deleted."),
		questionSubscribeSuccess: gs.getMessage('You have successfully subscribed to the question.'),
		questionUnsubscribeSuccess: gs.getMessage('You have unsubscribed from the question.'),
		postReplySuccess: gs.getMessage('Reply posted.'),
		postReplySuccess_scanInProgress: gs.getMessage('Reply posted. Attachment(s) are currently undergoing security scan.'),
		postReplyUnderModeration: gs.getMessage('Reply posted and is under moderation.'),
		postReplyUnderModeration_scanInProgress: gs.getMessage('Reply posted and is under moderation. Attachment(s) are currently undergoing security scan.'),
		questionUndoBookmarkSuccess: gs.getMessage('You have removed the bookmark from the question.'),
		profileLink : gs.getMessage("{0} Profile"),
		replyLinkText : gs.getMessage("1 reply, click to reply"),
		repliesLinkText : gs.getMessage("{0} replies, click to reply"),
		replyCountText : gs.getMessage("1 Reply"),
		repliesCountText : gs.getMessage("{0} Replies"),
		viewRepsCountText : gs.getMessage("View {0} replies"),
		viewRepCountText : gs.getMessage("View 1 reply"),
		helpfulCountZeroText : gs.getMessage("No one marked helpful"),
		helpfulsCountText : gs.getMessage("{0} members marked helpful."),
		helpfulCountText : gs.getMessage("1 member marked helpful."),
	  upvotesCountText : gs.getMessage("{0} members upvoted."),
		upvoteCountText : gs.getMessage("1 member upvoted."),
		upvoteCountZeroText : gs.getMessage("No one upvoted"),
		requiredFieldsError : gs.getMessage("Error. Please fill all the required(*) fields."),
		commentRequiredFieldError : gs.getMessage("Error. Please fill all the required fields."),
		subscribeText: gs.getMessage("Subscribe"),
		unsubscribeText: gs.getMessage("Unsubscribe"),
		subscribedText: gs.getMessage("Subscribed"),
		editAlertMsg: gs.getMessage('Please note that this post has already received activity. It is not advisable to edit it now. Are you sure you want to continue?'),
		upvotes: gs.getMessage('Upvotes'),
		helpful: gs.getMessage('Helpful'),
		topicNoteMsg: gs.getMessage("Select a maximum of {0} topic(s)",data.maxTopicLimit+''),
		harvestKnowledge:  gs.getMessage('Harvest Knowledge'),
		harvestedKnowledge:  gs.getMessage('Harvested Article'),
		harvestSuccess: gs.getMessage("Knowledge has been harvested into an article {0}."),
		viewHere: gs.getMessage('View Here'),
		topicLimitExceededMsg: gs.getMessage("You have reached the maximum number of topics"),
		topicLimitExceededAlert: gs.getMessage("More than {0} topic(s) cannot be associated to a content",data.maxTopicLimit+''),
		errorMessage_harvest_403: gs.getMessage("You do not have access to contribute to knowledge base. Please contact KM administrator."),
		moreOptions : gs.getMessage("More Options"),
		deleteAlertMsg: gs.getMessage("Please note that this post has already received some feedback/response. It's not advisable to delete this content now. Are you sure you want to delete?"),
		deleteAlertNoFeedbackMsg: gs.getMessage("Are you sure you want to delete?"),
		points: gs.getMessage("community.gmhovercard.points"),
		noActionAvailableMsg: gs.getMessage("No actions available"),
		anchorReplyNotFound: gs.getMessage("community.replyNotFoundMsg"),
		questionContentTypeNotPresent: gs.getMessage("Question content type is not associated to selected forum."),
		topicsRemovedWarning: gs.getMessage("These topics that are not part of the selected forum cannot be associated: {0}"),
		userPermissionsWarning: gs.getMessage("Only users with access to the content type Question in the selected forum, will be able to view the content upon saving."),
		authorLosingAccessWarning: gs.getMessage("{0} does not have access to the content type Question in the selected forum. Hence, the author will be unable to view the content upon saving."),
		globalFeatureContentError: gs.getMessage("Some users may not be able to view the content due to lack of permissions."),
		featureContentEditAlert: gs.getMessage("Successfully saved the changes to featured content."),
		featureContentMarkAlert: gs.getMessage("Successfully featured this content."),
		subject: gs.getMessage('Regarding your comment'),
		subjectQuestion: gs.getMessage("Regarding your question '{0}' ")
	};
	data.allowInsertVideoOnQuestion = false;
	data.allowInsertVideoOnAnswer = false;
	var contentTypesGR = new GlideRecord("sn_communities_content_type");
	contentTypesGR.addQuery('sys_id', CommunityConstants.QUESTION_CONTENT_TYPE_ID).addOrCondition('sys_id', CommunityConstants.ANSWER_CONTENT_TYPE_ID);
	contentTypesGR.query();
	while (contentTypesGR.next()) {
		if(contentTypesGR.embedded_types &amp;&amp; contentTypesGR.embedded_types.includes(CommunityConstants.VIDEO_EMBEDDED_TYPE_ID)) {
			if(contentTypesGR.sys_id+"" == CommunityConstants.QUESTION_CONTENT_TYPE_ID)
				data.allowInsertVideoOnQuestion = true;
			else
				data.allowInsertVideoOnAnswer = true;
		}
	}
	data.articleView = "kb_article";
	data.articleViewId= "sys_id";
	if(GlidePluginManager.isActive('com.snc.knowledge_serviceportal')){
		data.articleView = "kb_article_view";
		data.articleViewId= "sys_kb_id";
	}

	var forumId = '';
	if (data.question &amp;&amp; data.question.data &amp;&amp; data.question.data[0]) {
		data.isCommuAdminOrMod = data.question.data[0].isCommunityAdminOrMod;
		var dataContent=data.question.data[0];
		if(dataContent.state==CommunityConstants.PUBLISHED){
			var commUser = new sn_communities.CommunityUser();
			forumId = dataContent.forum.sys_id;		
			var isForumAdminOrMod=false;
			if(!data.isCommuAdminOrMod)
				isForumAdminOrMod=commUser.isAdminOfForum(forumId) || commUser.isForumModerator(forumId);
			if(data.isCommuAdminOrMod||isForumAdminOrMod){
				var commFeatureContent=new CommunityFeaturedContent();
				var featuringContentTypes = commFeatureContent.getPrimaryContentTypes();		
				data.canFeaturContent = (featuringContentTypes.indexOf(questionContentTypeId) != -1);
				if(data.canFeaturContent)
					data.isFeaturedContent= commFeatureContent.isFeaturedContent(dataContent.content_sys_id);
			}
		}
		if (dataContent &amp;&amp; dataContent.userAvatarObject) {
			var userData;
			var userId = dataContent.userAvatarObject.userId;
			data.canEmail = data.isCommuAdminOrMod &amp;&amp; (userId &amp;&amp; data.loggedInUserProfileId != userId);
			if (data.canEmail)
				userData = new CommunityProfile().getUserInfoHover([userId], ["email"]);
			if (userData)
				data.showMailTo = userData[userId].email;
		}
	}
	data.forumLevelsText = [
			gs.getMessage("this is a level 1 forum"),
			gs.getMessage("this is a level 2 forum"),
			gs.getMessage("this is a level 3 forum"),
			gs.getMessage("this forum is beyond level 3")
		];
})($sp);]]&gt;&lt;/script&gt;&lt;servicenow&gt;false&lt;/servicenow&gt;&lt;sys_class_name&gt;sp_widget&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2017-08-16 23:35:21&lt;/sys_created_on&gt;&lt;sys_id&gt;2f4a647c672032007bf09a6617415a58&lt;/sys_id&gt;&lt;sys_mod_count&gt;2322&lt;/sys_mod_count&gt;&lt;sys_name&gt;Community Content Question&lt;/sys_name&gt;&lt;sys_package display_value="Communities" source="sn_communities"&gt;10809a9edb866200b1f6f78eaf961904&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Communities"&gt;10809a9edb866200b1f6f78eaf961904&lt;/sys_scope&gt;&lt;sys_update_name&gt;sp_widget_2f4a647c672032007bf09a6617415a58&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2019-11-21 16:33:31&lt;/sys_updated_on&gt;&lt;template&gt;&lt;![CDATA[&lt;div class="cm-top-level-class"&gt;
  &lt;div class="alert alert-success cm-alert clearfix" data-ng-show="c.showFeatureContentAlert" aria-live="polite" role="alert"&gt;
    &lt;div class="alert-text pull-left col-xs-11 flexbox no-padder"&gt;
      &lt;i class="fa fa-check cm-alert-icon" aria-hidden="true"&gt;&lt;/i&gt;
      &lt;span&gt;{{c.featureContentAlert}}&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class="alert-close pull-right col-xs-1 no-padder"&gt;
      &lt;i role="button" class="fa fa-times pull-right cm-alert-icon" data-ng-click="c.showFeatureContentAlert = false" 
         aria-label="${Close}" tabindex="0"&gt;&lt;/i&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;!--sp-widget widget="data.question_to_entity_creation"&gt; &lt;/sp-widget--&gt;
  &lt;div data-ng-if="::c.postNotValid" class="alert alert-danger cm-alert cm-message-top-padding clearfix" aria-live="polite" role="alert"&gt;
    &lt;div class="alert-text pull-left col-xs-11 flexbox no-padder"&gt;
      &lt;i class="fa fa-exclamation-circle cm-alert-icon" aria-hidden="true"&gt;&lt;/i&gt;
      &lt;span&gt;${Sorry, the content you are trying to view is currently unavailable.}&lt;/span&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;!--Unauthorized message when user don't have required permissions --&gt;
  &lt;div class="alert {{::c.pageAlertClass}} cm-alert clearfix cm-guest-alert" data-ng-if="::c.showPageAlertForError" aria-live="polite" role="alert"&gt;
    &lt;div class="alert-text pull-left col-xs-12 flexbox no-padder"&gt;
      &lt;i class="fa {{::c.alertIconClass}} cm-alert-icon" aria-hidden="true"&gt;&lt;/i&gt;
      &lt;span ng-bind-html="::c.pageAlertMessageHTML"&gt;&lt;/span&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;!--Unauthorized message when user is not logged in --&gt;
  &lt;div class="alert {{::c.pageAlertClass}} cm-alert clearfix cm-guest-alert" data-ng-if="c.showPageAlertForGuest"&gt;
    &lt;div class="alert-text pull-left col-xs-11 flexbox no-padder"&gt;
      &lt;i class="fa {{::c.alertIconClass}} cm-alert-icon" aria-hidden="true"&gt;&lt;/i&gt;
      &lt;span&gt;${Please} &lt;a href="?id=community_login" role="link"&gt;${Login}&lt;/a&gt; ${to view the content!}&lt;/span&gt;
    &lt;/div&gt;
    &lt;div class="alert-close pull-right col-xs-1 no-padder"&gt;
      &lt;i role="button" class="fa fa-times pull-right cm-alert-icon" data-ng-click="c.showPageAlertForGuest = false"
         aria-label="${close}"&gt;&lt;/i&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id="topOfPage" data-ng-if="::c.post.isValidContent" class="cm-content-question"&gt;
    &lt;div class="alert {{c.pageAlertClass}} cm-alert clearfix"  data-ng-if="c.showPageAlert" aria-live="polite" role="alert"&gt;
      &lt;div class="alert-text pull-left col-xs-11 flexbox no-padder"  &gt;
        &lt;i class="fa {{c.alertIconClass}} cm-alert-icon" aria-hidden="true"&gt;&lt;/i&gt;
        &lt;span &gt;&lt;span ng-bind-html="c.pageAlertMessageHTML"/&gt;&lt;span ng-if="c.showMailTo"&gt;${ The author has been notified. }&lt;a ng-href="mailto:{{::c.data.showMailTo}}?subject={{::c.formatMessage(c.data.msg.subjectQuestion,[c.post.title])}}"&gt;${Click here to email the author.}&lt;/a&gt;
        &lt;/span&gt;
      &lt;/div&gt;
      &lt;div  class="alert-close pull-right col-xs-1 no-padder"&gt;
        &lt;i role="button" tabindex="0" class="fa fa-times pull-right cm-alert-icon "  data-ng-click="c.showPageAlert = false"
           aria-label="${close}"&gt;&lt;/i&gt;
      &lt;/div&gt;
    &lt;/div&gt;
     &lt;div class="alert alert-warning cm-alert-inform clearfix" data-ng-repeat="warning in c.warnings track by $index"  data-ng-if="c.showWarnings &amp;&amp; !warning.hideWarning &amp;&amp; c.formValidation.pass &amp;&amp; c.post.showEditMode" ng-show="!c.loading"&gt;
       &lt;div class="alert-icon pull-left"&gt;
         &lt;i class="fa fa-exclamation-triangle"&gt;&lt;/i&gt;
       &lt;/div&gt;
       &lt;div class="alert-text col-xs-11 no-padder"&gt;
         &lt;span ng-bind="warning.message"&gt;&lt;/span&gt;
       &lt;/div&gt;
       &lt;div  class="alert-close pull-right no-padder"&gt;
         &lt;i role="button" tabindex="0" class="fa fa-times pull-right cm-alert-icon"  data-ng-click="warning.hideWarning = true"
            aria-label="${close}"&gt;&lt;/i&gt;
       &lt;/div&gt;
    &lt;/div&gt;
    &lt;div data-ng-if="c.post.canEdit &amp;&amp; !c.post.showEditMode &amp;&amp; ( c.post.hasInfectedFile || c.post.hasPendingFile)" class="alert alert-danger {{!c.post.hasInfectedFile? 'info': ''}} cm-alert cm-message-top-padding clearfix"&gt;
      &lt;div class="alert-text pull-left col-xs-11 flexbox no-padder"&gt;
        &lt;i class="fa {{ !c.post.hasInfectedFile ? 'fa-info-circle' : 'fa-times-circle' }} cm-alert-icon" aria-hidden="true"&gt;&lt;/i&gt;
        &lt;span ng-bind="c.post.fileErrMsg"&gt;&lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="panel panel-{{::options.panel_type}} csm-tile cm-content csm-widget {{::c.data.frameless_class}} m-b"&gt;
      &lt;div class="panel-body alert alert-danger cm-alert-question-inform clearfix" data-ng-if="c.showModerationError"&gt;
        &lt;div class="alert-icon pull-left"&gt;
          &lt;i class="fa fa-exclamation-circle" aria-hidden="true"&gt;&lt;/i&gt;
        &lt;/div&gt;
        &lt;div class="alert-close pull-right"&gt;
          &lt;button class="btn cm-close-btn pull-right" data-ng-click="c.showModerationError = false"
             aria-label="${close}"&gt;&lt;i class="fa fa-times" aria-hidden="true"&gt;&lt;/i&gt;&lt;/button&gt;
        &lt;/div&gt;
        &lt;div class="alert-text pull-left"&gt;
          &lt;span &gt;
            &lt;p&gt;${Please fix the following errors before posting: }&lt;/p&gt;
            &lt;ul class="cm-alert-section"&gt;
              &lt;li ng-repeat="error in c.moderationError track by $index"&gt;
                &lt;span ng-bind="::error"&gt;&lt;/span&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="cm-view-mode" data-ng-if="!c.post.showEditMode"&gt;
        &lt;div class="cm-content-header"&gt;
          &lt;div ng-class="::(c.data.isLoggedIn ? 'cm-content-type' : 'cm-content-type cm-margin-btm')"&gt;
            &lt;div class="cm-content-type-icon"&gt;
              &lt;span data-ng-if="c.answered"&gt;&lt;i class="fa fa-check-circle cm-answered-icon" aria-hidden="true"&gt;&lt;/i&gt;&lt;/span&gt;
              &lt;span data-ng-if="!c.answered"&gt;&lt;i class="fa {{::c.post.icon}} cm-common-link-color" aria-hidden="true"&gt;&lt;/i&gt;&lt;/span&gt;
              &lt;span class="cm-content-type-name cm-common-dark-color"&gt;${Question}&lt;/span&gt;
            &lt;/div&gt;
            &lt;div class="cm-menu-bar-items" data-ng-if="::c.data.isLoggedIn"&gt;
              &lt;div class="cm-menu-button" data-ng-if="::!c.isContentAuthor"&gt;
                &lt;button ng-if="c.showFollow" class="btn btn-primary" data-ng-click="c.subscribe()"&gt;
                  ${Subscribe}
                &lt;/button&gt;
                &lt;button ng-if="!c.showFollow" class="btn btn-default" data-ng-click="c.subscribe()"
                        ng-mouseover="c.showUnSubscribe()"
                        ng-mouseleave="c.showSubscribed()"
                        ng-focus="c.showUnSubscribe()"
                        ng-blur="c.showSubscribed()"
                        aria-label="${Question subscribed. Click to unsubscribe}"&gt;
                  &lt;span ng-bind="c.subscribeLabel"&gt;&lt;/span&gt;
                &lt;/button&gt;
              &lt;/div&gt;
              &lt;div data-ng-if="::c.data.isLoggedIn" class="cm-content-type-menu"&gt;
                &lt;ul role="menubar" class="menu-header"&gt;
                    &lt;li class="dropdown header-menu-item" role="presentation"&gt;
                &lt;a role="button" aria-label="${actions menu}" href="Javascript:void(0)" id="actionQuestionMenu" class="btn btn-default pull-right cm-action-icon dropdown-toggle"
                   data-ng-click="c.getMenuItems(c.post, 'Question')" data-toggle="dropdown" aria-haspopup="true" tooltip-placement="bottom" uib-tooltip='{{::c.data.msg.moreOptions}}'&gt;
                  &lt;span  class="cm-menu-parent-ellipsis" &gt;&lt;i class="fa fa-ellipsis-h" aria-hidden="true"&gt;&lt;/i&gt;&lt;/span&gt;
                &lt;/a&gt;
                &lt;ul data-ng-if="c.post.showDropDown" class="dropdown-menu" aria-expanded="false" role="menu"&gt;
                  &lt;li data-ng-if="c.post.canEdit" role="presentation"&gt;&lt;a role="menuitem"  class="cm-menu-item" href="Javascript:void(0)"  data-ng-click="c.canShowEditMode(c.post,'content')" tabindex="-1"&gt;${Edit}&lt;/a&gt;&lt;/li&gt;
                  &lt;li data-ng-if="c.post.canEdit" role="presentation"&gt;&lt;a role="menuitem"  class="cm-menu-item" href="Javascript:void(0)"  data-ng-click="c.canDeleteContent(c.post,'content')" tabindex="-1"&gt;${Delete}&lt;/a&gt;&lt;/li&gt;
                  &lt;li data-ng-if="c.post.canBookmark &amp;&amp; c.post.activities_allowed.bookmark" role="presentation"&gt;&lt;a role="menuitem" class="cm-menu-item" href="Javascript:void(0)" data-ng-click="c.postFeedback('bookmark',c.post,null,false)" tabindex="-1"&gt;${Bookmark}&lt;/a&gt;&lt;/li&gt;
                  &lt;li data-ng-if="c.post.canBookmark &amp;&amp; !c.post.activities_allowed.bookmark" role="presentation"&gt;&lt;a role="menuitem" class="cm-menu-item" href="Javascript:void(0)" data-ng-click="c.postFeedback('bookmark',c.post,null,true)" tabindex="-1"&gt;${Remove Bookmark}&lt;/a&gt;&lt;/li&gt;
                  &lt;li data-ng-if="::c.isContentAuthor" role="presentation"&gt;&lt;a role="menuitem" class="cm-menu-item" href="Javascript:void(0)" data-ng-click="c.subscribe()" tabindex="-1"&gt;&lt;span ng-bind="c.toggleSubscribeText"&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
                  &lt;li data-ng-if="c.accepted_answer &amp;&amp; c.accepted_answer.canHarvest" role="presentation"&gt;&lt;a role="menuitem" class="cm-menu-item" href="Javascript:void(0)"  data-ng-click="c.harvestContent(c.accepted_answer,'comment')" tabindex="-1"&gt;&lt;span ng-bind="::c.data.msg.harvestKnowledge"&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
                  &lt;li data-ng-if="c.post.canModerate" role="presentation"&gt;&lt;a role="menuitem"  class="cm-menu-item" href="Javascript:void(0)"  data-ng-click="c.flagContent(c.post,'content')" tabindex="-1"&gt;${Report Content}&lt;/a&gt;&lt;/li&gt;
                  &lt;li data-ng-if="c.canCreateCase &amp;&amp; c.validCase.showCreate &amp;&amp; (c.validCase.userType==='customer_contact' || c.validCase.userType==='csm_consumer_user') &amp;&amp; !c.validCase.caseNumber" role="presentation"&gt;&lt;a role="menuitem"  class="cm-menu-item" href="Javascript:void(0)"  data-ng-click="c.createCase()" tabindex="-1"&gt;${Create Case}&lt;/a&gt;&lt;/li&gt;
                      &lt;li data-ng-if="c.data.canFeaturContent&amp;&amp; !c.data.isFeaturedContent" role="presentation"&gt;&lt;a role="link"  href="Javascript:void(0);" data-ng-click="c.featureContent(c.post,'contentFeature')" tabindex="-1"&gt;${Mark as featured}&lt;/a&gt;&lt;/li&gt;
                      &lt;li data-ng-if="c.data.canFeaturContent &amp;&amp; c.data.isFeaturedContent" role="presentation"&gt;&lt;a role="link"  href="Javascript:void(0);" data-ng-click="c.featureContent(c.post,'contentFeature')" tabindex="-1"&gt;${Edit Featured content}&lt;/a&gt;&lt;/li&gt;
                  &lt;li data-ng-if="c.post.noActionAvailable" role="presentation" tabindex="-1"&gt;&lt;div role="menuitem" ng-bind="::c.data.msg.noActionAvailableMsg"&gt;&lt;/div&gt;&lt;/li&gt;
                &lt;/ul&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;h3 class="cm-content-title m-t"&gt;
            &lt;span ng-bind="c.post.title"&gt;&lt;/span&gt;
          &lt;/h3&gt;
          &lt;div class="cm-author-details"&gt;
            &lt;div class="cm-author-image"&gt;
              &lt;span class="image50px" &gt;
                &lt;a ng-href="{{::(c.data.readOnlyMode ? '' : c.post.userAvatarObject.profileLink)}}" title="{{::c.post.userAvatarObject.name}}"&gt;
                  &lt;sn-avatar primary="::c.post.userAvatarObject" show-presence="false"/&gt;
                &lt;/a&gt;
              &lt;/span&gt;
            &lt;/div&gt;
            &lt;div class="cm-author-info cm-common-light-color"&gt;
              &lt;span&gt;${by }&lt;/span&gt;
              &lt;gm-hover-card readonlymode="::c.data.readOnlyMode" carddata="::c.post.userAvatarObject" enablegamification="::c.data.enable_gamification" pointslabel="::c.data.msg.points" profilelink="::c.data.msg.profileLink" subject="::c.formatMessage(c.data.msg.subjectQuestion,[c.post.title])" canemail="::c.data.canEmail"&gt;&lt;/gm-hover-card&gt;
              &lt;span data-ng-if="::(c.data.enable_gamification == 'true')"&gt;
                &lt;span ng-if = "::(c.post.user_details.levelName!= '')"&gt;
                  &lt;span ng-if = "::(c.data.levelInfo == 'sn_communities_forum')" data-toggle="tooltip" title = {{c.post.forum.name}} class="overall-level" ng-bind="::c.post.user_details.levelName"&gt;&lt;/span&gt;
                  &lt;span ng-if = "::(c.data.levelInfo != 'sn_communities_forum')" class="overall-level" ng-bind="::c.post.user_details.levelName"&gt;&lt;/span&gt;
                &lt;/span&gt;       
              &lt;/span&gt;
              &lt;span class="harvested-articles-info pull-right" ng-if="c.validCase.caseNumber &amp;&amp; (c.validCase.currentUserIsAuthor || c.validCase.showCreate)"&gt;
                ${Case: }
                &lt;ul class="harvested-articles"&gt;
                  &lt;li class="harvested-article"&gt;&lt;a class="article-link cm-link cm-common-dark-color" ng-class="{'active-link': c.validCase.currentUserIsAuthor, 'nonactive-link': !c.validCase.currentUserIsAuthor}" ng-href="{{c.data.readOnlyMode ? '' : '/' + c.data.portal + '?id=csm_ticket&amp;sys_id=' + c.validCase.caseId + '&amp;table=sn_customerservice_case&amp;view=csp'}}" title="{{::article.number}}"&gt;
                    &lt;span ng-bind="c.validCase.caseNumber"&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/span&gt;
              &lt;div&gt;
                &lt;span&gt;${created}&lt;/span&gt;
                &lt;span data-ng-if="!c.post.publishedHideTimeAgo"&gt;&lt;sn-time-ago timestamp="::c.post.published_date"/&gt;&lt;/span&gt;
                &lt;span data-ng-if="c.post.publishedHideTimeAgo"&gt;${Just Now}&lt;/span&gt;
                &lt;span data-ng-if="c.isEdited"&gt;
                  &lt;span&gt;(${edited}
                    &lt;span data-ng-if="!c.post.editedHideTimeAgo"&gt;&lt;sn-time-ago timestamp="c.post.edited_date"/&gt;&lt;/span&gt;&lt;span data-ng-hide="c.post.editedHideTimeAgo"&gt;)&lt;/span&gt;
                    &lt;span data-ng-if="c.post.editedHideTimeAgo"&gt;${Just Now})&lt;/span&gt;
                  &lt;/span&gt;
                &lt;/span&gt;
                &lt;span&gt;${in}&lt;/span&gt;
                &lt;a class="cm-link cm-common-dark-color" data-ng-href="{{c.data.readOnlyMode ? '' : '/' + c.data.portal + '?id=community_forum&amp;sys_id=' + c.post.forum.sys_id}}"&gt;
                  &lt;span ng-bind="c.post.forum.name"&gt;&lt;/span&gt;
                &lt;/a&gt;
                &lt;span ng-if="c.post.harvestedArticles &amp;&amp; c.post.harvestedArticles.length &gt; 0" class="harvested-articles-info pull-right hidden-xs" &gt;
                  ${ {{::(c.post.harvestedArticles.length &gt; 1 ? 'Articles' : 'Article')}}} :
                  &lt;ul class="harvested-articles"&gt;
                    &lt;li class="harvested-article" data-ng-repeat="article in c.post.harvestedArticles track by article.id"&gt;&lt;a class="article-link cm-link cm-common-dark-color" ng-href="{{::(c.data.readOnlyMode ? '' : '?id=' + c.data.articleView + '&amp;' + c.data.articleViewId + '=' + article.id)}}" target="_kbView" title="{{::article.number}}"&gt;&lt;span ng-bind="::article.number"&gt;&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/span&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
          &lt;div&gt;
            &lt;span ng-if="c.post.harvestedArticles &amp;&amp; c.post.harvestedArticles.length &gt; 0" class="harvested-articles-info visible-xs" &gt;
              ${ {{::(c.post.harvestedArticles.length &gt; 1 ? 'Articles' : 'Article')}}} :
              &lt;ul class="harvested-articles"&gt;
                &lt;li class="harvested-article" data-ng-repeat="article in c.post.harvestedArticles track by article.id"&gt;&lt;a class="article-link cm-link cm-common-dark-color" ng-href="{{::(c.data.readOnlyMode ? '' : '?id=' + c.data.articleView + '&amp;' + c.data.articleViewId + '=' + article.id)}}" target="_kbView" title="{{::article.number}}"&gt;{{::article.number}}&lt;/a&gt;&lt;/li&gt;
              &lt;/ul&gt;
            &lt;/span&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="cm-content-body" data-ng-if = "(c.post.description|| (c.post.attachments &amp;&amp; c.post.attachments.length&gt;0) || (c.data.topicsEnabled &amp;&amp; c.post.topics.length &gt; 0))"&gt;
          &lt;hr/&gt;
          &lt;sp-html-content model="c.post.description| communityHTMLFilter:c.data.readOnlyMode" data-ng-if = "::(c.data.useSnBind == 'false')" class="cm-content-detail"&gt;&lt;/sp-html-content&gt;
          &lt;p data-ng-if = "::(c.data.useSnBind == 'true')" class="cm-content-detail" sn-bind-html="c.post.description"&gt;&lt;/p&gt;
          &lt;community-attachments attachments="c.post.attachments"
                                 config="{inlineMode: true,
                                         showInlineDnD: false,
                                         showInlineList: true,
                                         dialogMode: true,
                                         showDialogList: true,
                                         canDownloadFile: true,
                                         attachmentsCount: c.post.attachments.length,
                                         isOwnerOfContent: c.post.isOwnerOfContent,
                                         parentWidget: c.widget.sys_id
                                         }"  &gt;&lt;/community-attachments&gt;
          &lt;div ng-if="c.data.topicsEnabled &amp;&amp; c.post.topics.length &gt; 0" class="cm-topics"&gt;
            &lt;span class="cm-topic-label cm-common-light-color"&gt;${Topics:} &lt;/span&gt;
            &lt;span ng-repeat="topic in c.post.topics track by topic.id" class="cm-topic-info"&gt;
              &lt;a class="btn btn-default btn-xs cm-topic-badge" href="{{c.data.readOnlyMode ? '' : '/' + c.data.portal + '?id=community_topic&amp;sys_id=' + topic.id}}"&gt;&lt;span ng-bind="::topic.name"&gt;&lt;/span&gt;&lt;/a&gt;
            &lt;/span&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;hr class="m-t-sm" /&gt;
        &lt;div class="cm-content-footer cm-common-light-color"&gt;
          &lt;div class="cm-action-box"&gt;
            &lt;div class="upvote cm-action"&gt;
              &lt;span data-ng-if="::(c.post.canUpvote &amp;&amp; c.data.isLoggedIn)"&gt;
                &lt;a role="button" id="upVoteEle" href="Javascript:void(0);" data-ng-if="c.post.activities_allowed.upvote" class="cm-button-link cm-common-light-color"
                   aria-label="${upvote}" data-ng-click="c.postFeedback('upvote',c.post, null, false)"&gt;
                  &lt;i class="fa fa-arrow-circle-up cm-action-icons" aria-hidden="true"&gt;&lt;/i&gt; ${Upvote}
                &lt;/a&gt;
                &lt;a role="button" id="downVoteEle" href="Javascript:void(0);" data-ng-if="!c.post.activities_allowed.upvote" class="cm-button-link cm-acted-color"
                   aria-label="${undo upvote}" data-ng-click="c.postFeedback('upvote',c.post,null, true)"&gt;
                  &lt;i class="fa fa-arrow-circle-up cm-action-icons" aria-hidden="true"&gt;&lt;/i&gt; ${Upvote}
                &lt;/a&gt;
                &lt;a data-ng-if="c.post.upvote_count &gt; 0" role="button" aria-haspopup="true" href="Javascript:void(0);" data-ng-click="c.getFeedbackProfiles(c.post,'upvote')" class="cm-button-link cm-common-dark-color"&gt;(&lt;span ng-bind="c.post.upvote_count"&gt;&lt;/span&gt;) &lt;/a&gt;
                &lt;span data-ng-if="c.post.upvote_count == 0" role="presentation" class="cm-common-dark-color"&gt;(&lt;span ng-bind="c.post.upvote_count"&gt;&lt;/span&gt;) &lt;/span&gt;
              &lt;/span&gt;
              &lt;span data-ng-if="::(!c.post.canUpvote &amp;&amp; c.data.isLoggedIn)" class="cm-common-light-color"&gt;
                &lt;i class="fa fa-arrow-circle-up cm-action-icons" aria-hidden="true"&gt;&lt;/i&gt; ${Upvote}
                &lt;a data-ng-if="c.post.upvote_count &gt; 0" role="button" aria-haspopup="true" href="Javascript:void(0);" data-ng-click="c.getFeedbackProfiles(c.post,'upvote')" class="cm-button-link cm-common-dark-color"&gt;(&lt;span ng-bind="c.post.upvote_count"&gt;&lt;/span&gt;) &lt;/a&gt;
                &lt;span data-ng-if="c.post.upvote_count == 0" role="presentation" class="cm-common-dark-color"&gt;(&lt;span ng-bind="c.post.upvote_count"&gt;&lt;/span&gt;) &lt;/span&gt;
              &lt;/span&gt;
              &lt;span data-ng-if="::!c.data.isLoggedIn" class="cm-common-light-color"&gt;
                &lt;i class="fa fa-arrow-circle-up cm-action-icons" aria-hidden="true"&gt;&lt;/i&gt; ${Upvotes}
                &lt;span role="presentation" class="cm-common-dark-color"&gt;(&lt;span ng-bind="c.post.upvote_count"&gt;&lt;/span&gt;) &lt;/span&gt;
              &lt;/span&gt;
            &lt;/div&gt;
            &lt;div class="reply cm-action"&gt;
              &lt;a role="button" href="Javascript:void(0);" aria-label="{{c.post.comment_count &gt; 0 ? (c.formatMessage(c.data.msg.repliesLinkText, [c.post.comment_count])) : c.data.msg.replyLinkText}}" data-ng-if="::(c.post.canReply &amp;&amp; c.data.isLoggedIn)" ng-class="c.post.showReplyBox ? 'cm-acted-color cm-action cm-button-link' : 'cm-common-light-color cm-action cm-button-link'" data-ng-click="c.showReplyBox(c.post,!c.post.showReplyBox,1,'ccq_questionEditor')" &gt;
                &lt;span&gt;&lt;i class="fa fa-comment cm-action-icons" aria-hidden="true"&gt;&lt;/i&gt; ${Reply}
                  &lt;span class="cm-common-dark-color"&gt;(&lt;span ng-bind="c.post.comment_count"&gt;&lt;/span&gt;)&lt;/span&gt;
                &lt;/span&gt;
              &lt;/a&gt;
            &lt;/div&gt;
            &lt;div class="cm-views" data-ng-if="::(c.post.view_count &gt; 1)"&gt;&lt;span ng-bind="::c.post.view_count"&gt;&lt;/span&gt;&lt;span&gt;${Views}&lt;/span&gt;&lt;/div&gt;
            &lt;div class="cm-views" data-ng-if="::(c.post.view_count == 1)"&gt;&lt;span ng-bind="::c.post.view_count"&gt;&lt;/span&gt;&lt;span&gt;${View}&lt;/span&gt;&lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="cm-reply-box self-clear m-t" data-ng-if="c.post.showReplyBox"&gt;
            &lt;div class="alert alert-danger cm-alert-inform clearfix" data-ng-if="c.formValidation.showMsg"&gt;
              &lt;div class="alert-icon pull-left"&gt;
                &lt;i class="fa fa-exclamation-circle" aria-hidden="true"&gt;&lt;/i&gt;
              &lt;/div&gt;
              &lt;div class="alert-text pull-left"&gt;
                &lt;span ng-bind="c.formValidationError"&gt;&lt;/span&gt;
              &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class="form-group cm-widget-mce hidden-xs" id="ccq_questionEditor" data-ng-if="c.post.showReplyBox"&gt;
              &lt;sp-tinymce-video data-ng-model="c.newReplyText" ng-model-options="{height: '300', allow: c.data.allowInsertVideoOnAnswer, updateOn: 'default blur',
                                       debounce:{
                                       'default':250}
                                       }" sn-mentions-config="::c.data.userMentionConfig"&gt;&lt;/sp-tinymce-video&gt;
            &lt;/div&gt;
            &lt;div class="form-group cm-reply-textarea visible-xs"&gt;
              &lt;label id="lb1l" class="sr-only"&gt;${Post A Reply}&lt;/label&gt;
              &lt;textarea aria-labelledby="lb1l" data-ng-model="c.post.textInput" class="form-control" rows="5"
                         ng-model-options="{
                                       updateOn: 'default blur',
                                       debounce:{
                                       'default':250}
                                       }"&gt;&lt;/textarea&gt;
            &lt;/div&gt;
            &lt;div class="form-group" &gt;
              &lt;div class="cm-attach-link padder-t"&gt;
                &lt;community-attachments attachments="c.attachments"
                                       config="{canEdit: true,
                                               dialogMode: true,
                                               showDialogDnD: true,
                                               showDialogList: true,
                                               canDeleteFile: true,
                                               attachmentsCount: c.attachmentsCount,
                                               attachmentsAdded: c.attachmentsAdded,
                                               parentWidget: c.widget.sys_id
                                               }"  &gt;&lt;/community-attachments&gt;
              &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class="cm-form-actions"&gt;
              &lt;div class="btn-container"&gt;
                &lt;div class="pull-right"&gt;
                  &lt;button type="cancel" class="btn btn-default cm-cancel-btn action-btn" data-ng-click="c.cancelReply(c.post,1)"&gt;${Cancel}&lt;/button&gt;
                  &lt;button type="submit" class="btn btn-primary action-btn" data-ng-disabled="!c.post.isDirty" data-ng-click="c.postComment(c.post,'question')"&gt;${Reply}&lt;/button&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div data-ng-if="c.loading" class="text-center cm-loading-div"&gt;
        &lt;p class="cm-loading"&gt;
          &lt;i class="fa fa-spinner fa-spin fa-2x fa-fw"&gt;&lt;/i&gt;${Loading...}
        &lt;/p&gt;
      &lt;/div&gt;
      &lt;div class="cm-edit-mode" data-ng-if="c.post.showEditMode" ng-show="!c.loading"&gt;
        &lt;div class="alert alert-danger cm-alert-inform clearfix" data-ng-if="c.formValidation.showMsg"&gt;
          &lt;div class="alert-icon pull-left"&gt;
            &lt;i class="fa fa-exclamation-circle" aria-hidden="true"&gt;&lt;/i&gt;
          &lt;/div&gt;
          &lt;div class="alert-text pull-left"&gt;
            &lt;span ng-bind="c.formValidationError"&gt;&lt;/span&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="cm-content-header"&gt;
          &lt;div class="cm-content-type"&gt;
            &lt;div class="cm-content-type-icon"&gt;
              &lt;span&gt;&lt;i class="fa {{::c.post.icon}} cm-common-link-color" aria-hidden="true"&gt;&lt;/i&gt;&lt;/span&gt;
              &lt;span class="cm-content-type-name cm-common-dark-color"&gt;${Question}&lt;/span&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;form class="self-clear" role="form" name="cm_form"&gt;
          &lt;div class="form-group padder-t-md"&gt;
            &lt;div class="cm-input-title required {{c.post.title ? 'filled' : ''}}"&gt;
              &lt;label for="title" class="control-label padder-b-xs"&gt;${Question}&lt;/label&gt;
              &lt;input data-ng-model="c.post.title" name="title" type="text" class="form-control" id="title" placeholder=""
                     ng-model-options="{
                                       updateOn: 'default blur',
                                       debounce:{
                                       'default':250}
                                       }"&gt;
            &lt;/div&gt;
          &lt;/div&gt;
           &lt;div id="choose_forums_div" class="form-group cm-select2-forum padder-t required filled"&gt;
            &lt;label for="choose_forum" class="control-label label-text padder-b-xs"&gt;${Forum}&lt;/label&gt;
            &lt;select id="choose_forum" class="cm-select2 forum-width" title="${Forum}" aria-required="true" ng-readonly="!c.canEditForum"&gt;
              &lt;option value="" &gt;&lt;/option&gt;
            &lt;/select&gt;
          &lt;/div&gt;
          &lt;div id="choose_topics_div" class="form-group cm-select2-topic padder-t" data-ng-if="::c.data.topicsEnabled"&gt;
            &lt;label for="choose_topics" class="control-label padder-b-xs"&gt;${Topic(s)}&lt;/label&gt;
            &lt;select id="choose_topics" class="cm-select2" multiple="multiple" ng-readonly="!c.forumTopics || c.forumTopics.length == 0"&gt;
            &lt;/select&gt;
            &lt;div class="note-text" ng-bind="::c.data.msg.topicNoteMsg"&gt;&lt;/div&gt;
          &lt;/div&gt;
          &lt;div class="form-group widget-mce padder-t"&gt;
            &lt;label for="description" class="control-label padder-b-xs"&gt;${Description}&lt;/label&gt;
            &lt;sp-tinymce-video data-ng-model="c.post.description" name="description" ng-model-options="{height: '300', allow: c.data.allowInsertVideoOnQuestion, updateOn: 'default blur',
                                       debounce:{
                                       'default':250}
                                       }" sn-mentions-config="::c.data.userMentionConfig" class="cm-sp-video-width" &gt;&lt;/sp-tinymce-video&gt;
          &lt;/div&gt;
          &lt;div class="form-group" &gt;
            &lt;div class="cm-attach-link"&gt;
                &lt;community-attachments attachments="c.attachments"
                                       config="{canEdit: true,
                                               dialogMode: true,
                                               showDialogDnD: true,
                                               showDialogList: true,
                                               canDeleteFile: true,
                                               attachmentsCount: c.attachmentsCount,
                                               isOwnerOfContent: c.post.isOwnerOfContent,
                                               attachmentsAdded: c.attachmentsAdded,
                                               parentWidget: c.widget.sys_id
                                               }"  &gt;&lt;/community-attachments&gt;
              &lt;/div&gt;
          &lt;/div&gt;
          &lt;div data-ng-show="c.showDisableComments" class="form-group padder-t"&gt;
            &lt;input data-ng-model="c.post.disable_comments" id="checkboxDC" class="checkbox inline disable-comments-checkbox" type="checkbox" name="checkboxDC" /&gt;
            &lt;label for="checkboxDC" class="control-label label-text padder-b-xs"&gt;${Disable Replies}&lt;/label&gt;
          &lt;/div&gt;
          &lt;div class="cm-form-actions"&gt;
            &lt;div class="btn-container"&gt;
              &lt;div class="pull-right"&gt;
                &lt;button type="cancel" class="btn btn-default cm-cancel-btn action-btn" data-ng-click="c.cancelConfirm(c.post,'question')"&gt;${Cancel}&lt;/button&gt;
                &lt;button type="submit" class="btn btn-primary action-btn" data-ng-click="c.editContent(c.post,'question')"&gt;${Save}&lt;/button&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/form&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class="cm-comments" ng-view&gt;
      &lt;div class="panel panel-{{::options.panel_type}}  csm-tile cm-comment cm-accepted csm-widget" data-ng-if="c.showAcceptedPannel"&gt;
        &lt;div class="cm-comment-header cm-accepted-header" aria-label="${Accepted Solution}"&gt;
          &lt;span class="cm-reply-count cm-common-dark-color"&gt;
            &lt;span&gt;&lt;i class="fa fa-check-circle cm-answered-icon" aria-hidden="true"&gt;&lt;/i&gt;&lt;/span&gt;
            ${Accepted Solution}
          &lt;/span&gt;
          &lt;div class="cm-answer-link"&gt;
            &lt;a href="Javascript:void(0);" class="cm-link cm-common-dark-color" ng-click="anchorScroll('answer_'+c.accepted_answer.sys_id, c.accepted_answer)"&gt;${See this answer in context}&lt;/a&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="cm-comment-body"&gt;
          &lt;div class="cm-comment-body-inner self-clear"&gt;
            &lt;div class="cm-avatar-container"&gt;
              &lt;span class="image50px"&gt;
                &lt;a ng-href="{{c.data.readOnlyMode ? '' : c.accepted_answer.userAvatarObject.profileLink}}" title="{{c.accepted_answer.userAvatarObject.name}}"&gt;
                  &lt;sn-avatar primary="c.accepted_answer.userAvatarObject" show-presence="false"/&gt;
                &lt;/a&gt;
              &lt;/span&gt;
            &lt;/div&gt;
            &lt;div class="cm-comment-container"&gt;
              &lt;div class="cm-comment-text"&gt;
                &lt;div class="cm-comment-main"&gt;
                  &lt;div class="cm-comment-user-info"&gt;
                    &lt;span&gt;
                      &lt;gm-hover-card readonlymode="::c.data.readOnlyMode" carddata="c.accepted_answer.userAvatarObject" enablegamification="::c.data.enable_gamification" pointslabel="::c.data.msg.points" profilelink="::c.data.msg.profileLink" subject="::c.data.msg.subject" canemail="::data.isCommuAdminOrMod&amp;&amp;data.loggedInUserProfileId!=c.accepted_answer.userAvatarObject.userId"&gt;&lt;/gm-hover-card&gt;
                      &lt;span data-ng-if="::(c.data.enable_gamification == 'true')"&gt;
                        &lt;span ng-if = "c.accepted_answer.user_details.levelName!= ''"&gt;
                          &lt;span ng-if = "::(c.data.levelInfo == 'sn_communities_forum')" data-toggle="tooltip" title = {{::c.post.forum.name}} class="overall-level" ng-bind="c.accepted_answer.user_details.levelName"&gt;&lt;/span&gt;
                          &lt;span ng-if = "::(c.data.levelInfo != 'sn_communities_forum')" class="overall-level" ng-bind="c.accepted_answer.user_details.levelName"&gt;&lt;/span&gt;
                        &lt;/span&gt;       
                      &lt;/span&gt;
                    &lt;/span&gt;
                    &lt;span class="cm-common-light-color"&gt;
                      &lt;span class="csm-separator-dot" aria-hidden="true"&gt;&amp;bull;&lt;/span&gt;
                      &lt;span&gt;&lt;sn-time-ago timestamp="c.accepted_answer.edited_date" /&gt;&lt;/span&gt;
                    &lt;/span&gt;
                  &lt;/div&gt;
                  &lt;div class="cm-comment-text-info"&gt;
                    &lt;sp-html-content class="cm-comment-text-detail" model="c.sanitizeVideo(c.accepted_answer)  | communityHTMLFilter:c.data.readOnlyMode"&gt;&lt;/sp-html-content&gt;
                    &lt;community-attachments attachments="c.accepted_answer.attachments"
                                 config="{inlineMode: true,
                                         showInlineDnD: false,
                                         showInlineList: true,
                                         dialogMode: true,
                                         showDialogList: true,
                                         canDownloadFile: true,
                                         attachmentsCount: c.accepted_answer.attachments.length,
                                         isOwnerOfContent: c.accepted_answer.isOwnerOfContent,
                                         parentWidget: c.widget.sys_id
                                         }"  &gt;&lt;/community-attachments&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
              &lt;div class="cm-comment-footer cm-common-light-color"&gt;
                &lt;div class="helpful cm-action"&gt;
                  &lt;span data-ng-if="c.accepted_answer.canMarkHelpful &amp;&amp; c.data.isLoggedIn"&gt;
                    &lt;a role="link" id="helpful_0" href="Javascript:void(0);" data-ng-if="c.accepted_answer.activities_allowed.helpful" class="cm-button-link cm-common-light-color"
                       aria-label="${helpful}" data-ng-click="c.postFeedback('helpful',c.accepted_answer,0, false)"&gt;
                      &lt;i class="fa fa-thumbs-up cm-action-icons" aria-hidden="true"&gt;&lt;/i&gt; ${Helpful}
                    &lt;/a&gt;
                    &lt;a role="link" id="unhelpful_0" href="Javascript:void(0);" data-ng-if="!c.accepted_answer.activities_allowed.helpful" class="cm-button-link cm-acted-color"
                       aria-label="${undo helpful}" data-ng-click="c.postFeedback('helpful',c.accepted_answer,0, true)"&gt;
                      &lt;i class="fa fa-thumbs-up cm-action-icons" aria-hidden="true"&gt;&lt;/i&gt; ${Helpful}
                    &lt;/a&gt;
                    &lt;a data-ng-if="c.accepted_answer.helpful_count &gt; 0" role="link" href="Javascript:void(0);" aria-haspopup="true"
                       data-ng-click="c.getFeedbackProfiles(c.accepted_answer,'helpful')" class="cm-common-dark-color cm-button-link"&gt;(&lt;span ng-bind="c.accepted_answer.helpful_count"&gt;&lt;/span&gt;) &lt;/a&gt;
                    &lt;span data-ng-if="c.accepted_answer.helpful_count == 0" role="presentation" class="cm-common-dark-color"&gt;(&lt;span ng-bind="c.accepted_answer.helpful_count"&gt;&lt;/span&gt;) &lt;/span&gt;
                  &lt;/span&gt;
                  &lt;span data-ng-if="!c.accepted_answer.canMarkHelpful &amp;&amp; c.data.isLoggedIn" class="cm-common-light-color"&gt;
                    &lt;i class="fa fa-thumbs-up cm-action-icons" aria-hidden="true"&gt;&lt;/i&gt; ${Helpful}
                    &lt;a data-ng-if="c.accepted_answer.helpful_count &gt; 0" role="link" href="Javascript:void(0);" aria-haspopup="true"
                       data-ng-click="c.getFeedbackProfiles(c.accepted_answer,'helpful')" class="cm-common-dark-color cm-button-link"&gt;(&lt;span ng-bind="c.accepted_answer.helpful_count"&gt;&lt;/span&gt;) &lt;/a&gt;
                    &lt;span data-ng-if="c.accepted_answer.helpful_count == 0" role="presentation" class="cm-common-dark-color"&gt;(&lt;span ng-bind="c.accepted_answer.helpful_count"&gt;&lt;/span&gt;) &lt;/span&gt;
                  &lt;/span&gt;
                  &lt;span data-ng-if="::!c.data.isLoggedIn" class="cm-common-light-color"&gt;
                    &lt;i class="fa fa-thumbs-up cm-action-icons" aria-hidden="true"&gt;&lt;/i&gt; ${Helpful}
                    &lt;span role="presentation" class="cm-common-dark-color"&gt;(&lt;span ng-bind="c.accepted_answer.helpful_count"&gt;&lt;/span&gt;) &lt;/span&gt;
                  &lt;/span&gt;
                &lt;/div&gt;
                &lt;div class="reply cm-action" data-ng-class="c.post.showEditMode ? 'cm-disable-comment': ''"&gt;
                  &lt;a role="button" tabindex="0" href="Javascript:void(0);" aria-label="${reply}" data-ng-if="c.post.canReply &amp;&amp; c.data.isLoggedIn" ng-class="c.acceptedAnswer.showReplyBox ? 'cm-acted-color cm-button-link' : 'cm-common-light-color cm-button-link'" data-ng-click="c.showReplyBox(c.acceptedAnswer,!c.acceptedAnswer.showReplyBox,1,'ccq_acceptedAnswerEditor')" &gt;
                    &lt;span&gt;&lt;i class="fa fa-comment cm-action-icons" aria-hidden="true"&gt;&lt;/i&gt; ${Reply}
                      &lt;span data-ng-if="c.accepted_answer.comment_count &gt; 0" class="cm-common-dark-color" role="presentation" aria-label="${Number of replies to the this reply}"&gt;(&lt;span ng-bind="c.accepted_answer.comment_count"&gt;&lt;/span&gt;)&lt;/span&gt;
                    &lt;/span&gt;
                  &lt;/a&gt;
                  &lt;span tabindex="0" aria-label="${reply}" data-ng-if="!c.data.isLoggedIn" ng-class="'cm-common-light-color cm-button-link'"&gt;
                    &lt;i class="fa fa-comment cm-action-icons" aria-hidden="true"&gt;&lt;/i&gt; ${Replies}
                    &lt;span class="cm-common-dark-color" role="presentation" aria-label="${Number of replies to the this reply}"&gt;(&lt;span ng-bind="c.accepted_answer.comment_count"&gt;&lt;/span&gt;)&lt;/span&gt;
                  &lt;/span&gt;
                &lt;/div&gt;
              &lt;/div&gt;
              &lt;div&gt;
                &lt;div class="cm-reply-box self-clear" data-ng-if="c.acceptedAnswer.showReplyBox"&gt;
                  &lt;div class="alert alert-danger cm-alert-inform clearfix" data-ng-if="c.formValidation.showMsg"&gt;
                    &lt;div class="alert-icon pull-left"&gt;
                      &lt;i class="fa fa-exclamation-circle" aria-hidden="true"&gt;&lt;/i&gt;
                    &lt;/div&gt;
                    &lt;div class="alert-text pull-left"&gt;
                      &lt;span ng-bind="c.formValidationError"&gt;&lt;/span&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                  &lt;div class="form-group cm-widget-mce hidden-xs" id="ccq_acceptedAnswerEditor" data-ng-if="c.acceptedAnswer.showReplyBox"&gt;
                    &lt;sp-tinymce-video data-ng-model="c.newReplyText" ng-model-options="{height: '300', allow: c.data.allowInsertVideoOnAnswer, updateOn: 'default blur',
                                       debounce:{
                                       'default':250}
                                       }" sn-mentions-config="::c.data.userMentionConfig"&gt;&lt;/sp-tinymce-video&gt;
                  &lt;/div&gt;
                  &lt;div class="form-group cm-reply-textarea visible-xs"&gt;
                    &lt;label id="lbl2" class="sr-only"&gt;${Post A Reply}&lt;/label&gt;
                    &lt;textarea data-ng-model="c.accepted_answer.textInput" class="form-control" rows="5" aria-labelledby="lbl2"
                              ng-model-options="{
                                       updateOn: 'default blur',
                                       debounce:{
                                       'default':250}
                                       }"&gt;&lt;/textarea&gt;
                  &lt;/div&gt;
                  &lt;div class="form-group" &gt;
                    &lt;div class="cm-attach-link padder-t"&gt;
                      &lt;community-attachments attachments="c.attachments"
                                               config="{canEdit: true,
                                                       dialogMode: true,
                                                       showDialogDnD: true,
                                                       showDialogList: true,
                                                       canDeleteFile: true,
                                                       attachmentsCount: c.attachmentsCount,
                                                       attachmentsAdded: c.attachmentsAdded,
                                                       parentWidget: c.widget.sys_id
                                                       }"  &gt;&lt;/community-attachments&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                  &lt;div class="cm-form-actions"&gt;
                    &lt;div class="btn-container"&gt;
                      &lt;div class="pull-right"&gt;
                        &lt;button type="cancel" class="btn btn-default cm-cancel-btn action-btn" data-ng-click="c.cancelReply(c.acceptedAnswer,1)"&gt;${Cancel}&lt;/button&gt;
                        &lt;button type="submit" class="btn btn-primary action-btn" data-ng-disabled="!c.acceptedAnswer.isDirty" data-ng-click="c.postComment(c.accepted_answer,'accepted_comment')"&gt;${Reply}&lt;/button&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="cm-comment-header self-clear" data-ng-if="c.comments.length"&gt;
        &lt;div class="pull-left cm-hdr-text"&gt;
          &lt;span class="cm-reply-count cm-common-dark-color" ng-bind="c.post.comment_count &gt; 1 ? (c.formatMessage(c.data.msg.repliesCountText, [c.post.comment_count])) : c.data.msg.replyCountText"&gt;
          &lt;/span&gt;
          &lt;span class="cm-last-reply-info cm-common-light-color" data-ng-if="!isMobileView()"&gt;(${ Latest reply}
            &lt;span class="cm-last-reply-timestamp"&gt;
              &lt;span data-ng-if="!c.latestReply.hideTimeAgo"&gt;&lt;sn-time-ago timestamp="c.latestReply.edited_date" /&gt;&lt;/span&gt;
              &lt;span data-ng-if="c.latestReply.hideTimeAgo"&gt;${Just Now}&lt;/span&gt;
            &lt;/span&gt;
            ${by}
            &lt;gm-hover-card readonlymode="::c.data.readOnlyMode" carddata="c.latestReply.userAvatarObject" enablegamification="::c.data.enable_gamification" pointslabel="::c.data.msg.points" profilelink="::c.data.msg.profileLink" subject="::c.data.msg.subject" canemail="::data.isCommuAdminOrMod&amp;&amp;data.loggedInUserProfileId !=c.latestReply.userAvatarObject.userId"&gt;&lt;/gm-hover-card&gt;
            &lt;span class="cm-close-brace"&gt;)&lt;/span&gt;
          &lt;/span&gt;
        &lt;/div&gt;
        &lt;button class="btn btn-default show-all-btn pull-right" data-ng-if="!c.hideShowAllReplyBtn" data-ng-click="c.showNestedReplies()" data-ng-class="isMobileView() ? 'cm-small-font' : ''"&gt;
          &lt;span data-ng-if="!c.showAllReplies"&gt;${Show All Replies}&lt;/span&gt;
          &lt;span data-ng-if="c.showAllReplies"&gt;${Hide All Replies}&lt;/span&gt;
        &lt;/button&gt;
      &lt;/div&gt;
      &lt;div class="panel panel-{{::options.panel_type}} csm-tile csm-widget cm-comment" data-ng-repeat="comment in c.comments track by comment.sys_id" emit-on-last-repeat&gt;
        &lt;div class="panel-body cm-comment-body"&gt;
          &lt;div data-ng-include='"communityRepliesTemplate"'&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="panel-footer text-center cm-show-reply" data-ng-if="isMobileView() &amp;&amp; comment.comment_count &gt; 0"&gt;
          &lt;button class="btn" data-ng-click="c.showNestedReplies(comment)"&gt;
            &lt;span data-ng-if="!comment.showReplies"&gt;&lt;i class="fa fa-arrow-circle-down" aria-hidden="true"&gt;&lt;/i&gt;${Show Replies}&lt;/span&gt;
            &lt;span data-ng-if="comment.showReplies"&gt;&lt;i class="fa fa-arrow-circle-up" aria-hidden="true"&gt;&lt;/i&gt;${Hide Replies}&lt;/span&gt;
          &lt;/button&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
      &lt;div data-ng-if="c.post.original_disable_comments" class="panel panel-{{::options.panel_type}} csm-tile cm-end-reply-panel csm-widget disable-comments-message"&gt;
        &lt;span class="cm-reply-text"&gt;${Replies are currently disabled for this question.}&lt;/span&gt;
      &lt;/div&gt;
    &lt;div class="panel panel-{{::options.panel_type}} csm-tile cm-end-reply-panel csm-widget" data-ng-if="c.comments.length &amp;&amp; c.post.canReply &amp;&amp; c.data.isLoggedIn &amp;&amp; !c.post.showEditMode"&gt;
      &lt;div class="cm-reply-box-hide" data-ng-if="!c.post.showReplyBox2" &gt;
        &lt;div class="cm-user-img cm-align-center visible-xs"&gt;
          &lt;span class="image50px" &gt;
            &lt;a ng-href="/{{c.data.portal}}?id=community_user_profile&amp;user={{c.user.userId}}" title="{{::c.user.name}}"&gt;
              &lt;sn-avatar primary="::c.user" show-presence="false"/&gt;
            &lt;/a&gt;
          &lt;/span&gt;
          &lt;a role="button" href="javascript:void(0);" class="cm-button-link cm-reply-text" data-ng-click="c.showReplyBox(c.post,!c.post.showReplyBox2,2,'ccq_postEditor')"&gt;
            ${Click here to reply on this post...}
          &lt;/a&gt;
        &lt;/div&gt;
        &lt;div class="cm-user-img hidden-xs"&gt;
          &lt;span class="image50px"&gt;
            &lt;a ng-href="/{{c.data.portal}}?id=community_user_profile&amp;user={{c.user.userId}}" title="{{::c.user.name}}"&gt;
              &lt;sn-avatar primary="::c.user" show-presence="false"/&gt;
            &lt;/a&gt;
          &lt;/span&gt;
          &lt;a role="button" href="javascript:void(0);" class="cm-button-link cm-reply-text" data-ng-click="c.showReplyBox(c.post,!c.post.showReplyBox2,2,'ccq_postEditor')"&gt;
            ${Click here to reply on this post...}
          &lt;/a&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="cm-reply-box self-clear" data-ng-if="c.post.showReplyBox2"&gt;
        &lt;div class="alert alert-danger cm-alert-inform clearfix" data-ng-if="c.formValidation.showMsg"&gt;
          &lt;div class="alert-icon pull-left"&gt;
            &lt;i class="fa fa-exclamation-circle" aria-hidden="true"&gt;&lt;/i&gt;
          &lt;/div&gt;
          &lt;div class="alert-text pull-left"&gt;
            &lt;span ng-bind="c.formValidationError"&gt;&lt;/span&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="form-group cm-widget-mce hidden-xs" id="ccq_postEditor" data-ng-if="c.post.showReplyBox2"&gt;
          &lt;sp-tinymce-video data-ng-model="c.newReplyText" ng-model-options="{height: '300', allow: c.data.allowInsertVideoOnAnswer, updateOn: 'default blur',
                                       debounce:{
                                       'default':250}
                                       }" sn-mentions-config="::c.data.userMentionConfig"&gt;&lt;/sp-tinymce-video&gt;
        &lt;/div&gt;
        &lt;div class="form-group cm-reply-textarea visible-xs"&gt;
          &lt;label id="lbl4" class="sr-only"&gt;${Post A Reply}&lt;/label&gt;
          &lt;textarea data-ng-model="c.post.textInput" class="form-control" rows="5" aria-labelledby="lbl4"
                    ng-model-options="{
                                       updateOn: 'default blur',
                                       debounce:{
                                       'default':250}
                                       }"&gt;&lt;/textarea&gt;
        &lt;/div&gt;
        &lt;div class="form-group" &gt;
          &lt;div class="cm-attach-link padder-t"&gt;
            &lt;community-attachments attachments="c.attachments"
                                   config="{canEdit: true,
                                           dialogMode: true,
                                           showDialogDnD: true,
                                           showDialogList: true,
                                           canDeleteFile: true,
                                           attachmentsCount: c.attachmentsCount,
                                           attachmentsAdded: c.attachmentsAdded,
                                           parentWidget: c.widget.sys_id
                                           }"  &gt;&lt;/community-attachments&gt;
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;div class="cm-form-actions"&gt;
          &lt;div class="btn-container"&gt;
            &lt;div class="pull-right"&gt;
              &lt;button type="cancel" class="btn btn-default cm-cancel-btn action-btn" data-ng-click="c.cancelReply(c.post,2)"&gt;${Cancel}&lt;/button&gt;
              &lt;button type="submit" class="btn btn-primary action-btn" data-ng-disabled="!c.post.isDirty" data-ng-click="c.postComment(c.post,'question',2)"&gt;${Reply}&lt;/button&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id="screen-reader-tag-id" class="sr-only" role="alert" aria-live="polite"&gt;
  &lt;/div&gt;
&lt;/div&gt;]]&gt;&lt;/template&gt;&lt;/sp_widget&gt;</payload><sys_class_name>sp_rel_widget_clone</sys_class_name><sys_created_by>pradeep</sys_created_by><sys_created_on>2020-04-20 07:36:14</sys_created_on><sys_id>f719af55db945410730a7b38689619c2</sys_id><sys_mod_count>0</sys_mod_count><sys_name>7b19eb55db945410730a7b3868961997</sys_name><sys_package display_value="Titan Encircle" source="x_236494_titan_enc">fd74bb58db109010730a7b386896199e</sys_package><sys_policy/><sys_scope display_value="Titan Encircle">fd74bb58db109010730a7b386896199e</sys_scope><sys_update_name>sp_rel_widget_clone_f719af55db945410730a7b38689619c2</sys_update_name><sys_updated_by>pradeep</sys_updated_by><sys_updated_on>2020-04-20 07:36:14</sys_updated_on></sp_rel_widget_clone></record_update>]]></payload>
        <payload_hash>196652589</payload_hash>
        <record_name>7b19eb55db945410730a7b3868961997</record_name>
        <reverted_from/>
        <source>7574bb58db109010730a7b38689619a1</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>pradeep</sys_created_by>
        <sys_created_on>2020-04-20 07:36:14</sys_created_on>
        <sys_id>7319af55db945410730a7b38689619c4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>171968424b40000001</sys_recorded_at>
        <sys_updated_by>pradeep</sys_updated_by>
        <sys_updated_on>2020-04-20 07:36:14</sys_updated_on>
        <type>Widget Clone</type>
        <update_guid>bb19af55c0945410959c077293bbe2c3</update_guid>
        <update_guid_history>bb19af55c0945410959c077293bbe2c3:196652589</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete display_value="">3543442ddbd45410730a7b38689619f1</sys_audit_delete>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>pradeep</sys_created_by>
        <sys_created_on>2020-04-20 09:30:30</sys_created_on>
        <sys_db_object display_value="" name="sp_rel_widget_clone">sp_rel_widget_clone</sys_db_object>
        <sys_id>05c83f2222024ac889c8c04ad7da7d99</sys_id>
        <sys_metadata>f719af55db945410730a7b38689619c2</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>7b19eb55db945410730a7b3868961997</sys_name>
        <sys_package display_value="Titan Encircle" source="x_236494_titan_enc">fd74bb58db109010730a7b386896199e</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="Titan Encircle">fd74bb58db109010730a7b386896199e</sys_scope>
        <sys_scope_delete display_value="">0de0b3f8a94448488137bd5ffca83e40</sys_scope_delete>
        <sys_update_name>sp_rel_widget_clone_f719af55db945410730a7b38689619c2</sys_update_name>
        <sys_update_version display_value="sp_rel_widget_clone_f719af55db945410730a7b38689619c2">7319af55db945410730a7b38689619c4</sys_update_version>
        <sys_updated_by>pradeep</sys_updated_by>
        <sys_updated_on>2020-04-20 09:30:30</sys_updated_on>
    </sys_metadata_delete>
</record_update>
